{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"re",
				"request"
			],
			[
				"rg",
				"rgba()"
			],
			[
				"back",
				"background-color"
			],
			[
				"qs",
				"qs_parent"
			],
			[
				"pa",
				"parent"
			],
			[
				"Twee",
				"Tweet"
			],
			[
				"twee",
				"tweetValue"
			],
			[
				"Twe",
				"Tweet"
			],
			[
				"ge",
				"get_serializer_context"
			],
			[
				"con",
				"console"
			],
			[
				"A",
				"AUTH_USER_MODEL"
			],
			[
				"user",
				"username"
			],
			[
				"in",
				"initialURL"
			],
			[
				"twe",
				"tweetContainer"
			],
			[
				"coin",
				"container"
			],
			[
				"get",
				"get_absolute_url"
			],
			[
				"val",
				"validate_content"
			],
			[
				"is",
				"is_retweet"
			],
			[
				"p",
				"parent"
			],
			[
				"im",
				"im_following"
			],
			[
				"to",
				"toggle_user"
			],
			[
				"User",
				"UserProfile"
			],
			[
				"f",
				"following"
			],
			[
				"fe",
				"fetchTweets"
			],
			[
				"next",
				"nextTweetUrl"
			],
			[
				"ne",
				"nextTweetUrl"
			],
			[
				"fet",
				"fetchUrl"
			],
			[
				"pre",
				"preventDefault"
			],
			[
				"tie",
				"timestamp"
			],
			[
				"T",
				"TweetModelForm"
			],
			[
				"ur",
				"url"
			],
			[
				"background",
				"background-color"
			],
			[
				"obj",
				"objects"
			],
			[
				"Upda",
				"UpdateView"
			],
			[
				"form",
				"forms"
			],
			[
				"cre",
				"create_view"
			],
			[
				"fo",
				"form"
			],
			[
				"de",
				"def\tFunction"
			],
			[
				"c",
				"create"
			],
			[
				"va",
				"validate_content"
			],
			[
				"a",
				"all"
			],
			[
				"obje",
				"objects"
			],
			[
				"ob",
				"objects"
			],
			[
				"o",
				"objects"
			],
			[
				"lis",
				"tweet_list_view"
			],
			[
				"url",
				"urlpatterns"
			],
			[
				"ue",
				"username"
			],
			[
				"ta",
				"table_password"
			],
			[
				"mysql_fet",
				"mysql_fetch_assoc"
			],
			[
				"mysql_nu",
				"mysql_num_rows"
			],
			[
				"mysql",
				"mysql_query"
			],
			[
				"my",
				"mysql_error"
			],
			[
				"mysql_re",
				"mysql_real_escape_string"
			],
			[
				"ass",
				"assign"
			],
			[
				"mysql_",
				"mysql_query"
			],
			[
				"mysql_s",
				"mysql_select_db"
			],
			[
				"pass",
				"password"
			],
			[
				"el",
				"else"
			],
			[
				"js",
				"json_encode"
			],
			[
				"ex",
				"exit"
			],
			[
				"pro",
				"prod"
			],
			[
				"th",
				"this"
			],
			[
				"fun",
				"function"
			],
			[
				"pu",
				"public"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/accounts/models.py",
			"settings":
			{
				"buffer_size": 2227,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/accounts/templates/accounts/user_detail.html",
			"settings":
			{
				"buffer_size": 1601,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/tweets/templates/tweets/tweet_list.html",
			"settings":
			{
				"buffer_size": 1612,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\nfrom django.conf.urls import url,include\nfrom django.views.generic.base import RedirectView\n\n# from .views import tweet_detail_view, tweet_list_view, TweetDetailView, TweetListView\nfrom .views import (\n\tUserDetailView,\n\tUserFollowView,\n\t)\n\nurlpatterns = [\n    # #url(r'^admin/', admin.site.urls),\n    # url(r'^$', RedirectView.as_view(url=\"/\")),\n    # url(r'^search/$', TweetListView.as_view(), name='list'),\n    # url(r'^create/$', TweetCreateView.as_view(), name='create'),\n    url(r'^(?P<username>[\\w.@+-]+)/$', UserDetailView.as_view(), name='detail'),\n    url(r'^(?P<username>[\\w.@+-]+)/follow/$', UserFollowView.as_view(), name='follow'),\n    # url(r'^(?P<pk>\\d+)/update/$', TweetUpdateView.as_view(), name='update'),\n    # url(r'^(?P<pk>\\d+)/delete/$', TweetDeleteView.as_view(), name='delete'),\n]",
			"file": "src/accounts/urls.py",
			"file_size": 856,
			"file_write_time": 131593740590000000,
			"settings":
			{
				"buffer_size": 805,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/tweetme/urls.py",
			"settings":
			{
				"buffer_size": 1846,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/accounts/templates/registration/login.html",
			"settings":
			{
				"buffer_size": 1142,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\nSearching 4082 files for \"settings\"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/include/python3.6m/modsupport.h:\n  142  #ifdef Py_TRACE_REFS\n  143   /* When we are tracing reference counts, rename module creation functions so\n  144:     modules compiled with incompatible settings will generate a\n  145      link-time error. */\n  146   #define PyModule_Create2 PyModule_Create2TraceRefs\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/include/python3.6m/pyport.h:\n  381   *  and also give appropriate definitions for the following three macros:\n  382   *\n  383:  *    _PY_SET_53BIT_PRECISION_START : store original FPU settings, and\n  384   *        set FPU to 53-bit precision/round-half-to-even\n  385:  *    _PY_SET_53BIT_PRECISION_END : restore original FPU settings\n  386   *    _PY_SET_53BIT_PRECISION_HEADER : any variable declarations needed to\n  387   *        use the two macros above.\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/locale.py:\n  253  \n  254  def currency(val, symbol=True, grouping=False, international=False):\n  255:     \"\"\"Formats val according to the currency settings\n  256      in the current locale.\"\"\"\n  257      conv = localeconv()\n  ...\n  302  \n  303  def delocalize(string):\n  304:     \"Parses a string as a normalized number according to the locale settings.\"\n  305  \n  306      conv = localeconv()\n  ...\n  318  \n  319  def atof(string, func=float):\n  320:     \"Parses a string as a float according to the locale settings.\"\n  321      return func(delocalize(string))\n  322  \n  323  def atoi(string):\n  324:     \"Converts a string to an integer according to the locale settings.\"\n  325      return int(delocalize(string))\n  326  \n  ...\n  512  def getdefaultlocale(envvars=('LC_ALL', 'LC_CTYPE', 'LANG', 'LANGUAGE')):\n  513  \n  514:     \"\"\" Tries to determine the default locale settings and returns\n  515          them as tuple (language code, encoding).\n  516  \n  ...\n 1629      print()\n 1630  \n 1631:     print('Locale settings on startup:')\n 1632      print('-'*72)\n 1633      for name,category in categories.items():\n ....\n 1639  \n 1640      print()\n 1641:     print('Locale settings after calling resetlocale():')\n 1642      print('-'*72)\n 1643      resetlocale()\n ....\n 1657      else:\n 1658          print()\n 1659:         print('Locale settings after calling setlocale(LC_ALL, \"\"):')\n 1660          print('-'*72)\n 1661          for name,category in categories.items():\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/__init__.py:\n   10  def setup(set_prefix=True):\n   11      \"\"\"\n   12:     Configure the settings (this happens as a side effect of accessing the\n   13      first setting), configure logging and populate the app registry.\n   14      Set the thread-local urlresolvers script prefix if `set_prefix` is True.\n   15      \"\"\"\n   16      from django.apps import apps\n   17:     from django.conf import settings\n   18      from django.urls import set_script_prefix\n   19      from django.utils.encoding import force_text\n   20      from django.utils.log import configure_logging\n   21  \n   22:     configure_logging(settings.LOGGING_CONFIG, settings.LOGGING)\n   23      if set_prefix:\n   24          set_script_prefix(\n   25:             '/' if settings.FORCE_SCRIPT_NAME is None else force_text(settings.FORCE_SCRIPT_NAME)\n   26          )\n   27:     apps.populate(settings.INSTALLED_APPS)\n   28  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/apps/registry.py:\n  260  \n  261      @lru_cache.lru_cache(maxsize=None)\n  262:     def get_swappable_settings_name(self, to_string):\n  263          \"\"\"\n  264          For a given model string (e.g. \"auth.User\"), return the name of the\n  265:         corresponding settings name if it refers to a swappable model. If the\n  266          referred model is not swappable, return None.\n  267  \n  268          This method is decorated with lru_cache because it's performance\n  269:         critical when it comes to migrations. Since the swappable settings don't\n  270:         change after Django has loaded the settings, there is no reason to get\n  271:         the respective settings attribute over and over again.\n  272          \"\"\"\n  273          for model in self.get_models(include_swapped=True):\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/__init__.py:\n    1  \"\"\"\n    2: Settings and configuration for Django.\n    3  \n    4: Values will be read from the module specified by the DJANGO_SETTINGS_MODULE environment\n    5: variable, and then from django.conf.global_settings; see the global settings file for\n    6  a list of all possible variables.\n    7  \"\"\"\n    .\n   11  import time\n   12  \n   13: from django.conf import global_settings\n   14  from django.core.exceptions import ImproperlyConfigured\n   15  from django.utils.functional import LazyObject, empty\n   16  \n   17: ENVIRONMENT_VARIABLE = \"DJANGO_SETTINGS_MODULE\"\n   18  \n   19  \n   20: class LazySettings(LazyObject):\n   21      \"\"\"\n   22:     A lazy proxy for either global Django settings or a custom settings object.\n   23:     The user can manually configure settings prior to using them. Otherwise,\n   24:     Django uses the settings module pointed to by DJANGO_SETTINGS_MODULE.\n   25      \"\"\"\n   26      def _setup(self, name=None):\n   27          \"\"\"\n   28:         Load the settings module pointed to by the environment variable. This\n   29:         is used the first time we need any settings at all, if the user has not\n   30:         previously configured the settings manually.\n   31          \"\"\"\n   32:         settings_module = os.environ.get(ENVIRONMENT_VARIABLE)\n   33:         if not settings_module:\n   34:             desc = (\"setting %s\" % name) if name else \"settings\"\n   35              raise ImproperlyConfigured(\n   36:                 \"Requested %s, but settings are not configured. \"\n   37                  \"You must either define the environment variable %s \"\n   38:                 \"or call settings.configure() before accessing settings.\"\n   39                  % (desc, ENVIRONMENT_VARIABLE))\n   40  \n   41:         self._wrapped = Settings(settings_module)\n   42  \n   43      def __repr__(self):\n   44:         # Hardcode the class name as otherwise it yields 'Settings'.\n   45          if self._wrapped is empty:\n   46:             return '<LazySettings [Unevaluated]>'\n   47:         return '<LazySettings \"%(settings_module)s\">' % {\n   48:             'settings_module': self._wrapped.SETTINGS_MODULE,\n   49          }\n   50  \n   ..\n   54          return getattr(self._wrapped, name)\n   55  \n   56:     def configure(self, default_settings=global_settings, **options):\n   57          \"\"\"\n   58:         Called to manually configure the settings. The 'default_settings'\n   59          parameter sets where to retrieve any unspecified values from (its\n   60          argument must support attribute access (__getattr__)).\n   61          \"\"\"\n   62          if self._wrapped is not empty:\n   63:             raise RuntimeError('Settings already configured.')\n   64:         holder = UserSettingsHolder(default_settings)\n   65          for name, value in options.items():\n   66              setattr(holder, name, value)\n   ..\n   70      def configured(self):\n   71          \"\"\"\n   72:         Returns True if the settings have already been configured.\n   73          \"\"\"\n   74          return self._wrapped is not empty\n   75  \n   76  \n   77: class BaseSettings(object):\n   78      \"\"\"\n   79:     Common logic for settings whether set by a module or by the user.\n   80      \"\"\"\n   81      def __setattr__(self, name, value):\n   ..\n   85  \n   86  \n   87: class Settings(BaseSettings):\n   88:     def __init__(self, settings_module):\n   89:         # update this dict from global settings (but only for ALL_CAPS settings)\n   90:         for setting in dir(global_settings):\n   91              if setting.isupper():\n   92:                 setattr(self, setting, getattr(global_settings, setting))\n   93  \n   94:         # store the settings module in case someone later cares\n   95:         self.SETTINGS_MODULE = settings_module\n   96  \n   97:         mod = importlib.import_module(self.SETTINGS_MODULE)\n   98  \n   99:         tuple_settings = (\n  100              \"INSTALLED_APPS\",\n  101              \"TEMPLATE_DIRS\",\n  102              \"LOCALE_PATHS\",\n  103          )\n  104:         self._explicit_settings = set()\n  105          for setting in dir(mod):\n  106              if setting.isupper():\n  107                  setting_value = getattr(mod, setting)\n  108  \n  109:                 if (setting in tuple_settings and\n  110                          not isinstance(setting_value, (list, tuple))):\n  111                      raise ImproperlyConfigured(\"The %s setting must be a list or a tuple. \" % setting)\n  112                  setattr(self, setting, setting_value)\n  113:                 self._explicit_settings.add(setting)\n  114  \n  115          if not self.SECRET_KEY:\n  ...\n  129  \n  130      def is_overridden(self, setting):\n  131:         return setting in self._explicit_settings\n  132  \n  133      def __repr__(self):\n  134:         return '<%(cls)s \"%(settings_module)s\">' % {\n  135              'cls': self.__class__.__name__,\n  136:             'settings_module': self.SETTINGS_MODULE,\n  137          }\n  138  \n  139  \n  140: class UserSettingsHolder(BaseSettings):\n  141      \"\"\"\n  142:     Holder for user configured settings.\n  143      \"\"\"\n  144:     # SETTINGS_MODULE doesn't make much sense in the manually configured\n  145      # (standalone) case.\n  146:     SETTINGS_MODULE = None\n  147  \n  148:     def __init__(self, default_settings):\n  149          \"\"\"\n  150          Requests for configuration variables not in this class are satisfied\n  151:         from the module specified in default_settings (if possible).\n  152          \"\"\"\n  153          self.__dict__['_deleted'] = set()\n  154:         self.default_settings = default_settings\n  155  \n  156      def __getattr__(self, name):\n  157          if name in self._deleted:\n  158              raise AttributeError\n  159:         return getattr(self.default_settings, name)\n  160  \n  161      def __setattr__(self, name, value):\n  162          self._deleted.discard(name)\n  163:         super(UserSettingsHolder, self).__setattr__(name, value)\n  164  \n  165      def __delattr__(self, name):\n  166          self._deleted.add(name)\n  167          if hasattr(self, name):\n  168:             super(UserSettingsHolder, self).__delattr__(name)\n  169  \n  170      def __dir__(self):\n  171          return sorted(\n  172:             s for s in list(self.__dict__) + dir(self.default_settings)\n  173              if s not in self._deleted\n  174          )\n  ...\n  177          deleted = (setting in self._deleted)\n  178          set_locally = (setting in self.__dict__)\n  179:         set_on_default = getattr(self.default_settings, 'is_overridden', lambda s: False)(setting)\n  180          return (deleted or set_locally or set_on_default)\n  181  \n  ...\n  185          }\n  186  \n  187: settings = LazySettings()\n  188  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/global_settings.py:\n    1  # -*- coding: utf-8 -*-\n    2  \"\"\"\n    3: Default Django settings. Override these with settings in the module pointed to\n    4: by the DJANGO_SETTINGS_MODULE environment variable.\n    5  \"\"\"\n    6  from __future__ import unicode_literals\n    .\n    8  \n    9  # This is defined here as a do-nothing function because we can't import\n   10: # django.utils.translation -- that module depends on the settings.\n   11  def gettext_noop(s):\n   12      return s\n   ..\n  152  LOCALE_PATHS = []\n  153  \n  154: # Settings for language cookie\n  155  LANGUAGE_COOKIE_NAME = 'django_language'\n  156  LANGUAGE_COOKIE_AGE = None\n  ...\n  255  \n  256  # A secret key for this particular Django installation. Used in secret-key\n  257: # hashing algorithms. Set this in your settings, or Django will complain\n  258  # loudly.\n  259  SECRET_KEY = ''\n  ...\n  534  CSRF_FAILURE_VIEW = 'django.views.csrf.csrf_failure'\n  535  \n  536: # Settings for CSRF cookie.\n  537  CSRF_COOKIE_NAME = 'csrftoken'\n  538  CSRF_COOKIE_AGE = 60 * 60 * 24 * 7 * 52\n  ...\n  552  \n  553  # Default values of MESSAGE_LEVEL and MESSAGE_TAGS are defined within\n  554: # django.contrib.messages to avoid imports in this settings file.\n  555  \n  556  ###########\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/af/LC_MESSAGES/django.po:\n 1123  msgid \"\"\n 1124  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1125: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1126  msgstr \"\"\n 1127  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/ar/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/ar/LC_MESSAGES/django.po:\n 1211  msgid \"\"\n 1212  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1213: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1214  msgstr \"\"\n 1215  \"تظهر لك هذه الرسالة لأنه لديك <code>DEBUG = True</code> في ملف إعدادات جانغو \"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/ast/LC_MESSAGES/django.po:\n 1107  msgid \"\"\n 1108  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1109: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1110  msgstr \"\"\n 1111  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/az/LC_MESSAGES/django.po:\n 1108  msgid \"\"\n 1109  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1110: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1111  msgstr \"\"\n 1112  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/be/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/be/LC_MESSAGES/django.po:\n 1178  msgid \"\"\n 1179  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1180: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1181  msgstr \"\"\n 1182  \"Вы бачыце гэта паведамленне, таму што вы маеце <code>DEBUG = True</code> у \"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/bg/LC_MESSAGES/django.po:\n 1140  msgid \"\"\n 1141  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1142: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1143  msgstr \"\"\n 1144  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/bn/LC_MESSAGES/django.po:\n 1087  msgid \"\"\n 1088  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1089: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1090  msgstr \"\"\n 1091  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/br/LC_MESSAGES/django.po:\n 1092  msgid \"\"\n 1093  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1094: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1095  msgstr \"\"\n 1096  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/bs/LC_MESSAGES/django.po:\n 1107  msgid \"\"\n 1108  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1109: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1110  msgstr \"\"\n 1111  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/ca/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/ca/LC_MESSAGES/django.po:\n 1150  msgid \"\"\n 1151  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1152: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1153  msgstr \"\"\n 1154  \"Veieu aquest missatge perquè teniu <code>DEBUG = True</code> a la \"\n 1155: \"configuració del Django settings i no heu configurat cap URL. A treballar!\"\n 1156  \n 1157  msgid \"No year specified\"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/cs/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/cs/LC_MESSAGES/django.po:\n 1156  msgid \"\"\n 1157  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1158: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1159  msgstr \"\"\n 1160  \"Tuto zprávu vidíte, protože máte v nastavení Djanga zapnutý vývojový režim \"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/cy/LC_MESSAGES/django.po:\n 1169  msgid \"\"\n 1170  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1171: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1172  msgstr \"\"\n 1173  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/da/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/da/LC_MESSAGES/django.po:\n 1135  msgid \"\"\n 1136  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1137: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1138  msgstr \"\"\n 1139  \"Du ser denne besked fordi du har <code>DEBUG = True</code> i din Django \"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/de/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/de/LC_MESSAGES/django.po:\n 1154  msgid \"\"\n 1155  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1156: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1157  msgstr \"\"\n 1158: \"Diese Mitteiling ist sichtbar weil in der settings.py-Datei <code>DEBUG = \"\n 1159  \"True</code> steht und die URLs noch nicht konfiguriert sind.\"\n 1160  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/dsb/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/dsb/LC_MESSAGES/django.po:\n 1186  msgid \"\"\n 1187  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1188: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1189  msgstr \"\"\n 1190  \"Wiźiśo toś tu powěźeńku, dokulaž maśo <code>DEBUG = True</code> w swójej \"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/el/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/el/LC_MESSAGES/django.po:\n 1160  msgid \"\"\n 1161  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1162: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1163  msgstr \"\"\n 1164  \"Βλέπετε αυτό το μήνυμα επείδη έχετε <code>DEBUG = True</code> στο αρχείο \"\n 1165: \"settings του Django σας και δεν έχετε ρυθμίσει καμία URL. Στρωθείτε στην \"\n 1166  \"δουλειά!\"\n 1167  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/en/LC_MESSAGES/django.po:\n   14  \"Content-Transfer-Encoding: 8bit\\n\"\n   15  \n   16: #: conf/global_settings.py:51\n   17  msgid \"Afrikaans\"\n   18  msgstr \"\"\n   19  \n   20: #: conf/global_settings.py:52\n   21  msgid \"Arabic\"\n   22  msgstr \"\"\n   23  \n   24: #: conf/global_settings.py:53\n   25  msgid \"Asturian\"\n   26  msgstr \"\"\n   27  \n   28: #: conf/global_settings.py:54\n   29  msgid \"Azerbaijani\"\n   30  msgstr \"\"\n   31  \n   32: #: conf/global_settings.py:55\n   33  msgid \"Bulgarian\"\n   34  msgstr \"\"\n   35  \n   36: #: conf/global_settings.py:56\n   37  msgid \"Belarusian\"\n   38  msgstr \"\"\n   39  \n   40: #: conf/global_settings.py:57\n   41  msgid \"Bengali\"\n   42  msgstr \"\"\n   43  \n   44: #: conf/global_settings.py:58\n   45  msgid \"Breton\"\n   46  msgstr \"\"\n   47  \n   48: #: conf/global_settings.py:59\n   49  msgid \"Bosnian\"\n   50  msgstr \"\"\n   51  \n   52: #: conf/global_settings.py:60\n   53  msgid \"Catalan\"\n   54  msgstr \"\"\n   55  \n   56: #: conf/global_settings.py:61\n   57  msgid \"Czech\"\n   58  msgstr \"\"\n   59  \n   60: #: conf/global_settings.py:62\n   61  msgid \"Welsh\"\n   62  msgstr \"\"\n   63  \n   64: #: conf/global_settings.py:63\n   65  msgid \"Danish\"\n   66  msgstr \"\"\n   67  \n   68: #: conf/global_settings.py:64\n   69  msgid \"German\"\n   70  msgstr \"\"\n   71  \n   72: #: conf/global_settings.py:70\n   73  msgid \"Lower Sorbian\"\n   74  msgstr \"\"\n   75  \n   76: #: conf/global_settings.py:71\n   77  msgid \"Greek\"\n   78  msgstr \"\"\n   79  \n   80: #: conf/global_settings.py:66\n   81  msgid \"English\"\n   82  msgstr \"\"\n   83  \n   84: #: conf/global_settings.py:67\n   85  msgid \"Australian English\"\n   86  msgstr \"\"\n   87  \n   88: #: conf/global_settings.py:68\n   89  msgid \"British English\"\n   90  msgstr \"\"\n   91  \n   92: #: conf/global_settings.py:69\n   93  msgid \"Esperanto\"\n   94  msgstr \"\"\n   95  \n   96: #: conf/global_settings.py:70\n   97  msgid \"Spanish\"\n   98  msgstr \"\"\n   99  \n  100: #: conf/global_settings.py:71\n  101  msgid \"Argentinian Spanish\"\n  102  msgstr \"\"\n  103  \n  104: #: conf/global_settings.py:72\n  105  msgid \"Colombian Spanish\"\n  106  msgstr \"\"\n  107  \n  108: #: conf/global_settings.py:72\n  109  msgid \"Mexican Spanish\"\n  110  msgstr \"\"\n  111  \n  112: #: conf/global_settings.py:73\n  113  msgid \"Nicaraguan Spanish\"\n  114  msgstr \"\"\n  115  \n  116: #: conf/global_settings.py:74\n  117  msgid \"Venezuelan Spanish\"\n  118  msgstr \"\"\n  119  \n  120: #: conf/global_settings.py:75\n  121  msgid \"Estonian\"\n  122  msgstr \"\"\n  123  \n  124: #: conf/global_settings.py:76\n  125  msgid \"Basque\"\n  126  msgstr \"\"\n  127  \n  128: #: conf/global_settings.py:77\n  129  msgid \"Persian\"\n  130  msgstr \"\"\n  131  \n  132: #: conf/global_settings.py:78\n  133  msgid \"Finnish\"\n  134  msgstr \"\"\n  135  \n  136: #: conf/global_settings.py:79\n  137  msgid \"French\"\n  138  msgstr \"\"\n  139  \n  140: #: conf/global_settings.py:80\n  141  msgid \"Frisian\"\n  142  msgstr \"\"\n  143  \n  144: #: conf/global_settings.py:81\n  145  msgid \"Irish\"\n  146  msgstr \"\"\n  147  \n  148: #: conf/global_settings.py:83\n  149  msgid \"Scottish Gaelic\"\n  150  msgstr \"\"\n  151  \n  152: #: conf/global_settings.py:82\n  153  msgid \"Galician\"\n  154  msgstr \"\"\n  155  \n  156: #: conf/global_settings.py:83\n  157  msgid \"Hebrew\"\n  158  msgstr \"\"\n  159  \n  160: #: conf/global_settings.py:84\n  161  msgid \"Hindi\"\n  162  msgstr \"\"\n  163  \n  164: #: conf/global_settings.py:85\n  165  msgid \"Croatian\"\n  166  msgstr \"\"\n  167  \n  168: #: conf/global_settings.py:94\n  169  msgid \"Upper Sorbian\"\n  170  msgstr \"\"\n  171  \n  172: #: conf/global_settings.py:95\n  173  msgid \"Hungarian\"\n  174  msgstr \"\"\n  175  \n  176: #: conf/global_settings.py:87\n  177  msgid \"Interlingua\"\n  178  msgstr \"\"\n  179  \n  180: #: conf/global_settings.py:88\n  181  msgid \"Indonesian\"\n  182  msgstr \"\"\n  183  \n  184: #: conf/global_settings.py:89\n  185  msgid \"Ido\"\n  186  msgstr \"\"\n  187  \n  188: #: conf/global_settings.py:90\n  189  msgid \"Icelandic\"\n  190  msgstr \"\"\n  191  \n  192: #: conf/global_settings.py:91\n  193  msgid \"Italian\"\n  194  msgstr \"\"\n  195  \n  196: #: conf/global_settings.py:92\n  197  msgid \"Japanese\"\n  198  msgstr \"\"\n  199  \n  200: #: conf/global_settings.py:93\n  201  msgid \"Georgian\"\n  202  msgstr \"\"\n  203  \n  204: #: conf/global_settings.py:94\n  205  msgid \"Kazakh\"\n  206  msgstr \"\"\n  207  \n  208: #: conf/global_settings.py:95\n  209  msgid \"Khmer\"\n  210  msgstr \"\"\n  211  \n  212: #: conf/global_settings.py:96\n  213  msgid \"Kannada\"\n  214  msgstr \"\"\n  215  \n  216: #: conf/global_settings.py:97\n  217  msgid \"Korean\"\n  218  msgstr \"\"\n  219  \n  220: #: conf/global_settings.py:98\n  221  msgid \"Luxembourgish\"\n  222  msgstr \"\"\n  223  \n  224: #: conf/global_settings.py:99\n  225  msgid \"Lithuanian\"\n  226  msgstr \"\"\n  227  \n  228: #: conf/global_settings.py:100\n  229  msgid \"Latvian\"\n  230  msgstr \"\"\n  231  \n  232: #: conf/global_settings.py:101\n  233  msgid \"Macedonian\"\n  234  msgstr \"\"\n  235  \n  236: #: conf/global_settings.py:102\n  237  msgid \"Malayalam\"\n  238  msgstr \"\"\n  239  \n  240: #: conf/global_settings.py:103\n  241  msgid \"Mongolian\"\n  242  msgstr \"\"\n  243  \n  244: #: conf/global_settings.py:104\n  245  msgid \"Marathi\"\n  246  msgstr \"\"\n  247  \n  248: #: conf/global_settings.py:105\n  249  msgid \"Burmese\"\n  250  msgstr \"\"\n  251  \n  252: #: conf/global_settings.py:113\n  253  msgid \"Norwegian Bokmål\"\n  254  msgstr \"\"\n  255  \n  256: #: conf/global_settings.py:107\n  257  msgid \"Nepali\"\n  258  msgstr \"\"\n  259  \n  260: #: conf/global_settings.py:108\n  261  msgid \"Dutch\"\n  262  msgstr \"\"\n  263  \n  264: #: conf/global_settings.py:109\n  265  msgid \"Norwegian Nynorsk\"\n  266  msgstr \"\"\n  267  \n  268: #: conf/global_settings.py:110\n  269  msgid \"Ossetic\"\n  270  msgstr \"\"\n  271  \n  272: #: conf/global_settings.py:111\n  273  msgid \"Punjabi\"\n  274  msgstr \"\"\n  275  \n  276: #: conf/global_settings.py:112\n  277  msgid \"Polish\"\n  278  msgstr \"\"\n  279  \n  280: #: conf/global_settings.py:113\n  281  msgid \"Portuguese\"\n  282  msgstr \"\"\n  283  \n  284: #: conf/global_settings.py:114\n  285  msgid \"Brazilian Portuguese\"\n  286  msgstr \"\"\n  287  \n  288: #: conf/global_settings.py:115\n  289  msgid \"Romanian\"\n  290  msgstr \"\"\n  291  \n  292: #: conf/global_settings.py:116\n  293  msgid \"Russian\"\n  294  msgstr \"\"\n  295  \n  296: #: conf/global_settings.py:117\n  297  msgid \"Slovak\"\n  298  msgstr \"\"\n  299  \n  300: #: conf/global_settings.py:118\n  301  msgid \"Slovenian\"\n  302  msgstr \"\"\n  303  \n  304: #: conf/global_settings.py:119\n  305  msgid \"Albanian\"\n  306  msgstr \"\"\n  307  \n  308: #: conf/global_settings.py:120\n  309  msgid \"Serbian\"\n  310  msgstr \"\"\n  311  \n  312: #: conf/global_settings.py:121\n  313  msgid \"Serbian Latin\"\n  314  msgstr \"\"\n  315  \n  316: #: conf/global_settings.py:122\n  317  msgid \"Swedish\"\n  318  msgstr \"\"\n  319  \n  320: #: conf/global_settings.py:123\n  321  msgid \"Swahili\"\n  322  msgstr \"\"\n  323  \n  324: #: conf/global_settings.py:124\n  325  msgid \"Tamil\"\n  326  msgstr \"\"\n  327  \n  328: #: conf/global_settings.py:125\n  329  msgid \"Telugu\"\n  330  msgstr \"\"\n  331  \n  332: #: conf/global_settings.py:126\n  333  msgid \"Thai\"\n  334  msgstr \"\"\n  335  \n  336: #: conf/global_settings.py:127\n  337  msgid \"Turkish\"\n  338  msgstr \"\"\n  339  \n  340: #: conf/global_settings.py:128\n  341  msgid \"Tatar\"\n  342  msgstr \"\"\n  343  \n  344: #: conf/global_settings.py:129\n  345  msgid \"Udmurt\"\n  346  msgstr \"\"\n  347  \n  348: #: conf/global_settings.py:130\n  349  msgid \"Ukrainian\"\n  350  msgstr \"\"\n  351  \n  352: #: conf/global_settings.py:131\n  353  msgid \"Urdu\"\n  354  msgstr \"\"\n  355  \n  356: #: conf/global_settings.py:132\n  357  msgid \"Vietnamese\"\n  358  msgstr \"\"\n  359  \n  360: #: conf/global_settings.py:133\n  361  msgid \"Simplified Chinese\"\n  362  msgstr \"\"\n  363  \n  364: #: conf/global_settings.py:134\n  365  msgid \"Traditional Chinese\"\n  366  msgstr \"\"\n  ...\n 1373  msgid \"\"\n 1374  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1375: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1376  msgstr \"\"\n 1377  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/en_AU/LC_MESSAGES/django.po:\n 1099  msgid \"\"\n 1100  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1101: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1102  msgstr \"\"\n 1103  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/en_GB/LC_MESSAGES/django.po:\n 1089  msgid \"\"\n 1090  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1091: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1092  msgstr \"\"\n 1093  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/eo/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/eo/LC_MESSAGES/django.po:\n 1140  msgid \"\"\n 1141  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1142: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1143  msgstr \"\"\n 1144  \"Vi vidas ĉi tiun mesaĝon ĉar vi havas <code>DEBUG = True</code> en viaj \"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/es/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/es/LC_MESSAGES/django.po:\n 1161  msgid \"\"\n 1162  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1163: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1164  msgstr \"\"\n 1165  \"Ves este mensaje porque tienes <code>DEBUG = True</code> en el archivo de \"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/es_AR/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/es_AR/LC_MESSAGES/django.po:\n 1151  msgid \"\"\n 1152  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1153: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1154  msgstr \"\"\n 1155  \"Estás viendo este mensaje porque tienes <code>DEBUG = True</code> en tu \"\n 1156: \"archivo de settings Django y porque no has configurado ninguna URL. ¡A \"\n 1157  \"trabajar!\"\n 1158  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/es_CO/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/es_CO/LC_MESSAGES/django.po:\n 1140  msgid \"\"\n 1141  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1142: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1143  msgstr \"\"\n 1144  \"Ves este mensaje porque tienes <code>DEBUG = True</code> en el archivo de \"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/es_MX/LC_MESSAGES/django.po:\n 1100  msgid \"\"\n 1101  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1102: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1103  msgstr \"\"\n 1104  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/es_VE/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/es_VE/LC_MESSAGES/django.po:\n 1140  msgid \"\"\n 1141  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1142: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1143  msgstr \"\"\n 1144  \"Ves este mensaje porque tienes <code>DEBUG = True</code> en el archivo de \"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/et/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/et/LC_MESSAGES/django.po:\n 1138  msgid \"\"\n 1139  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1140: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1141  msgstr \"\"\n 1142  \"Näete seda teadet, kuna teil on määratud <code>DEBUG = True</code> Django \"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/eu/LC_MESSAGES/django.po:\n 1106  msgid \"\"\n 1107  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1108: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1109  msgstr \"\"\n 1110  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/fa/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/fa/LC_MESSAGES/django.po:\n 1111  msgid \"\"\n 1112  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1113: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1114  msgstr \"\"\n 1115  \"شما این پیغام را میبینید چون <code>DEBUG = True</code> در فایل تنظیمات جنگو \"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/fi/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/fi/LC_MESSAGES/django.po:\n 1134  msgid \"\"\n 1135  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1136: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1137  msgstr \"\"\n 1138  \"Näet tämän viestin, koska asetuksissasi on <code>DEBUG = True</code> etkä \"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/fr/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/fr/LC_MESSAGES/django.po:\n 1161  msgid \"\"\n 1162  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1163: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1164  msgstr \"\"\n 1165  \"Vous voyez ce message car votre fichier de réglages Django contient \"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/fy/LC_MESSAGES/django.po:\n 1087  msgid \"\"\n 1088  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1089: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1090  msgstr \"\"\n 1091  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/ga/LC_MESSAGES/django.po:\n 1146  msgid \"\"\n 1147  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1148: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1149  msgstr \"\"\n 1150  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/gd/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/gd/LC_MESSAGES/django.po:\n 1210  msgid \"\"\n 1211  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1212: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1213  msgstr \"\"\n 1214  \"Chì thu an teachdaireachd seo air sgàth ’s gu bheil <code>DEBUG = True</\"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/gl/LC_MESSAGES/django.po:\n 1102  msgid \"\"\n 1103  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1104: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1105  msgstr \"\"\n 1106  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/he/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/he/LC_MESSAGES/django.po:\n 1111  msgid \"\"\n 1112  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1113: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1114  msgstr \"\"\n 1115  \"הודעה זו מופיעה בגלל שיש לך <code>DEBUG = True</code> בקובץ הגדרות ה-Django \"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/hi/LC_MESSAGES/django.po:\n 1087  msgid \"\"\n 1088  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1089: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1090  msgstr \"\"\n 1091  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/hr/LC_MESSAGES/django.po:\n 1143  msgid \"\"\n 1144  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1145: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1146  msgstr \"\"\n 1147  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/hsb/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/hsb/LC_MESSAGES/django.po:\n 1179  msgid \"\"\n 1180  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1181: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1182  msgstr \"\"\n 1183  \"Widźiće tutu zdźělenku, dokelž maće <code>DEBUG = True</code> w swojej \"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/hu/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/hu/LC_MESSAGES/django.po:\n 1155  msgid \"\"\n 1156  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1157: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1158  msgstr \"\"\n 1159  \"Azért jelenik meg ez az üzenet, mert a <code>DEBUG = True</code> szerepel a \"\n 1160: \"Django settings fájlban, és még nem került beállításra egy URL sem. Jó \"\n 1161  \"munkát!\"\n 1162  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/ia/LC_MESSAGES/django.po:\n 1109  msgid \"\"\n 1110  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1111: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1112  msgstr \"\"\n 1113  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/id/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/id/LC_MESSAGES/django.po:\n 1125  msgid \"\"\n 1126  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1127: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1128  msgstr \"\"\n 1129  \"Anda dapat meilhat pesan ini karena ada <code>DEBUG = True</code> di berkas \"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/io/LC_MESSAGES/django.po:\n 1101  msgid \"\"\n 1102  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1103: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1104  msgstr \"\"\n 1105  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/is/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/is/LC_MESSAGES/django.po:\n 1106  msgid \"\"\n 1107  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1108: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1109  msgstr \"\"\n 1110  \"Þú sérð þessi skilaboð vegna þess að þú hefur <code>DEBUG = True</code> í \"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/it/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/it/LC_MESSAGES/django.po:\n 1150  msgid \"\"\n 1151  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1152: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1153  msgstr \"\"\n 1154  \"Stai ricevendo questo messaggio perchè nel tuo file di configurazione di \"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/ja/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/ja/LC_MESSAGES/django.po:\n 1113  msgid \"\"\n 1114  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1115: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1116  msgstr \"\"\n 1117: \"このメッセージは、Djangoのsettingsファイルに <code>DEBUG = True</code> が含ま\"\n 1118  \"れ、まだURLが何も設定されていないため表示されています。さあ、仕事に取り掛かり\"\n 1119  \"ましょう！\"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/ka/LC_MESSAGES/django.po:\n 1091  msgid \"\"\n 1092  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1093: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1094  msgstr \"\"\n 1095  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/kk/LC_MESSAGES/django.po:\n 1075  msgid \"\"\n 1076  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1077: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1078  msgstr \"\"\n 1079  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/km/LC_MESSAGES/django.po:\n 1063  msgid \"\"\n 1064  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1065: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1066  msgstr \"\"\n 1067  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/kn/LC_MESSAGES/django.po:\n 1084  msgid \"\"\n 1085  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1086: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1087  msgstr \"\"\n 1088  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/ko/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/ko/LC_MESSAGES/django.po:\n 1112  msgid \"\"\n 1113  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1114: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1115  msgstr \"\"\n 1116  \"이 메세지가 보이는 이유는 당신의 Django 설정 파일에 <code>DEBUG = True</code>\"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/lb/LC_MESSAGES/django.po:\n 1080  msgid \"\"\n 1081  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1082: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1083  msgstr \"\"\n 1084  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/lt/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/lt/LC_MESSAGES/django.po:\n 1166  msgid \"\"\n 1167  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1168: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1169  msgstr \"\"\n 1170  \"Jūs matote šią žinutę dėl to kad Django nustatymų faile įvesta <code>DEBUG = \"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/lv/LC_MESSAGES/django.po:\n 1110  msgid \"\"\n 1111  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1112: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1113  msgstr \"\"\n 1114  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/mk/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/mk/LC_MESSAGES/django.po:\n 1150  msgid \"\"\n 1151  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1152: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1153  msgstr \"\"\n 1154  \"Ја гледате оваа порака биејќи имате <code>DEBUG = True</code> во датотеката \"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/ml/LC_MESSAGES/django.po:\n 1100  msgid \"\"\n 1101  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1102: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1103  msgstr \"\"\n 1104  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/mn/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/mn/LC_MESSAGES/django.po:\n 1137  msgid \"\"\n 1138  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1139: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1140  msgstr \"\"\n 1141  \"Та Джангогийнхоо тохиргооны файлд <code>DEBUG = True</code> гэсэн ба ямарч  \"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/mr/LC_MESSAGES/django.po:\n 1079  msgid \"\"\n 1080  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1081: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1082  msgstr \"\"\n 1083  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/my/LC_MESSAGES/django.po:\n 1064  msgid \"\"\n 1065  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1066: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1067  msgstr \"\"\n 1068  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/nb/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/nb/LC_MESSAGES/django.po:\n 1135  msgid \"\"\n 1136  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1137: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1138  msgstr \"\"\n 1139  \"Du ser denne meldingen fordi du har <code>DEBUG = True</code> i din Django-\"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/ne/LC_MESSAGES/django.po:\n 1100  msgid \"\"\n 1101  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1102: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1103  msgstr \"\"\n 1104  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/nl/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/nl/LC_MESSAGES/django.po:\n 1149  msgid \"\"\n 1150  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1151: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1152  msgstr \"\"\n 1153: \"U ziet dit bericht omdat u <code>DEBUG = True</code> in uw Django settings \"\n 1154  \"bestand heeft staan en u nog geen URLs geconfigureerd heeft. Aan het werk!\"\n 1155  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/nn/LC_MESSAGES/django.po:\n 1093  msgid \"\"\n 1094  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1095: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1096  msgstr \"\"\n 1097  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/os/LC_MESSAGES/django.po:\n 1104  msgid \"\"\n 1105  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1106: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1107  msgstr \"\"\n 1108  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/pa/LC_MESSAGES/django.po:\n 1080  msgid \"\"\n 1081  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1082: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1083  msgstr \"\"\n 1084  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/pl/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/pl/LC_MESSAGES/django.po:\n 1180  msgid \"\"\n 1181  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1182: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1183  msgstr \"\"\n 1184  \"Widzisz ten komunikat, gdyż w ustawieniach Django masz ustawiony parametr \"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/pt/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/pt/LC_MESSAGES/django.po:\n 1144  msgid \"\"\n 1145  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1146: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1147  msgstr \"\"\n 1148  \"Estás a ver esta mensagem porque tens  <code>DEBUG = True</code> no ficheiro \"\n 1149: \"settings do Django e ainda não configuraste nenhum URL. Toca a trabalhar!\"\n 1150  \n 1151  msgid \"No year specified\"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/pt_BR/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/pt_BR/LC_MESSAGES/django.po:\n 1153  msgid \"\"\n 1154  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1155: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1156  msgstr \"\"\n 1157  \"Você está vendo esta mensagem, porque você tem <code>DEBUG = True</code> no \"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/ro/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/ro/LC_MESSAGES/django.po:\n 1169  msgid \"\"\n 1170  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1171: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1172  msgstr \"\"\n 1173  \"Vedeți acest mesaj deoarece ați setat <code>DEBUG = True</code> în fișierul \"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/ru/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/ru/LC_MESSAGES/django.po:\n 1204  msgid \"\"\n 1205  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1206: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1207  msgstr \"\"\n 1208  \"Вы видите это сообщение, потому что в файле ваших настроек Django есть \"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/sk/LC_MESSAGES/django.po:\n 1129  msgid \"\"\n 1130  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1131: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1132  msgstr \"\"\n 1133  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/sl/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/sl/LC_MESSAGES/django.po:\n 1184  msgid \"\"\n 1185  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1186: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1187  msgstr \"\"\n 1188  \"To sporočilo vidite, ker imate v vaših Django nastavitvah nastavljeno \"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/sq/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/sq/LC_MESSAGES/django.po:\n 1146  msgid \"\"\n 1147  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1148: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1149  msgstr \"\"\n 1150  \"Po e shihni këtë mesazh ngaqë keni caktuar <code>DEBUG = True</code> te \"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/sr/LC_MESSAGES/django.po:\n 1106  msgid \"\"\n 1107  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1108: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1109  msgstr \"\"\n 1110  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/sr_Latn/LC_MESSAGES/django.po:\n 1106  msgid \"\"\n 1107  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1108: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1109  msgstr \"\"\n 1110  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/sv/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/sv/LC_MESSAGES/django.po:\n 1150  msgid \"\"\n 1151  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1152: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1153  msgstr \"\"\n 1154  \"Du ser detta meddelande eftersom du har <code>DEBUG = True</code> i din \"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/sw/LC_MESSAGES/django.po:\n 1088  msgid \"\"\n 1089  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1090: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1091  msgstr \"\"\n 1092  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/ta/LC_MESSAGES/django.po:\n 1080  msgid \"\"\n 1081  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1082: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1083  msgstr \"\"\n 1084  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/te/LC_MESSAGES/django.po:\n 1083  msgid \"\"\n 1084  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1085: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1086  msgstr \"\"\n 1087  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/th/LC_MESSAGES/django.po:\n 1074  msgid \"\"\n 1075  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1076: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1077  msgstr \"\"\n 1078  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/tr/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/tr/LC_MESSAGES/django.po:\n 1151  msgid \"\"\n 1152  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1153: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1154  msgstr \"\"\n 1155  \"Bu iletiyi görüyorsunuz çünkü Django ayarları dosyanızda <code>DEBUG = True</\"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/tt/LC_MESSAGES/django.po:\n 1078  msgid \"\"\n 1079  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1080: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1081  msgstr \"\"\n 1082  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/udm/LC_MESSAGES/django.po:\n 1067  msgid \"\"\n 1068  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1069: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1070  msgstr \"\"\n 1071  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/uk/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/uk/LC_MESSAGES/django.po:\n 1179  msgid \"\"\n 1180  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1181: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1182  msgstr \"\"\n 1183  \"Ви бачите це повідомлення тому, що у Вас <code>DEBUG = True</code> у вашому \"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/ur/LC_MESSAGES/django.po:\n 1089  msgid \"\"\n 1090  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1091: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1092  msgstr \"\"\n 1093  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/vi/LC_MESSAGES/django.po:\n 1087  msgid \"\"\n 1088  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1089: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1090  msgstr \"\"\n 1091  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/zh_Hans/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/zh_Hans/LC_MESSAGES/django.po:\n 1100  msgid \"\"\n 1101  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1102: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1103  msgstr \"\"\n 1104  \"您看到此消息是由于Django的配置文件设置了 <code>DEBUG = True</code>，您还没有\"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/zh_Hant/LC_MESSAGES/django.mo:\n    <binary>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/locale/zh_Hant/LC_MESSAGES/django.po:\n 1090  msgid \"\"\n 1091  \"You're seeing this message because you have <code>DEBUG = True</code> in \"\n 1092: \"your Django settings file and you haven't configured any URLs. Get to work!\"\n 1093  msgstr \"\"\n 1094  \"你看到這個訊息，是因為你在 Django 設定檔中包含 <code>DEBUG = True</code>，且\"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/project_template/manage.py-tpl:\n    4  \n    5  if __name__ == \"__main__\":\n    6:     os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"{{ project_name }}.settings\")\n    7      try:\n    8          from django.core.management import execute_from_command_line\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/project_template/project_name/settings.py-tpl:\n    1  \"\"\"\n    2: Django settings for {{ project_name }} project.\n    3  \n    4  Generated by 'django-admin startproject' using Django {{ django_version }}.\n    5  \n    6  For more information on this file, see\n    7: https://docs.djangoproject.com/en/{{ docs_version }}/topics/settings/\n    8  \n    9: For the full list of settings and their values, see\n   10: https://docs.djangoproject.com/en/{{ docs_version }}/ref/settings/\n   11  \"\"\"\n   12  \n   ..\n   17  \n   18  \n   19: # Quick-start development settings - unsuitable for production\n   20  # See https://docs.djangoproject.com/en/{{ docs_version }}/howto/deployment/checklist/\n   21  \n   ..\n   72  \n   73  # Database\n   74: # https://docs.djangoproject.com/en/{{ docs_version }}/ref/settings/#databases\n   75  \n   76  DATABASES = {\n   ..\n   83  \n   84  # Password validation\n   85: # https://docs.djangoproject.com/en/{{ docs_version }}/ref/settings/#auth-password-validators\n   86  \n   87  AUTH_PASSWORD_VALIDATORS = [\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/project_template/project_name/wsgi.py-tpl:\n   12  from django.core.wsgi import get_wsgi_application\n   13  \n   14: os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"{{ project_name }}.settings\")\n   15  \n   16  application = get_wsgi_application()\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/urls/i18n.py:\n    1: from django.conf import settings\n    2  from django.conf.urls import url\n    3  from django.urls import LocaleRegexURLResolver, get_resolver\n    .\n   12      URLconf.\n   13      \"\"\"\n   14:     if not settings.USE_I18N:\n   15          return list(urls)\n   16      prefix_default_language = kwargs.pop('prefix_default_language', True)\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/conf/urls/static.py:\n    1  import re\n    2  \n    3: from django.conf import settings\n    4  from django.conf.urls import url\n    5  from django.core.exceptions import ImproperlyConfigured\n    .\n   11      Helper function to return a URL pattern for serving files in debug mode.\n   12  \n   13:     from django.conf import settings\n   14      from django.conf.urls.static import static\n   15  \n   16      urlpatterns = [\n   17          # ... the rest of your URLconf goes here ...\n   18:     ] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n   19      \"\"\"\n   20      # No-op if not in debug mode or an non-local prefix\n   21:     if not settings.DEBUG or (prefix and '://' in prefix):\n   22          return []\n   23      elif not prefix:\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/admin/checks.py:\n    5  \n    6  from django.apps import apps\n    7: from django.conf import settings\n    8  from django.contrib.admin.utils import (\n    9      NotRelationField, flatten, get_fields_from_path,\n   ..\n   53          if ('django.contrib.auth.context_processors.auth'\n   54                  not in default_template_engine.context_processors and\n   55:                 'django.contrib.auth.backends.ModelBackend' in settings.AUTHENTICATION_BACKENDS):\n   56              missing_template = checks.Error(\n   57                  \"'django.contrib.auth.context_processors.auth' must be in \"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/admin/helpers.py:\n    5  \n    6  from django import forms\n    7: from django.conf import settings\n    8  from django.contrib.admin.utils import (\n    9      display_for_field, flatten_fieldsets, help_text_for_field, label_for_field,\n   ..\n   77      def _media(self):\n   78          if 'collapse' in self.classes:\n   79:             extra = '' if settings.DEBUG else '.min'\n   80              js = [\n   81                  'vendor/jquery/jquery%s.js' % extra,\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/admin/models.py:\n    3  import json\n    4  \n    5: from django.conf import settings\n    6  from django.contrib.admin.utils import quote\n    7  from django.contrib.contenttypes.models import ContentType\n    .\n   42      )\n   43      user = models.ForeignKey(\n   44:         settings.AUTH_USER_MODEL,\n   45          models.CASCADE,\n   46          verbose_name=_('user'),\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/admin/options.py:\n    8  \n    9  from django import forms\n   10: from django.conf import settings\n   11  from django.contrib import messages\n   12  from django.contrib.admin import helpers, widgets\n   ..\n  567      @property\n  568      def media(self):\n  569:         extra = '' if settings.DEBUG else '.min'\n  570          js = [\n  571              'core.js',\n  ...\n 1853      @property\n 1854      def media(self):\n 1855:         extra = '' if settings.DEBUG else '.min'\n 1856          js = ['vendor/jquery/jquery%s.js' % extra, 'jquery.init.js',\n 1857                'inlines%s.js' % extra]\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/admin/sites.py:\n    2  \n    3  from django.apps import apps\n    4: from django.conf import settings\n    5  from django.contrib.admin import ModelAdmin, actions\n    6  from django.contrib.auth import REDIRECT_FIELD_NAME\n    .\n  107                  # Instantiate the admin class to save in the registry\n  108                  admin_obj = admin_class(model, self)\n  109:                 if admin_class is not ModelAdmin and settings.DEBUG:\n  110                      system_check_errors.extend(admin_obj.check())\n  111  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/admin/tests.py:\n    1  from django.contrib.staticfiles.testing import StaticLiveServerTestCase\n    2: from django.test import modify_settings\n    3  from django.test.selenium import SeleniumTestCase\n    4  from django.utils.deprecation import MiddlewareMixin\n    .\n   13  \n   14  \n   15: @modify_settings(MIDDLEWARE={'append': 'django.contrib.admin.tests.CSPMiddleware'})\n   16  class AdminSeleniumTestCase(SeleniumTestCase, StaticLiveServerTestCase):\n   17  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/admin/migrations/0001_initial.py:\n    3  \n    4  import django.contrib.admin.models\n    5: from django.conf import settings\n    6  from django.db import migrations, models\n    7  \n    .\n   10  \n   11      dependencies = [\n   12:         migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n   13          ('contenttypes', '__first__'),\n   14      ]\n   ..\n   32                  )),\n   33                  ('user', models.ForeignKey(\n   34:                     to=settings.AUTH_USER_MODEL,\n   35                      on_delete=models.CASCADE,\n   36                      verbose_name='user',\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/admin/static/admin/js/vendor/jquery/jquery.js:\n 8116  function ajaxExtend( target, src ) {\n 8117  \tvar key, deep,\n 8118: \t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n 8119  \n 8120  \tfor ( key in src ) {\n ....\n 8297  \tetag: {},\n 8298  \n 8299: \tajaxSettings: {\n 8300  \t\turl: location.href,\n 8301  \t\ttype: \"GET\",\n ....\n 8364  \t},\n 8365  \n 8366: \t// Creates a full fledged settings object into target\n 8367: \t// with both ajaxSettings and settings fields.\n 8368: \t// If target is omitted, writes into ajaxSettings.\n 8369: \tajaxSetup: function( target, settings ) {\n 8370: \t\treturn settings ?\n 8371  \n 8372: \t\t\t// Building a settings object\n 8373: \t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n 8374  \n 8375: \t\t\t// Extending ajaxSettings\n 8376: \t\t\tajaxExtend( jQuery.ajaxSettings, target );\n 8377  \t},\n 8378  \n ....\n 8521  \t\t// Remove hash character (#7531: and string promotion)\n 8522  \t\t// Add protocol if not provided (prefilters might expect it)\n 8523: \t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\n 8524  \t\t// We also use the url parameter if available\n 8525  \t\ts.url = ( ( url || s.url || location.href ) + \"\" ).replace( rhash, \"\" )\n ....\n 9002  \t// Set traditional to true for jQuery <= 1.3.2 behavior.\n 9003  \tif ( traditional === undefined ) {\n 9004: \t\ttraditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;\n 9005  \t}\n 9006  \n ....\n 9060  \n 9061  \n 9062: jQuery.ajaxSettings.xhr = function() {\n 9063  \ttry {\n 9064  \t\treturn new window.XMLHttpRequest();\n ....\n 9075  \t\t1223: 204\n 9076  \t},\n 9077: \txhrSupported = jQuery.ajaxSettings.xhr();\n 9078  \n 9079  support.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\n ....\n 9290  \trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n 9291  \n 9292: // Default jsonp settings\n 9293  jQuery.ajaxSetup( {\n 9294  \tjsonp: \"callback\",\n ....\n 9301  \n 9302  // Detect, normalize options and install callbacks for jsonp requests\n 9303: jQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n 9304  \n 9305  \tvar callbackName, overwritten, responseContainer,\n ....\n 9360  \n 9361  \t\t\t\t// Make sure that re-using the options doesn't screw things around\n 9362: \t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n 9363  \n 9364  \t\t\t\t// Save the callback name for future use\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/admin/static/admin/js/vendor/jquery/jquery.min.js:\n    2  !function(a,b){\"object\"==typeof module&&\"object\"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error(\"jQuery requires a window with a document\");return b(a)}:b(a)}(\"undefined\"!=typeof window?window:this,function(a,b){var c=[],d=a.document,e=c.slice,f=c.concat,g=c.push,h=c.indexOf,i={},j=i.toString,k=i.hasOwnProperty,l={},m=\"2.2.3\",n=function(a,b){return new n.fn.init(a,b)},o=/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,p=/^-ms-/,q=/-([\\da-z])/gi,r=function(a,b){return b.toUpperCase()};n.fn=n.prototype={jquery:m,constructor:n,selector:\"\",length:0,toArray:function(){return e.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:e.call(this)},pushStack:function(a){var b=n.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a){return n.each(this,a)},map:function(a){return this.pushStack(n.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(e.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor()},push:g,sort:c.sort,splice:c.splice},n.extend=n.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for(\"boolean\"==typeof g&&(j=g,g=arguments[h]||{},h++),\"object\"==typeof g||n.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(a=arguments[h]))for(b in a)c=g[b],d=a[b],g!==d&&(j&&d&&(n.isPlainObject(d)||(e=n.isArray(d)))?(e?(e=!1,f=c&&n.isArray(c)?c:[]):f=c&&n.isPlainObject(c)?c:{},g[b]=n.extend(j,f,d)):void 0!==d&&(g[b]=d));return g},n.extend({expando:\"jQuery\"+(m+Math.random()).replace(/\\D/g,\"\"),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return\"function\"===n.type(a)},isArray:Array.isArray,isWindow:function(a){return null!=a&&a===a.window},isNumeric:function(a){var b=a&&a.toString();return!n.isArray(a)&&b-parseFloat(b)+1>=0},isPlainObject:function(a){var b;if(\"object\"!==n.type(a)||a.nodeType||n.isWindow(a))return!1;if(a.constructor&&!k.call(a,\"constructor\")&&!k.call(a.constructor.prototype||{},\"isPrototypeOf\"))return!1;for(b in a);return void 0===b||k.call(a,b)},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},type:function(a){return null==a?a+\"\":\"object\"==typeof a||\"function\"==typeof a?i[j.call(a)]||\"object\":typeof a},globalEval:function(a){var b,c=eval;a=n.trim(a),a&&(1===a.indexOf(\"use strict\")?(b=d.createElement(\"script\"),b.text=a,d.head.appendChild(b).parentNode.removeChild(b)):c(a))},camelCase:function(a){return a.replace(p,\"ms-\").replace(q,r)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b){var c,d=0;if(s(a)){for(c=a.length;c>d;d++)if(b.call(a[d],d,a[d])===!1)break}else for(d in a)if(b.call(a[d],d,a[d])===!1)break;return a},trim:function(a){return null==a?\"\":(a+\"\").replace(o,\"\")},makeArray:function(a,b){var c=b||[];return null!=a&&(s(Object(a))?n.merge(c,\"string\"==typeof a?[a]:a):g.call(c,a)),c},inArray:function(a,b,c){return null==b?-1:h.call(b,a,c)},merge:function(a,b){for(var c=+b.length,d=0,e=a.length;c>d;d++)a[e++]=b[d];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,e,g=0,h=[];if(s(a))for(d=a.length;d>g;g++)e=b(a[g],g,c),null!=e&&h.push(e);else for(g in a)e=b(a[g],g,c),null!=e&&h.push(e);return f.apply([],h)},guid:1,proxy:function(a,b){var c,d,f;return\"string\"==typeof b&&(c=a[b],b=a,a=c),n.isFunction(a)?(d=e.call(arguments,2),f=function(){return a.apply(b||this,d.concat(e.call(arguments)))},f.guid=a.guid=a.guid||n.guid++,f):void 0},now:Date.now,support:l}),\"function\"==typeof Symbol&&(n.fn[Symbol.iterator]=c[Symbol.iterator]),n.each(\"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\" \"),function(a,b){i[\"[object \"+b+\"]\"]=b.toLowerCase()});function s(a){var b=!!a&&\"length\"in a&&a.length,c=n.type(a);return\"function\"===c||n.isWindow(a)?!1:\"array\"===c||0===b||\"number\"==typeof b&&b>0&&b-1 in a}var t=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u=\"sizzle\"+1*new Date,v=a.document,w=0,x=0,y=ga(),z=ga(),A=ga(),B=function(a,b){return a===b&&(l=!0),0},C=1<<31,D={}.hasOwnProperty,E=[],F=E.pop,G=E.push,H=E.push,I=E.slice,J=function(a,b){for(var c=0,d=a.length;d>c;c++)if(a[c]===b)return c;return-1},K=\"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",L=\"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",M=\"(?:\\\\\\\\.|[\\\\w-]|[^\\\\x00-\\\\xa0])+\",N=\"\\\\[\"+L+\"*(\"+M+\")(?:\"+L+\"*([*^$|!~]?=)\"+L+\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\"+M+\"))|)\"+L+\"*\\\\]\",O=\":(\"+M+\")(?:\\\\((('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\"+N+\")*)|.*)\\\\)|)\",P=new RegExp(L+\"+\",\"g\"),Q=new RegExp(\"^\"+L+\"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\"+L+\"+$\",\"g\"),R=new RegExp(\"^\"+L+\"*,\"+L+\"*\"),S=new RegExp(\"^\"+L+\"*([>+~]|\"+L+\")\"+L+\"*\"),T=new RegExp(\"=\"+L+\"*([^\\\\]'\\\"]*?)\"+L+\"*\\\\]\",\"g\"),U=new RegExp(O),V=new RegExp(\"^\"+M+\"$\"),W={ID:new RegExp(\"^#(\"+M+\")\"),CLASS:new RegExp(\"^\\\\.(\"+M+\")\"),TAG:new RegExp(\"^(\"+M+\"|[*])\"),ATTR:new RegExp(\"^\"+N),PSEUDO:new RegExp(\"^\"+O),CHILD:new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\"+L+\"*(even|odd|(([+-]|)(\\\\d*)n|)\"+L+\"*(?:([+-]|)\"+L+\"*(\\\\d+)|))\"+L+\"*\\\\)|)\",\"i\"),bool:new RegExp(\"^(?:\"+K+\")$\",\"i\"),needsContext:new RegExp(\"^\"+L+\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\"+L+\"*((?:-\\\\d)?\\\\d*)\"+L+\"*\\\\)|)(?=[^-]|$)\",\"i\")},X=/^(?:input|select|textarea|button)$/i,Y=/^h\\d$/i,Z=/^[^{]+\\{\\s*\\[native \\w/,$=/^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,_=/[+~]/,aa=/'|\\\\/g,ba=new RegExp(\"\\\\\\\\([\\\\da-f]{1,6}\"+L+\"?|(\"+L+\")|.)\",\"ig\"),ca=function(a,b,c){var d=\"0x\"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},da=function(){m()};try{H.apply(E=I.call(v.childNodes),v.childNodes),E[v.childNodes.length].nodeType}catch(ea){H={apply:E.length?function(a,b){G.apply(a,I.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function fa(a,b,d,e){var f,h,j,k,l,o,r,s,w=b&&b.ownerDocument,x=b?b.nodeType:9;if(d=d||[],\"string\"!=typeof a||!a||1!==x&&9!==x&&11!==x)return d;if(!e&&((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,p)){if(11!==x&&(o=$.exec(a)))if(f=o[1]){if(9===x){if(!(j=b.getElementById(f)))return d;if(j.id===f)return d.push(j),d}else if(w&&(j=w.getElementById(f))&&t(b,j)&&j.id===f)return d.push(j),d}else{if(o[2])return H.apply(d,b.getElementsByTagName(a)),d;if((f=o[3])&&c.getElementsByClassName&&b.getElementsByClassName)return H.apply(d,b.getElementsByClassName(f)),d}if(c.qsa&&!A[a+\" \"]&&(!q||!q.test(a))){if(1!==x)w=b,s=a;else if(\"object\"!==b.nodeName.toLowerCase()){(k=b.getAttribute(\"id\"))?k=k.replace(aa,\"\\\\$&\"):b.setAttribute(\"id\",k=u),r=g(a),h=r.length,l=V.test(k)?\"#\"+k:\"[id='\"+k+\"']\";while(h--)r[h]=l+\" \"+qa(r[h]);s=r.join(\",\"),w=_.test(a)&&oa(b.parentNode)||b}if(s)try{return H.apply(d,w.querySelectorAll(s)),d}catch(y){}finally{k===u&&b.removeAttribute(\"id\")}}}return i(a.replace(Q,\"$1\"),b,d,e)}function ga(){var a=[];function b(c,e){return a.push(c+\" \")>d.cacheLength&&delete b[a.shift()],b[c+\" \"]=e}return b}function ha(a){return a[u]=!0,a}function ia(a){var b=n.createElement(\"div\");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function ja(a,b){var c=a.split(\"|\"),e=c.length;while(e--)d.attrHandle[c[e]]=b}function ka(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||C)-(~a.sourceIndex||C);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function la(a){return function(b){var c=b.nodeName.toLowerCase();return\"input\"===c&&b.type===a}}function ma(a){return function(b){var c=b.nodeName.toLowerCase();return(\"input\"===c||\"button\"===c)&&b.type===a}}function na(a){return ha(function(b){return b=+b,ha(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function oa(a){return a&&\"undefined\"!=typeof a.getElementsByTagName&&a}c=fa.support={},f=fa.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?\"HTML\"!==b.nodeName:!1},m=fa.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=n.documentElement,p=!f(n),(e=n.defaultView)&&e.top!==e&&(e.addEventListener?e.addEventListener(\"unload\",da,!1):e.attachEvent&&e.attachEvent(\"onunload\",da)),c.attributes=ia(function(a){return a.className=\"i\",!a.getAttribute(\"className\")}),c.getElementsByTagName=ia(function(a){return a.appendChild(n.createComment(\"\")),!a.getElementsByTagName(\"*\").length}),c.getElementsByClassName=Z.test(n.getElementsByClassName),c.getById=ia(function(a){return o.appendChild(a).id=u,!n.getElementsByName||!n.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if(\"undefined\"!=typeof b.getElementById&&p){var c=b.getElementById(a);return c?[c]:[]}},d.filter.ID=function(a){var b=a.replace(ba,ca);return function(a){return a.getAttribute(\"id\")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(ba,ca);return function(a){var c=\"undefined\"!=typeof a.getAttributeNode&&a.getAttributeNode(\"id\");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return\"undefined\"!=typeof b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if(\"*\"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return\"undefined\"!=typeof b.getElementsByClassName&&p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=Z.test(n.querySelectorAll))&&(ia(function(a){o.appendChild(a).innerHTML=\"<a id='\"+u+\"'></a><select id='\"+u+\"-\\r\\\\' msallowcapture=''><option selected=''></option></select>\",a.querySelectorAll(\"[msallowcapture^='']\").length&&q.push(\"[*^$]=\"+L+\"*(?:''|\\\"\\\")\"),a.querySelectorAll(\"[selected]\").length||q.push(\"\\\\[\"+L+\"*(?:value|\"+K+\")\"),a.querySelectorAll(\"[id~=\"+u+\"-]\").length||q.push(\"~=\"),a.querySelectorAll(\":checked\").length||q.push(\":checked\"),a.querySelectorAll(\"a#\"+u+\"+*\").length||q.push(\".#.+[+~]\")}),ia(function(a){var b=n.createElement(\"input\");b.setAttribute(\"type\",\"hidden\"),a.appendChild(b).setAttribute(\"name\",\"D\"),a.querySelectorAll(\"[name=d]\").length&&q.push(\"name\"+L+\"*[*^$|!~]?=\"),a.querySelectorAll(\":enabled\").length||q.push(\":enabled\",\":disabled\"),a.querySelectorAll(\"*,:x\"),q.push(\",.*:\")})),(c.matchesSelector=Z.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ia(function(a){c.disconnectedMatch=s.call(a,\"div\"),s.call(a,\"[s!='']:x\"),r.push(\"!=\",O)}),q=q.length&&new RegExp(q.join(\"|\")),r=r.length&&new RegExp(r.join(\"|\")),b=Z.test(o.compareDocumentPosition),t=b||Z.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===n||a.ownerDocument===v&&t(v,a)?-1:b===n||b.ownerDocument===v&&t(v,b)?1:k?J(k,a)-J(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,g=[a],h=[b];if(!e||!f)return a===n?-1:b===n?1:e?-1:f?1:k?J(k,a)-J(k,b):0;if(e===f)return ka(a,b);c=a;while(c=c.parentNode)g.unshift(c);c=b;while(c=c.parentNode)h.unshift(c);while(g[d]===h[d])d++;return d?ka(g[d],h[d]):g[d]===v?-1:h[d]===v?1:0},n):n},fa.matches=function(a,b){return fa(a,null,null,b)},fa.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(T,\"='$1']\"),c.matchesSelector&&p&&!A[b+\" \"]&&(!r||!r.test(b))&&(!q||!q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return fa(b,n,null,[a]).length>0},fa.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},fa.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&D.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},fa.error=function(a){throw new Error(\"Syntax error, unrecognized expression: \"+a)},fa.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=fa.getText=function(a){var b,c=\"\",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if(\"string\"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=fa.selectors={cacheLength:50,createPseudo:ha,match:W,attrHandle:{},find:{},relative:{\">\":{dir:\"parentNode\",first:!0},\" \":{dir:\"parentNode\"},\"+\":{dir:\"previousSibling\",first:!0},\"~\":{dir:\"previousSibling\"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(ba,ca),a[3]=(a[3]||a[4]||a[5]||\"\").replace(ba,ca),\"~=\"===a[2]&&(a[3]=\" \"+a[3]+\" \"),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),\"nth\"===a[1].slice(0,3)?(a[3]||fa.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*(\"even\"===a[3]||\"odd\"===a[3])),a[5]=+(a[7]+a[8]||\"odd\"===a[3])):a[3]&&fa.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return W.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||\"\":c&&U.test(c)&&(b=g(c,!0))&&(b=c.indexOf(\")\",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(ba,ca).toLowerCase();return\"*\"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+\" \"];return b||(b=new RegExp(\"(^|\"+L+\")\"+a+\"(\"+L+\"|$)\"))&&y(a,function(a){return b.test(\"string\"==typeof a.className&&a.className||\"undefined\"!=typeof a.getAttribute&&a.getAttribute(\"class\")||\"\")})},ATTR:function(a,b,c){return function(d){var e=fa.attr(d,a);return null==e?\"!=\"===b:b?(e+=\"\",\"=\"===b?e===c:\"!=\"===b?e!==c:\"^=\"===b?c&&0===e.indexOf(c):\"*=\"===b?c&&e.indexOf(c)>-1:\"$=\"===b?c&&e.slice(-c.length)===c:\"~=\"===b?(\" \"+e.replace(P,\" \")+\" \").indexOf(c)>-1:\"|=\"===b?e===c||e.slice(0,c.length+1)===c+\"-\":!1):!0}},CHILD:function(a,b,c,d,e){var f=\"nth\"!==a.slice(0,3),g=\"last\"!==a.slice(-4),h=\"of-type\"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?\"nextSibling\":\"previousSibling\",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h,t=!1;if(q){if(f){while(p){m=b;while(m=m[p])if(h?m.nodeName.toLowerCase()===r:1===m.nodeType)return!1;o=p=\"only\"===a&&!o&&\"nextSibling\"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){m=q,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n&&j[2],m=n&&q.childNodes[n];while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if(1===m.nodeType&&++t&&m===b){k[a]=[w,n,t];break}}else if(s&&(m=b,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n),t===!1)while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if((h?m.nodeName.toLowerCase()===r:1===m.nodeType)&&++t&&(s&&(l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),k[a]=[w,t]),m===b))break;return t-=e,t===d||t%d===0&&t/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||fa.error(\"unsupported pseudo: \"+a);return e[u]?e(b):e.length>1?(c=[a,a,\"\",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ha(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=J(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ha(function(a){var b=[],c=[],d=h(a.replace(Q,\"$1\"));return d[u]?ha(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ha(function(a){return function(b){return fa(a,b).length>0}}),contains:ha(function(a){return a=a.replace(ba,ca),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ha(function(a){return V.test(a||\"\")||fa.error(\"unsupported lang: \"+a),a=a.replace(ba,ca).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute(\"xml:lang\")||b.getAttribute(\"lang\"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+\"-\");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return\"input\"===b&&!!a.checked||\"option\"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Y.test(a.nodeName)},input:function(a){return X.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return\"input\"===b&&\"button\"===a.type||\"button\"===b},text:function(a){var b;return\"input\"===a.nodeName.toLowerCase()&&\"text\"===a.type&&(null==(b=a.getAttribute(\"type\"))||\"text\"===b.toLowerCase())},first:na(function(){return[0]}),last:na(function(a,b){return[b-1]}),eq:na(function(a,b,c){return[0>c?c+b:c]}),even:na(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:na(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:na(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:na(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=la(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=ma(b);function pa(){}pa.prototype=d.filters=d.pseudos,d.setFilters=new pa,g=fa.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+\" \"];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){c&&!(e=R.exec(h))||(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=S.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(Q,\" \")}),h=h.slice(c.length));for(g in d.filter)!(e=W[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?fa.error(a):z(a,i).slice(0)};function qa(a){for(var b=0,c=a.length,d=\"\";c>b;b++)d+=a[b].value;return d}function ra(a,b,c){var d=b.dir,e=c&&\"parentNode\"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j,k=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(j=b[u]||(b[u]={}),i=j[b.uniqueID]||(j[b.uniqueID]={}),(h=i[d])&&h[0]===w&&h[1]===f)return k[2]=h[2];if(i[d]=k,k[2]=a(b,c,g))return!0}}}function sa(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function ta(a,b,c){for(var d=0,e=b.length;e>d;d++)fa(a,b[d],c);return c}function ua(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(c&&!c(f,d,e)||(g.push(f),j&&b.push(h)));return g}function va(a,b,c,d,e,f){return d&&!d[u]&&(d=va(d)),e&&!e[u]&&(e=va(e,f)),ha(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||ta(b||\"*\",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:ua(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=ua(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?J(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=ua(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):H.apply(g,r)})}function wa(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[\" \"],i=g?1:0,k=ra(function(a){return a===b},h,!0),l=ra(function(a){return J(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];f>i;i++)if(c=d.relative[a[i].type])m=[ra(sa(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return va(i>1&&sa(m),i>1&&qa(a.slice(0,i-1).concat({value:\" \"===a[i-2].type?\"*\":\"\"})).replace(Q,\"$1\"),c,e>i&&wa(a.slice(i,e)),f>e&&wa(a=a.slice(e)),f>e&&qa(a))}m.push(c)}return sa(m)}function xa(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,o,q,r=0,s=\"0\",t=f&&[],u=[],v=j,x=f||e&&d.find.TAG(\"*\",k),y=w+=null==v?1:Math.random()||.1,z=x.length;for(k&&(j=g===n||g||k);s!==z&&null!=(l=x[s]);s++){if(e&&l){o=0,g||l.ownerDocument===n||(m(l),h=!p);while(q=a[o++])if(q(l,g||n,h)){i.push(l);break}k&&(w=y)}c&&((l=!q&&l)&&r--,f&&t.push(l))}if(r+=s,c&&s!==r){o=0;while(q=b[o++])q(t,u,g,h);if(f){if(r>0)while(s--)t[s]||u[s]||(u[s]=F.call(i));u=ua(u)}H.apply(i,u),k&&!f&&u.length>0&&r+b.length>1&&fa.uniqueSort(i)}return k&&(w=y,j=v),t};return c?ha(f):f}return h=fa.compile=function(a,b){var c,d=[],e=[],f=A[a+\" \"];if(!f){b||(b=g(a)),c=b.length;while(c--)f=wa(b[c]),f[u]?d.push(f):e.push(f);f=A(a,xa(e,d)),f.selector=a}return f},i=fa.select=function(a,b,e,f){var i,j,k,l,m,n=\"function\"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&\"ID\"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(ba,ca),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=W.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(ba,ca),_.test(j[0].type)&&oa(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&qa(j),!a)return H.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,!b||_.test(a)&&oa(b.parentNode)||b),e},c.sortStable=u.split(\"\").sort(B).join(\"\")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ia(function(a){return 1&a.compareDocumentPosition(n.createElement(\"div\"))}),ia(function(a){return a.innerHTML=\"<a href='#'></a>\",\"#\"===a.firstChild.getAttribute(\"href\")})||ja(\"type|href|height|width\",function(a,b,c){return c?void 0:a.getAttribute(b,\"type\"===b.toLowerCase()?1:2)}),c.attributes&&ia(function(a){return a.innerHTML=\"<input/>\",a.firstChild.setAttribute(\"value\",\"\"),\"\"===a.firstChild.getAttribute(\"value\")})||ja(\"value\",function(a,b,c){return c||\"input\"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ia(function(a){return null==a.getAttribute(\"disabled\")})||ja(K,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),fa}(a);n.find=t,n.expr=t.selectors,n.expr[\":\"]=n.expr.pseudos,n.uniqueSort=n.unique=t.uniqueSort,n.text=t.getText,n.isXMLDoc=t.isXML,n.contains=t.contains;var u=function(a,b,c){var d=[],e=void 0!==c;while((a=a[b])&&9!==a.nodeType)if(1===a.nodeType){if(e&&n(a).is(c))break;d.push(a)}return d},v=function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c},w=n.expr.match.needsContext,x=/^<([\\w-]+)\\s*\\/?>(?:<\\/\\1>|)$/,y=/^.[^:#\\[\\.,]*$/;function z(a,b,c){if(n.isFunction(b))return n.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return n.grep(a,function(a){return a===b!==c});if(\"string\"==typeof b){if(y.test(b))return n.filter(b,a,c);b=n.filter(b,a)}return n.grep(a,function(a){return h.call(b,a)>-1!==c})}n.filter=function(a,b,c){var d=b[0];return c&&(a=\":not(\"+a+\")\"),1===b.length&&1===d.nodeType?n.find.matchesSelector(d,a)?[d]:[]:n.find.matches(a,n.grep(b,function(a){return 1===a.nodeType}))},n.fn.extend({find:function(a){var b,c=this.length,d=[],e=this;if(\"string\"!=typeof a)return this.pushStack(n(a).filter(function(){for(b=0;c>b;b++)if(n.contains(e[b],this))return!0}));for(b=0;c>b;b++)n.find(a,e[b],d);return d=this.pushStack(c>1?n.unique(d):d),d.selector=this.selector?this.selector+\" \"+a:a,d},filter:function(a){return this.pushStack(z(this,a||[],!1))},not:function(a){return this.pushStack(z(this,a||[],!0))},is:function(a){return!!z(this,\"string\"==typeof a&&w.test(a)?n(a):a||[],!1).length}});var A,B=/^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/,C=n.fn.init=function(a,b,c){var e,f;if(!a)return this;if(c=c||A,\"string\"==typeof a){if(e=\"<\"===a[0]&&\">\"===a[a.length-1]&&a.length>=3?[null,a,null]:B.exec(a),!e||!e[1]&&b)return!b||b.jquery?(b||c).find(a):this.constructor(b).find(a);if(e[1]){if(b=b instanceof n?b[0]:b,n.merge(this,n.parseHTML(e[1],b&&b.nodeType?b.ownerDocument||b:d,!0)),x.test(e[1])&&n.isPlainObject(b))for(e in b)n.isFunction(this[e])?this[e](b[e]):this.attr(e,b[e]);return this}return f=d.getElementById(e[2]),f&&f.parentNode&&(this.length=1,this[0]=f),this.context=d,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):n.isFunction(a)?void 0!==c.ready?c.ready(a):a(n):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),n.makeArray(a,this))};C.prototype=n.fn,A=n(d);var D=/^(?:parents|prev(?:Until|All))/,E={children:!0,contents:!0,next:!0,prev:!0};n.fn.extend({has:function(a){var b=n(a,this),c=b.length;return this.filter(function(){for(var a=0;c>a;a++)if(n.contains(this,b[a]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=w.test(a)||\"string\"!=typeof a?n(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&n.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?n.uniqueSort(f):f)},index:function(a){return a?\"string\"==typeof a?h.call(n(a),this[0]):h.call(this,a.jquery?a[0]:a):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(n.uniqueSort(n.merge(this.get(),n(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function F(a,b){while((a=a[b])&&1!==a.nodeType);return a}n.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return u(a,\"parentNode\")},parentsUntil:function(a,b,c){return u(a,\"parentNode\",c)},next:function(a){return F(a,\"nextSibling\")},prev:function(a){return F(a,\"previousSibling\")},nextAll:function(a){return u(a,\"nextSibling\")},prevAll:function(a){return u(a,\"previousSibling\")},nextUntil:function(a,b,c){return u(a,\"nextSibling\",c)},prevUntil:function(a,b,c){return u(a,\"previousSibling\",c)},siblings:function(a){return v((a.parentNode||{}).firstChild,a)},children:function(a){return v(a.firstChild)},contents:function(a){return a.contentDocument||n.merge([],a.childNodes)}},function(a,b){n.fn[a]=function(c,d){var e=n.map(this,b,c);return\"Until\"!==a.slice(-5)&&(d=c),d&&\"string\"==typeof d&&(e=n.filter(d,e)),this.length>1&&(E[a]||n.uniqueSort(e),D.test(a)&&e.reverse()),this.pushStack(e)}});var G=/\\S+/g;function H(a){var b={};return n.each(a.match(G)||[],function(a,c){b[c]=!0}),b}n.Callbacks=function(a){a=\"string\"==typeof a?H(a):n.extend({},a);var b,c,d,e,f=[],g=[],h=-1,i=function(){for(e=a.once,d=b=!0;g.length;h=-1){c=g.shift();while(++h<f.length)f[h].apply(c[0],c[1])===!1&&a.stopOnFalse&&(h=f.length,c=!1)}a.memory||(c=!1),b=!1,e&&(f=c?[]:\"\")},j={add:function(){return f&&(c&&!b&&(h=f.length-1,g.push(c)),function d(b){n.each(b,function(b,c){n.isFunction(c)?a.unique&&j.has(c)||f.push(c):c&&c.length&&\"string\"!==n.type(c)&&d(c)})}(arguments),c&&!b&&i()),this},remove:function(){return n.each(arguments,function(a,b){var c;while((c=n.inArray(b,f,c))>-1)f.splice(c,1),h>=c&&h--}),this},has:function(a){return a?n.inArray(a,f)>-1:f.length>0},empty:function(){return f&&(f=[]),this},disable:function(){return e=g=[],f=c=\"\",this},disabled:function(){return!f},lock:function(){return e=g=[],c||(f=c=\"\"),this},locked:function(){return!!e},fireWith:function(a,c){return e||(c=c||[],c=[a,c.slice?c.slice():c],g.push(c),b||i()),this},fire:function(){return j.fireWith(this,arguments),this},fired:function(){return!!d}};return j},n.extend({Deferred:function(a){var b=[[\"resolve\",\"done\",n.Callbacks(\"once memory\"),\"resolved\"],[\"reject\",\"fail\",n.Callbacks(\"once memory\"),\"rejected\"],[\"notify\",\"progress\",n.Callbacks(\"memory\")]],c=\"pending\",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return n.Deferred(function(c){n.each(b,function(b,f){var g=n.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&n.isFunction(a.promise)?a.promise().progress(c.notify).done(c.resolve).fail(c.reject):c[f[0]+\"With\"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?n.extend(a,d):d}},e={};return d.pipe=d.then,n.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+\"With\"](this===e?d:this,arguments),this},e[f[0]+\"With\"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=e.call(arguments),d=c.length,f=1!==d||a&&n.isFunction(a.promise)?d:0,g=1===f?a:n.Deferred(),h=function(a,b,c){return function(d){b[a]=this,c[a]=arguments.length>1?e.call(arguments):d,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(d>1)for(i=new Array(d),j=new Array(d),k=new Array(d);d>b;b++)c[b]&&n.isFunction(c[b].promise)?c[b].promise().progress(h(b,j,i)).done(h(b,k,c)).fail(g.reject):--f;return f||g.resolveWith(k,c),g.promise()}});var I;n.fn.ready=function(a){return n.ready.promise().done(a),this},n.extend({isReady:!1,readyWait:1,holdReady:function(a){a?n.readyWait++:n.ready(!0)},ready:function(a){(a===!0?--n.readyWait:n.isReady)||(n.isReady=!0,a!==!0&&--n.readyWait>0||(I.resolveWith(d,[n]),n.fn.triggerHandler&&(n(d).triggerHandler(\"ready\"),n(d).off(\"ready\"))))}});function J(){d.removeEventListener(\"DOMContentLoaded\",J),a.removeEventListener(\"load\",J),n.ready()}n.ready.promise=function(b){return I||(I=n.Deferred(),\"complete\"===d.readyState||\"loading\"!==d.readyState&&!d.documentElement.doScroll?a.setTimeout(n.ready):(d.addEventListener(\"DOMContentLoaded\",J),a.addEventListener(\"load\",J))),I.promise(b)},n.ready.promise();var K=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if(\"object\"===n.type(c)){e=!0;for(h in c)K(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,n.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(n(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f},L=function(a){return 1===a.nodeType||9===a.nodeType||!+a.nodeType};function M(){this.expando=n.expando+M.uid++}M.uid=1,M.prototype={register:function(a,b){var c=b||{};return a.nodeType?a[this.expando]=c:Object.defineProperty(a,this.expando,{value:c,writable:!0,configurable:!0}),a[this.expando]},cache:function(a){if(!L(a))return{};var b=a[this.expando];return b||(b={},L(a)&&(a.nodeType?a[this.expando]=b:Object.defineProperty(a,this.expando,{value:b,configurable:!0}))),b},set:function(a,b,c){var d,e=this.cache(a);if(\"string\"==typeof b)e[b]=c;else for(d in b)e[d]=b[d];return e},get:function(a,b){return void 0===b?this.cache(a):a[this.expando]&&a[this.expando][b]},access:function(a,b,c){var d;return void 0===b||b&&\"string\"==typeof b&&void 0===c?(d=this.get(a,b),void 0!==d?d:this.get(a,n.camelCase(b))):(this.set(a,b,c),void 0!==c?c:b)},remove:function(a,b){var c,d,e,f=a[this.expando];if(void 0!==f){if(void 0===b)this.register(a);else{n.isArray(b)?d=b.concat(b.map(n.camelCase)):(e=n.camelCase(b),b in f?d=[b,e]:(d=e,d=d in f?[d]:d.match(G)||[])),c=d.length;while(c--)delete f[d[c]]}(void 0===b||n.isEmptyObject(f))&&(a.nodeType?a[this.expando]=void 0:delete a[this.expando])}},hasData:function(a){var b=a[this.expando];return void 0!==b&&!n.isEmptyObject(b)}};var N=new M,O=new M,P=/^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,Q=/[A-Z]/g;function R(a,b,c){var d;if(void 0===c&&1===a.nodeType)if(d=\"data-\"+b.replace(Q,\"-$&\").toLowerCase(),c=a.getAttribute(d),\"string\"==typeof c){try{c=\"true\"===c?!0:\"false\"===c?!1:\"null\"===c?null:+c+\"\"===c?+c:P.test(c)?n.parseJSON(c):c;\n    3  }catch(e){}O.set(a,b,c)}else c=void 0;return c}n.extend({hasData:function(a){return O.hasData(a)||N.hasData(a)},data:function(a,b,c){return O.access(a,b,c)},removeData:function(a,b){O.remove(a,b)},_data:function(a,b,c){return N.access(a,b,c)},_removeData:function(a,b){N.remove(a,b)}}),n.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=O.get(f),1===f.nodeType&&!N.get(f,\"hasDataAttrs\"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf(\"data-\")&&(d=n.camelCase(d.slice(5)),R(f,d,e[d])));N.set(f,\"hasDataAttrs\",!0)}return e}return\"object\"==typeof a?this.each(function(){O.set(this,a)}):K(this,function(b){var c,d;if(f&&void 0===b){if(c=O.get(f,a)||O.get(f,a.replace(Q,\"-$&\").toLowerCase()),void 0!==c)return c;if(d=n.camelCase(a),c=O.get(f,d),void 0!==c)return c;if(c=R(f,d,void 0),void 0!==c)return c}else d=n.camelCase(a),this.each(function(){var c=O.get(this,d);O.set(this,d,b),a.indexOf(\"-\")>-1&&void 0!==c&&O.set(this,a,b)})},null,b,arguments.length>1,null,!0)},removeData:function(a){return this.each(function(){O.remove(this,a)})}}),n.extend({queue:function(a,b,c){var d;return a?(b=(b||\"fx\")+\"queue\",d=N.get(a,b),c&&(!d||n.isArray(c)?d=N.access(a,b,n.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||\"fx\";var c=n.queue(a,b),d=c.length,e=c.shift(),f=n._queueHooks(a,b),g=function(){n.dequeue(a,b)};\"inprogress\"===e&&(e=c.shift(),d--),e&&(\"fx\"===b&&c.unshift(\"inprogress\"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+\"queueHooks\";return N.get(a,c)||N.access(a,c,{empty:n.Callbacks(\"once memory\").add(function(){N.remove(a,[b+\"queue\",c])})})}}),n.fn.extend({queue:function(a,b){var c=2;return\"string\"!=typeof a&&(b=a,a=\"fx\",c--),arguments.length<c?n.queue(this[0],a):void 0===b?this:this.each(function(){var c=n.queue(this,a,b);n._queueHooks(this,a),\"fx\"===a&&\"inprogress\"!==c[0]&&n.dequeue(this,a)})},dequeue:function(a){return this.each(function(){n.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||\"fx\",[])},promise:function(a,b){var c,d=1,e=n.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};\"string\"!=typeof a&&(b=a,a=void 0),a=a||\"fx\";while(g--)c=N.get(f[g],a+\"queueHooks\"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var S=/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,T=new RegExp(\"^(?:([+-])=|)(\"+S+\")([a-z%]*)$\",\"i\"),U=[\"Top\",\"Right\",\"Bottom\",\"Left\"],V=function(a,b){return a=b||a,\"none\"===n.css(a,\"display\")||!n.contains(a.ownerDocument,a)};function W(a,b,c,d){var e,f=1,g=20,h=d?function(){return d.cur()}:function(){return n.css(a,b,\"\")},i=h(),j=c&&c[3]||(n.cssNumber[b]?\"\":\"px\"),k=(n.cssNumber[b]||\"px\"!==j&&+i)&&T.exec(n.css(a,b));if(k&&k[3]!==j){j=j||k[3],c=c||[],k=+i||1;do f=f||\".5\",k/=f,n.style(a,b,k+j);while(f!==(f=h()/i)&&1!==f&&--g)}return c&&(k=+k||+i||0,e=c[1]?k+(c[1]+1)*c[2]:+c[2],d&&(d.unit=j,d.start=k,d.end=e)),e}var X=/^(?:checkbox|radio)$/i,Y=/<([\\w:-]+)/,Z=/^$|\\/(?:java|ecma)script/i,$={option:[1,\"<select multiple='multiple'>\",\"</select>\"],thead:[1,\"<table>\",\"</table>\"],col:[2,\"<table><colgroup>\",\"</colgroup></table>\"],tr:[2,\"<table><tbody>\",\"</tbody></table>\"],td:[3,\"<table><tbody><tr>\",\"</tr></tbody></table>\"],_default:[0,\"\",\"\"]};$.optgroup=$.option,$.tbody=$.tfoot=$.colgroup=$.caption=$.thead,$.th=$.td;function _(a,b){var c=\"undefined\"!=typeof a.getElementsByTagName?a.getElementsByTagName(b||\"*\"):\"undefined\"!=typeof a.querySelectorAll?a.querySelectorAll(b||\"*\"):[];return void 0===b||b&&n.nodeName(a,b)?n.merge([a],c):c}function aa(a,b){for(var c=0,d=a.length;d>c;c++)N.set(a[c],\"globalEval\",!b||N.get(b[c],\"globalEval\"))}var ba=/<|&#?\\w+;/;function ca(a,b,c,d,e){for(var f,g,h,i,j,k,l=b.createDocumentFragment(),m=[],o=0,p=a.length;p>o;o++)if(f=a[o],f||0===f)if(\"object\"===n.type(f))n.merge(m,f.nodeType?[f]:f);else if(ba.test(f)){g=g||l.appendChild(b.createElement(\"div\")),h=(Y.exec(f)||[\"\",\"\"])[1].toLowerCase(),i=$[h]||$._default,g.innerHTML=i[1]+n.htmlPrefilter(f)+i[2],k=i[0];while(k--)g=g.lastChild;n.merge(m,g.childNodes),g=l.firstChild,g.textContent=\"\"}else m.push(b.createTextNode(f));l.textContent=\"\",o=0;while(f=m[o++])if(d&&n.inArray(f,d)>-1)e&&e.push(f);else if(j=n.contains(f.ownerDocument,f),g=_(l.appendChild(f),\"script\"),j&&aa(g),c){k=0;while(f=g[k++])Z.test(f.type||\"\")&&c.push(f)}return l}!function(){var a=d.createDocumentFragment(),b=a.appendChild(d.createElement(\"div\")),c=d.createElement(\"input\");c.setAttribute(\"type\",\"radio\"),c.setAttribute(\"checked\",\"checked\"),c.setAttribute(\"name\",\"t\"),b.appendChild(c),l.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,b.innerHTML=\"<textarea>x</textarea>\",l.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue}();var da=/^key/,ea=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,fa=/^([^.]*)(?:\\.(.+)|)/;function ga(){return!0}function ha(){return!1}function ia(){try{return d.activeElement}catch(a){}}function ja(a,b,c,d,e,f){var g,h;if(\"object\"==typeof b){\"string\"!=typeof c&&(d=d||c,c=void 0);for(h in b)ja(a,h,c,d,b[h],f);return a}if(null==d&&null==e?(e=c,d=c=void 0):null==e&&(\"string\"==typeof c?(e=d,d=void 0):(e=d,d=c,c=void 0)),e===!1)e=ha;else if(!e)return a;return 1===f&&(g=e,e=function(a){return n().off(a),g.apply(this,arguments)},e.guid=g.guid||(g.guid=n.guid++)),a.each(function(){n.event.add(this,b,e,d,c)})}n.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=N.get(a);if(r){c.handler&&(f=c,c=f.handler,e=f.selector),c.guid||(c.guid=n.guid++),(i=r.events)||(i=r.events={}),(g=r.handle)||(g=r.handle=function(b){return\"undefined\"!=typeof n&&n.event.triggered!==b.type?n.event.dispatch.apply(a,arguments):void 0}),b=(b||\"\").match(G)||[\"\"],j=b.length;while(j--)h=fa.exec(b[j])||[],o=q=h[1],p=(h[2]||\"\").split(\".\").sort(),o&&(l=n.event.special[o]||{},o=(e?l.delegateType:l.bindType)||o,l=n.event.special[o]||{},k=n.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&n.expr.match.needsContext.test(e),namespace:p.join(\".\")},f),(m=i[o])||(m=i[o]=[],m.delegateCount=0,l.setup&&l.setup.call(a,d,p,g)!==!1||a.addEventListener&&a.addEventListener(o,g)),l.add&&(l.add.call(a,k),k.handler.guid||(k.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,k):m.push(k),n.event.global[o]=!0)}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=N.hasData(a)&&N.get(a);if(r&&(i=r.events)){b=(b||\"\").match(G)||[\"\"],j=b.length;while(j--)if(h=fa.exec(b[j])||[],o=q=h[1],p=(h[2]||\"\").split(\".\").sort(),o){l=n.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,m=i[o]||[],h=h[2]&&new RegExp(\"(^|\\\\.)\"+p.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"),g=f=m.length;while(f--)k=m[f],!e&&q!==k.origType||c&&c.guid!==k.guid||h&&!h.test(k.namespace)||d&&d!==k.selector&&(\"**\"!==d||!k.selector)||(m.splice(f,1),k.selector&&m.delegateCount--,l.remove&&l.remove.call(a,k));g&&!m.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||n.removeEvent(a,o,r.handle),delete i[o])}else for(o in i)n.event.remove(a,o+b[j],c,d,!0);n.isEmptyObject(i)&&N.remove(a,\"handle events\")}},dispatch:function(a){a=n.event.fix(a);var b,c,d,f,g,h=[],i=e.call(arguments),j=(N.get(this,\"events\")||{})[a.type]||[],k=n.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=n.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,c=0;while((g=f.handlers[c++])&&!a.isImmediatePropagationStopped())a.rnamespace&&!a.rnamespace.test(g.namespace)||(a.handleObj=g,a.data=g.data,d=((n.event.special[g.origType]||{}).handle||g.handler).apply(f.elem,i),void 0!==d&&(a.result=d)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&(\"click\"!==a.type||isNaN(a.button)||a.button<1))for(;i!==this;i=i.parentNode||this)if(1===i.nodeType&&(i.disabled!==!0||\"click\"!==a.type)){for(d=[],c=0;h>c;c++)f=b[c],e=f.selector+\" \",void 0===d[e]&&(d[e]=f.needsContext?n(e,this).index(i)>-1:n.find(e,this,null,[i]).length),d[e]&&d.push(f);d.length&&g.push({elem:i,handlers:d})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},props:\"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which\".split(\" \"),fixHooks:{},keyHooks:{props:\"char charCode key keyCode\".split(\" \"),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:\"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement\".split(\" \"),filter:function(a,b){var c,e,f,g=b.button;return null==a.pageX&&null!=b.clientX&&(c=a.target.ownerDocument||d,e=c.documentElement,f=c.body,a.pageX=b.clientX+(e&&e.scrollLeft||f&&f.scrollLeft||0)-(e&&e.clientLeft||f&&f.clientLeft||0),a.pageY=b.clientY+(e&&e.scrollTop||f&&f.scrollTop||0)-(e&&e.clientTop||f&&f.clientTop||0)),a.which||void 0===g||(a.which=1&g?1:2&g?3:4&g?2:0),a}},fix:function(a){if(a[n.expando])return a;var b,c,e,f=a.type,g=a,h=this.fixHooks[f];h||(this.fixHooks[f]=h=ea.test(f)?this.mouseHooks:da.test(f)?this.keyHooks:{}),e=h.props?this.props.concat(h.props):this.props,a=new n.Event(g),b=e.length;while(b--)c=e[b],a[c]=g[c];return a.target||(a.target=d),3===a.target.nodeType&&(a.target=a.target.parentNode),h.filter?h.filter(a,g):a},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==ia()&&this.focus?(this.focus(),!1):void 0},delegateType:\"focusin\"},blur:{trigger:function(){return this===ia()&&this.blur?(this.blur(),!1):void 0},delegateType:\"focusout\"},click:{trigger:function(){return\"checkbox\"===this.type&&this.click&&n.nodeName(this,\"input\")?(this.click(),!1):void 0},_default:function(a){return n.nodeName(a.target,\"a\")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}}},n.removeEvent=function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c)},n.Event=function(a,b){return this instanceof n.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?ga:ha):this.type=a,b&&n.extend(this,b),this.timeStamp=a&&a.timeStamp||n.now(),void(this[n.expando]=!0)):new n.Event(a,b)},n.Event.prototype={constructor:n.Event,isDefaultPrevented:ha,isPropagationStopped:ha,isImmediatePropagationStopped:ha,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=ga,a&&a.preventDefault()},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=ga,a&&a.stopPropagation()},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=ga,a&&a.stopImmediatePropagation(),this.stopPropagation()}},n.each({mouseenter:\"mouseover\",mouseleave:\"mouseout\",pointerenter:\"pointerover\",pointerleave:\"pointerout\"},function(a,b){n.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return e&&(e===d||n.contains(d,e))||(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),n.fn.extend({on:function(a,b,c,d){return ja(this,a,b,c,d)},one:function(a,b,c,d){return ja(this,a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,n(a.delegateTarget).off(d.namespace?d.origType+\".\"+d.namespace:d.origType,d.selector,d.handler),this;if(\"object\"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return b!==!1&&\"function\"!=typeof b||(c=b,b=void 0),c===!1&&(c=ha),this.each(function(){n.event.remove(this,a,c,b)})}});var ka=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:-]+)[^>]*)\\/>/gi,la=/<script|<style|<link/i,ma=/checked\\s*(?:[^=]|=\\s*.checked.)/i,na=/^true\\/(.*)/,oa=/^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;function pa(a,b){return n.nodeName(a,\"table\")&&n.nodeName(11!==b.nodeType?b:b.firstChild,\"tr\")?a.getElementsByTagName(\"tbody\")[0]||a.appendChild(a.ownerDocument.createElement(\"tbody\")):a}function qa(a){return a.type=(null!==a.getAttribute(\"type\"))+\"/\"+a.type,a}function ra(a){var b=na.exec(a.type);return b?a.type=b[1]:a.removeAttribute(\"type\"),a}function sa(a,b){var c,d,e,f,g,h,i,j;if(1===b.nodeType){if(N.hasData(a)&&(f=N.access(a),g=N.set(b,f),j=f.events)){delete g.handle,g.events={};for(e in j)for(c=0,d=j[e].length;d>c;c++)n.event.add(b,e,j[e][c])}O.hasData(a)&&(h=O.access(a),i=n.extend({},h),O.set(b,i))}}function ta(a,b){var c=b.nodeName.toLowerCase();\"input\"===c&&X.test(a.type)?b.checked=a.checked:\"input\"!==c&&\"textarea\"!==c||(b.defaultValue=a.defaultValue)}function ua(a,b,c,d){b=f.apply([],b);var e,g,h,i,j,k,m=0,o=a.length,p=o-1,q=b[0],r=n.isFunction(q);if(r||o>1&&\"string\"==typeof q&&!l.checkClone&&ma.test(q))return a.each(function(e){var f=a.eq(e);r&&(b[0]=q.call(this,e,f.html())),ua(f,b,c,d)});if(o&&(e=ca(b,a[0].ownerDocument,!1,a,d),g=e.firstChild,1===e.childNodes.length&&(e=g),g||d)){for(h=n.map(_(e,\"script\"),qa),i=h.length;o>m;m++)j=e,m!==p&&(j=n.clone(j,!0,!0),i&&n.merge(h,_(j,\"script\"))),c.call(a[m],j,m);if(i)for(k=h[h.length-1].ownerDocument,n.map(h,ra),m=0;i>m;m++)j=h[m],Z.test(j.type||\"\")&&!N.access(j,\"globalEval\")&&n.contains(k,j)&&(j.src?n._evalUrl&&n._evalUrl(j.src):n.globalEval(j.textContent.replace(oa,\"\")))}return a}function va(a,b,c){for(var d,e=b?n.filter(b,a):a,f=0;null!=(d=e[f]);f++)c||1!==d.nodeType||n.cleanData(_(d)),d.parentNode&&(c&&n.contains(d.ownerDocument,d)&&aa(_(d,\"script\")),d.parentNode.removeChild(d));return a}n.extend({htmlPrefilter:function(a){return a.replace(ka,\"<$1></$2>\")},clone:function(a,b,c){var d,e,f,g,h=a.cloneNode(!0),i=n.contains(a.ownerDocument,a);if(!(l.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||n.isXMLDoc(a)))for(g=_(h),f=_(a),d=0,e=f.length;e>d;d++)ta(f[d],g[d]);if(b)if(c)for(f=f||_(a),g=g||_(h),d=0,e=f.length;e>d;d++)sa(f[d],g[d]);else sa(a,h);return g=_(h,\"script\"),g.length>0&&aa(g,!i&&_(a,\"script\")),h},cleanData:function(a){for(var b,c,d,e=n.event.special,f=0;void 0!==(c=a[f]);f++)if(L(c)){if(b=c[N.expando]){if(b.events)for(d in b.events)e[d]?n.event.remove(c,d):n.removeEvent(c,d,b.handle);c[N.expando]=void 0}c[O.expando]&&(c[O.expando]=void 0)}}}),n.fn.extend({domManip:ua,detach:function(a){return va(this,a,!0)},remove:function(a){return va(this,a)},text:function(a){return K(this,function(a){return void 0===a?n.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=a)})},null,a,arguments.length)},append:function(){return ua(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=pa(this,a);b.appendChild(a)}})},prepend:function(){return ua(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=pa(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return ua(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return ua(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},empty:function(){for(var a,b=0;null!=(a=this[b]);b++)1===a.nodeType&&(n.cleanData(_(a,!1)),a.textContent=\"\");return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return n.clone(this,a,b)})},html:function(a){return K(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a&&1===b.nodeType)return b.innerHTML;if(\"string\"==typeof a&&!la.test(a)&&!$[(Y.exec(a)||[\"\",\"\"])[1].toLowerCase()]){a=n.htmlPrefilter(a);try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(n.cleanData(_(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=[];return ua(this,arguments,function(b){var c=this.parentNode;n.inArray(this,a)<0&&(n.cleanData(_(this)),c&&c.replaceChild(b,this))},a)}}),n.each({appendTo:\"append\",prependTo:\"prepend\",insertBefore:\"before\",insertAfter:\"after\",replaceAll:\"replaceWith\"},function(a,b){n.fn[a]=function(a){for(var c,d=[],e=n(a),f=e.length-1,h=0;f>=h;h++)c=h===f?this:this.clone(!0),n(e[h])[b](c),g.apply(d,c.get());return this.pushStack(d)}});var wa,xa={HTML:\"block\",BODY:\"block\"};function ya(a,b){var c=n(b.createElement(a)).appendTo(b.body),d=n.css(c[0],\"display\");return c.detach(),d}function za(a){var b=d,c=xa[a];return c||(c=ya(a,b),\"none\"!==c&&c||(wa=(wa||n(\"<iframe frameborder='0' width='0' height='0'/>\")).appendTo(b.documentElement),b=wa[0].contentDocument,b.write(),b.close(),c=ya(a,b),wa.detach()),xa[a]=c),c}var Aa=/^margin/,Ba=new RegExp(\"^(\"+S+\")(?!px)[a-z%]+$\",\"i\"),Ca=function(b){var c=b.ownerDocument.defaultView;return c&&c.opener||(c=a),c.getComputedStyle(b)},Da=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e},Ea=d.documentElement;!function(){var b,c,e,f,g=d.createElement(\"div\"),h=d.createElement(\"div\");if(h.style){h.style.backgroundClip=\"content-box\",h.cloneNode(!0).style.backgroundClip=\"\",l.clearCloneStyle=\"content-box\"===h.style.backgroundClip,g.style.cssText=\"border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute\",g.appendChild(h);function i(){h.style.cssText=\"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%\",h.innerHTML=\"\",Ea.appendChild(g);var d=a.getComputedStyle(h);b=\"1%\"!==d.top,f=\"2px\"===d.marginLeft,c=\"4px\"===d.width,h.style.marginRight=\"50%\",e=\"4px\"===d.marginRight,Ea.removeChild(g)}n.extend(l,{pixelPosition:function(){return i(),b},boxSizingReliable:function(){return null==c&&i(),c},pixelMarginRight:function(){return null==c&&i(),e},reliableMarginLeft:function(){return null==c&&i(),f},reliableMarginRight:function(){var b,c=h.appendChild(d.createElement(\"div\"));return c.style.cssText=h.style.cssText=\"-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0\",c.style.marginRight=c.style.width=\"0\",h.style.width=\"1px\",Ea.appendChild(g),b=!parseFloat(a.getComputedStyle(c).marginRight),Ea.removeChild(g),h.removeChild(c),b}})}}();function Fa(a,b,c){var d,e,f,g,h=a.style;return c=c||Ca(a),g=c?c.getPropertyValue(b)||c[b]:void 0,\"\"!==g&&void 0!==g||n.contains(a.ownerDocument,a)||(g=n.style(a,b)),c&&!l.pixelMarginRight()&&Ba.test(g)&&Aa.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f),void 0!==g?g+\"\":g}function Ga(a,b){return{get:function(){return a()?void delete this.get:(this.get=b).apply(this,arguments)}}}var Ha=/^(none|table(?!-c[ea]).+)/,Ia={position:\"absolute\",visibility:\"hidden\",display:\"block\"},Ja={letterSpacing:\"0\",fontWeight:\"400\"},Ka=[\"Webkit\",\"O\",\"Moz\",\"ms\"],La=d.createElement(\"div\").style;function Ma(a){if(a in La)return a;var b=a[0].toUpperCase()+a.slice(1),c=Ka.length;while(c--)if(a=Ka[c]+b,a in La)return a}function Na(a,b,c){var d=T.exec(b);return d?Math.max(0,d[2]-(c||0))+(d[3]||\"px\"):b}function Oa(a,b,c,d,e){for(var f=c===(d?\"border\":\"content\")?4:\"width\"===b?1:0,g=0;4>f;f+=2)\"margin\"===c&&(g+=n.css(a,c+U[f],!0,e)),d?(\"content\"===c&&(g-=n.css(a,\"padding\"+U[f],!0,e)),\"margin\"!==c&&(g-=n.css(a,\"border\"+U[f]+\"Width\",!0,e))):(g+=n.css(a,\"padding\"+U[f],!0,e),\"padding\"!==c&&(g+=n.css(a,\"border\"+U[f]+\"Width\",!0,e)));return g}function Pa(b,c,e){var f=!0,g=\"width\"===c?b.offsetWidth:b.offsetHeight,h=Ca(b),i=\"border-box\"===n.css(b,\"boxSizing\",!1,h);if(d.msFullscreenElement&&a.top!==a&&b.getClientRects().length&&(g=Math.round(100*b.getBoundingClientRect()[c])),0>=g||null==g){if(g=Fa(b,c,h),(0>g||null==g)&&(g=b.style[c]),Ba.test(g))return g;f=i&&(l.boxSizingReliable()||g===b.style[c]),g=parseFloat(g)||0}return g+Oa(b,c,e||(i?\"border\":\"content\"),f,h)+\"px\"}function Qa(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=N.get(d,\"olddisplay\"),c=d.style.display,b?(f[g]||\"none\"!==c||(d.style.display=\"\"),\"\"===d.style.display&&V(d)&&(f[g]=N.access(d,\"olddisplay\",za(d.nodeName)))):(e=V(d),\"none\"===c&&e||N.set(d,\"olddisplay\",e?c:n.css(d,\"display\"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&\"none\"!==d.style.display&&\"\"!==d.style.display||(d.style.display=b?f[g]||\"\":\"none\"));return a}n.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=Fa(a,\"opacity\");return\"\"===c?\"1\":c}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{\"float\":\"cssFloat\"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=n.camelCase(b),i=a.style;return b=n.cssProps[h]||(n.cssProps[h]=Ma(h)||h),g=n.cssHooks[b]||n.cssHooks[h],void 0===c?g&&\"get\"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b]:(f=typeof c,\"string\"===f&&(e=T.exec(c))&&e[1]&&(c=W(a,b,e),f=\"number\"),null!=c&&c===c&&(\"number\"===f&&(c+=e&&e[3]||(n.cssNumber[h]?\"\":\"px\")),l.clearCloneStyle||\"\"!==c||0!==b.indexOf(\"background\")||(i[b]=\"inherit\"),g&&\"set\"in g&&void 0===(c=g.set(a,c,d))||(i[b]=c)),void 0)}},css:function(a,b,c,d){var e,f,g,h=n.camelCase(b);return b=n.cssProps[h]||(n.cssProps[h]=Ma(h)||h),g=n.cssHooks[b]||n.cssHooks[h],g&&\"get\"in g&&(e=g.get(a,!0,c)),void 0===e&&(e=Fa(a,b,d)),\"normal\"===e&&b in Ja&&(e=Ja[b]),\"\"===c||c?(f=parseFloat(e),c===!0||isFinite(f)?f||0:e):e}}),n.each([\"height\",\"width\"],function(a,b){n.cssHooks[b]={get:function(a,c,d){return c?Ha.test(n.css(a,\"display\"))&&0===a.offsetWidth?Da(a,Ia,function(){return Pa(a,b,d)}):Pa(a,b,d):void 0},set:function(a,c,d){var e,f=d&&Ca(a),g=d&&Oa(a,b,d,\"border-box\"===n.css(a,\"boxSizing\",!1,f),f);return g&&(e=T.exec(c))&&\"px\"!==(e[3]||\"px\")&&(a.style[b]=c,c=n.css(a,b)),Na(a,c,g)}}}),n.cssHooks.marginLeft=Ga(l.reliableMarginLeft,function(a,b){return b?(parseFloat(Fa(a,\"marginLeft\"))||a.getBoundingClientRect().left-Da(a,{marginLeft:0},function(){return a.getBoundingClientRect().left}))+\"px\":void 0}),n.cssHooks.marginRight=Ga(l.reliableMarginRight,function(a,b){return b?Da(a,{display:\"inline-block\"},Fa,[a,\"marginRight\"]):void 0}),n.each({margin:\"\",padding:\"\",border:\"Width\"},function(a,b){n.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f=\"string\"==typeof c?c.split(\" \"):[c];4>d;d++)e[a+U[d]+b]=f[d]||f[d-2]||f[0];return e}},Aa.test(a)||(n.cssHooks[a+b].set=Na)}),n.fn.extend({css:function(a,b){return K(this,function(a,b,c){var d,e,f={},g=0;if(n.isArray(b)){for(d=Ca(a),e=b.length;e>g;g++)f[b[g]]=n.css(a,b[g],!1,d);return f}return void 0!==c?n.style(a,b,c):n.css(a,b)},a,b,arguments.length>1)},show:function(){return Qa(this,!0)},hide:function(){return Qa(this)},toggle:function(a){return\"boolean\"==typeof a?a?this.show():this.hide():this.each(function(){V(this)?n(this).show():n(this).hide()})}});function Ra(a,b,c,d,e){return new Ra.prototype.init(a,b,c,d,e)}n.Tween=Ra,Ra.prototype={constructor:Ra,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||n.easing._default,this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(n.cssNumber[c]?\"\":\"px\")},cur:function(){var a=Ra.propHooks[this.prop];return a&&a.get?a.get(this):Ra.propHooks._default.get(this)},run:function(a){var b,c=Ra.propHooks[this.prop];return this.options.duration?this.pos=b=n.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):Ra.propHooks._default.set(this),this}},Ra.prototype.init.prototype=Ra.prototype,Ra.propHooks={_default:{get:function(a){var b;return 1!==a.elem.nodeType||null!=a.elem[a.prop]&&null==a.elem.style[a.prop]?a.elem[a.prop]:(b=n.css(a.elem,a.prop,\"\"),b&&\"auto\"!==b?b:0)},set:function(a){n.fx.step[a.prop]?n.fx.step[a.prop](a):1!==a.elem.nodeType||null==a.elem.style[n.cssProps[a.prop]]&&!n.cssHooks[a.prop]?a.elem[a.prop]=a.now:n.style(a.elem,a.prop,a.now+a.unit)}}},Ra.propHooks.scrollTop=Ra.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},n.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2},_default:\"swing\"},n.fx=Ra.prototype.init,n.fx.step={};var Sa,Ta,Ua=/^(?:toggle|show|hide)$/,Va=/queueHooks$/;function Wa(){return a.setTimeout(function(){Sa=void 0}),Sa=n.now()}function Xa(a,b){var c,d=0,e={height:a};for(b=b?1:0;4>d;d+=2-b)c=U[d],e[\"margin\"+c]=e[\"padding\"+c]=a;return b&&(e.opacity=e.width=a),e}function Ya(a,b,c){for(var d,e=(_a.tweeners[b]||[]).concat(_a.tweeners[\"*\"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function Za(a,b,c){var d,e,f,g,h,i,j,k,l=this,m={},o=a.style,p=a.nodeType&&V(a),q=N.get(a,\"fxshow\");c.queue||(h=n._queueHooks(a,\"fx\"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,l.always(function(){l.always(function(){h.unqueued--,n.queue(a,\"fx\").length||h.empty.fire()})})),1===a.nodeType&&(\"height\"in b||\"width\"in b)&&(c.overflow=[o.overflow,o.overflowX,o.overflowY],j=n.css(a,\"display\"),k=\"none\"===j?N.get(a,\"olddisplay\")||za(a.nodeName):j,\"inline\"===k&&\"none\"===n.css(a,\"float\")&&(o.display=\"inline-block\")),c.overflow&&(o.overflow=\"hidden\",l.always(function(){o.overflow=c.overflow[0],o.overflowX=c.overflow[1],o.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],Ua.exec(e)){if(delete b[d],f=f||\"toggle\"===e,e===(p?\"hide\":\"show\")){if(\"show\"!==e||!q||void 0===q[d])continue;p=!0}m[d]=q&&q[d]||n.style(a,d)}else j=void 0;if(n.isEmptyObject(m))\"inline\"===(\"none\"===j?za(a.nodeName):j)&&(o.display=j);else{q?\"hidden\"in q&&(p=q.hidden):q=N.access(a,\"fxshow\",{}),f&&(q.hidden=!p),p?n(a).show():l.done(function(){n(a).hide()}),l.done(function(){var b;N.remove(a,\"fxshow\");for(b in m)n.style(a,b,m[b])});for(d in m)g=Ya(p?q[d]:0,d,l),d in q||(q[d]=g.start,p&&(g.end=g.start,g.start=\"width\"===d||\"height\"===d?1:0))}}function $a(a,b){var c,d,e,f,g;for(c in a)if(d=n.camelCase(c),e=b[d],f=a[c],n.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=n.cssHooks[d],g&&\"expand\"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function _a(a,b,c){var d,e,f=0,g=_a.prefilters.length,h=n.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=Sa||Wa(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:n.extend({},b),opts:n.extend(!0,{specialEasing:{},easing:n.easing._default},c),originalProperties:b,originalOptions:c,startTime:Sa||Wa(),duration:c.duration,tweens:[],createTween:function(b,c){var d=n.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?(h.notifyWith(a,[j,1,0]),h.resolveWith(a,[j,b])):h.rejectWith(a,[j,b]),this}}),k=j.props;for($a(k,j.opts.specialEasing);g>f;f++)if(d=_a.prefilters[f].call(j,a,k,j.opts))return n.isFunction(d.stop)&&(n._queueHooks(j.elem,j.opts.queue).stop=n.proxy(d.stop,d)),d;return n.map(k,Ya,j),n.isFunction(j.opts.start)&&j.opts.start.call(a,j),n.fx.timer(n.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}n.Animation=n.extend(_a,{tweeners:{\"*\":[function(a,b){var c=this.createTween(a,b);return W(c.elem,a,T.exec(b),c),c}]},tweener:function(a,b){n.isFunction(a)?(b=a,a=[\"*\"]):a=a.match(G);for(var c,d=0,e=a.length;e>d;d++)c=a[d],_a.tweeners[c]=_a.tweeners[c]||[],_a.tweeners[c].unshift(b)},prefilters:[Za],prefilter:function(a,b){b?_a.prefilters.unshift(a):_a.prefilters.push(a)}}),n.speed=function(a,b,c){var d=a&&\"object\"==typeof a?n.extend({},a):{complete:c||!c&&b||n.isFunction(a)&&a,duration:a,easing:c&&b||b&&!n.isFunction(b)&&b};return d.duration=n.fx.off?0:\"number\"==typeof d.duration?d.duration:d.duration in n.fx.speeds?n.fx.speeds[d.duration]:n.fx.speeds._default,null!=d.queue&&d.queue!==!0||(d.queue=\"fx\"),d.old=d.complete,d.complete=function(){n.isFunction(d.old)&&d.old.call(this),d.queue&&n.dequeue(this,d.queue)},d},n.fn.extend({fadeTo:function(a,b,c,d){return this.filter(V).css(\"opacity\",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=n.isEmptyObject(a),f=n.speed(b,c,d),g=function(){var b=_a(this,n.extend({},a),f);(e||N.get(this,\"finish\"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return\"string\"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||\"fx\",[]),this.each(function(){var b=!0,e=null!=a&&a+\"queueHooks\",f=n.timers,g=N.get(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&Va.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));!b&&c||n.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||\"fx\"),this.each(function(){var b,c=N.get(this),d=c[a+\"queue\"],e=c[a+\"queueHooks\"],f=n.timers,g=d?d.length:0;for(c.finish=!0,n.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),n.each([\"toggle\",\"show\",\"hide\"],function(a,b){var c=n.fn[b];n.fn[b]=function(a,d,e){return null==a||\"boolean\"==typeof a?c.apply(this,arguments):this.animate(Xa(b,!0),a,d,e)}}),n.each({slideDown:Xa(\"show\"),slideUp:Xa(\"hide\"),slideToggle:Xa(\"toggle\"),fadeIn:{opacity:\"show\"},fadeOut:{opacity:\"hide\"},fadeToggle:{opacity:\"toggle\"}},function(a,b){n.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),n.timers=[],n.fx.tick=function(){var a,b=0,c=n.timers;for(Sa=n.now();b<c.length;b++)a=c[b],a()||c[b]!==a||c.splice(b--,1);c.length||n.fx.stop(),Sa=void 0},n.fx.timer=function(a){n.timers.push(a),a()?n.fx.start():n.timers.pop()},n.fx.interval=13,n.fx.start=function(){Ta||(Ta=a.setInterval(n.fx.tick,n.fx.interval))},n.fx.stop=function(){a.clearInterval(Ta),Ta=null},n.fx.speeds={slow:600,fast:200,_default:400},n.fn.delay=function(b,c){return b=n.fx?n.fx.speeds[b]||b:b,c=c||\"fx\",this.queue(c,function(c,d){var e=a.setTimeout(c,b);d.stop=function(){a.clearTimeout(e)}})},function(){var a=d.createElement(\"input\"),b=d.createElement(\"select\"),c=b.appendChild(d.createElement(\"option\"));a.type=\"checkbox\",l.checkOn=\"\"!==a.value,l.optSelected=c.selected,b.disabled=!0,l.optDisabled=!c.disabled,a=d.createElement(\"input\"),a.value=\"t\",a.type=\"radio\",l.radioValue=\"t\"===a.value}();var ab,bb=n.expr.attrHandle;n.fn.extend({attr:function(a,b){return K(this,n.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){n.removeAttr(this,a)})}}),n.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return\"undefined\"==typeof a.getAttribute?n.prop(a,b,c):(1===f&&n.isXMLDoc(a)||(b=b.toLowerCase(),e=n.attrHooks[b]||(n.expr.match.bool.test(b)?ab:void 0)),void 0!==c?null===c?void n.removeAttr(a,b):e&&\"set\"in e&&void 0!==(d=e.set(a,c,b))?d:(a.setAttribute(b,c+\"\"),c):e&&\"get\"in e&&null!==(d=e.get(a,b))?d:(d=n.find.attr(a,b),null==d?void 0:d))},attrHooks:{type:{set:function(a,b){if(!l.radioValue&&\"radio\"===b&&n.nodeName(a,\"input\")){var c=a.value;return a.setAttribute(\"type\",b),c&&(a.value=c),b}}}},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(G);if(f&&1===a.nodeType)while(c=f[e++])d=n.propFix[c]||c,n.expr.match.bool.test(c)&&(a[d]=!1),a.removeAttribute(c)}}),ab={set:function(a,b,c){return b===!1?n.removeAttr(a,c):a.setAttribute(c,c),c}},n.each(n.expr.match.bool.source.match(/\\w+/g),function(a,b){var c=bb[b]||n.find.attr;bb[b]=function(a,b,d){var e,f;return d||(f=bb[b],bb[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,bb[b]=f),e}});var cb=/^(?:input|select|textarea|button)$/i,db=/^(?:a|area)$/i;n.fn.extend({prop:function(a,b){return K(this,n.prop,a,b,arguments.length>1)},removeProp:function(a){return this.each(function(){delete this[n.propFix[a]||a]})}}),n.extend({prop:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return 1===f&&n.isXMLDoc(a)||(b=n.propFix[b]||b,\n    4: e=n.propHooks[b]),void 0!==c?e&&\"set\"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&\"get\"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){var b=n.find.attr(a,\"tabindex\");return b?parseInt(b,10):cb.test(a.nodeName)||db.test(a.nodeName)&&a.href?0:-1}}},propFix:{\"for\":\"htmlFor\",\"class\":\"className\"}}),l.optSelected||(n.propHooks.selected={get:function(a){var b=a.parentNode;return b&&b.parentNode&&b.parentNode.selectedIndex,null},set:function(a){var b=a.parentNode;b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex)}}),n.each([\"tabIndex\",\"readOnly\",\"maxLength\",\"cellSpacing\",\"cellPadding\",\"rowSpan\",\"colSpan\",\"useMap\",\"frameBorder\",\"contentEditable\"],function(){n.propFix[this.toLowerCase()]=this});var eb=/[\\t\\r\\n\\f]/g;function fb(a){return a.getAttribute&&a.getAttribute(\"class\")||\"\"}n.fn.extend({addClass:function(a){var b,c,d,e,f,g,h,i=0;if(n.isFunction(a))return this.each(function(b){n(this).addClass(a.call(this,b,fb(this)))});if(\"string\"==typeof a&&a){b=a.match(G)||[];while(c=this[i++])if(e=fb(c),d=1===c.nodeType&&(\" \"+e+\" \").replace(eb,\" \")){g=0;while(f=b[g++])d.indexOf(\" \"+f+\" \")<0&&(d+=f+\" \");h=n.trim(d),e!==h&&c.setAttribute(\"class\",h)}}return this},removeClass:function(a){var b,c,d,e,f,g,h,i=0;if(n.isFunction(a))return this.each(function(b){n(this).removeClass(a.call(this,b,fb(this)))});if(!arguments.length)return this.attr(\"class\",\"\");if(\"string\"==typeof a&&a){b=a.match(G)||[];while(c=this[i++])if(e=fb(c),d=1===c.nodeType&&(\" \"+e+\" \").replace(eb,\" \")){g=0;while(f=b[g++])while(d.indexOf(\" \"+f+\" \")>-1)d=d.replace(\" \"+f+\" \",\" \");h=n.trim(d),e!==h&&c.setAttribute(\"class\",h)}}return this},toggleClass:function(a,b){var c=typeof a;return\"boolean\"==typeof b&&\"string\"===c?b?this.addClass(a):this.removeClass(a):n.isFunction(a)?this.each(function(c){n(this).toggleClass(a.call(this,c,fb(this),b),b)}):this.each(function(){var b,d,e,f;if(\"string\"===c){d=0,e=n(this),f=a.match(G)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else void 0!==a&&\"boolean\"!==c||(b=fb(this),b&&N.set(this,\"__className__\",b),this.setAttribute&&this.setAttribute(\"class\",b||a===!1?\"\":N.get(this,\"__className__\")||\"\"))})},hasClass:function(a){var b,c,d=0;b=\" \"+a+\" \";while(c=this[d++])if(1===c.nodeType&&(\" \"+fb(c)+\" \").replace(eb,\" \").indexOf(b)>-1)return!0;return!1}});var gb=/\\r/g,hb=/[\\x20\\t\\r\\n\\f]+/g;n.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=n.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,n(this).val()):a,null==e?e=\"\":\"number\"==typeof e?e+=\"\":n.isArray(e)&&(e=n.map(e,function(a){return null==a?\"\":a+\"\"})),b=n.valHooks[this.type]||n.valHooks[this.nodeName.toLowerCase()],b&&\"set\"in b&&void 0!==b.set(this,e,\"value\")||(this.value=e))});if(e)return b=n.valHooks[e.type]||n.valHooks[e.nodeName.toLowerCase()],b&&\"get\"in b&&void 0!==(c=b.get(e,\"value\"))?c:(c=e.value,\"string\"==typeof c?c.replace(gb,\"\"):null==c?\"\":c)}}}),n.extend({valHooks:{option:{get:function(a){var b=n.find.attr(a,\"value\");return null!=b?b:n.trim(n.text(a)).replace(hb,\" \")}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f=\"select-one\"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],(c.selected||i===e)&&(l.optDisabled?!c.disabled:null===c.getAttribute(\"disabled\"))&&(!c.parentNode.disabled||!n.nodeName(c.parentNode,\"optgroup\"))){if(b=n(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=n.makeArray(b),g=e.length;while(g--)d=e[g],(d.selected=n.inArray(n.valHooks.option.get(d),f)>-1)&&(c=!0);return c||(a.selectedIndex=-1),f}}}}),n.each([\"radio\",\"checkbox\"],function(){n.valHooks[this]={set:function(a,b){return n.isArray(b)?a.checked=n.inArray(n(a).val(),b)>-1:void 0}},l.checkOn||(n.valHooks[this].get=function(a){return null===a.getAttribute(\"value\")?\"on\":a.value})});var ib=/^(?:focusinfocus|focusoutblur)$/;n.extend(n.event,{trigger:function(b,c,e,f){var g,h,i,j,l,m,o,p=[e||d],q=k.call(b,\"type\")?b.type:b,r=k.call(b,\"namespace\")?b.namespace.split(\".\"):[];if(h=i=e=e||d,3!==e.nodeType&&8!==e.nodeType&&!ib.test(q+n.event.triggered)&&(q.indexOf(\".\")>-1&&(r=q.split(\".\"),q=r.shift(),r.sort()),l=q.indexOf(\":\")<0&&\"on\"+q,b=b[n.expando]?b:new n.Event(q,\"object\"==typeof b&&b),b.isTrigger=f?2:3,b.namespace=r.join(\".\"),b.rnamespace=b.namespace?new RegExp(\"(^|\\\\.)\"+r.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"):null,b.result=void 0,b.target||(b.target=e),c=null==c?[b]:n.makeArray(c,[b]),o=n.event.special[q]||{},f||!o.trigger||o.trigger.apply(e,c)!==!1)){if(!f&&!o.noBubble&&!n.isWindow(e)){for(j=o.delegateType||q,ib.test(j+q)||(h=h.parentNode);h;h=h.parentNode)p.push(h),i=h;i===(e.ownerDocument||d)&&p.push(i.defaultView||i.parentWindow||a)}g=0;while((h=p[g++])&&!b.isPropagationStopped())b.type=g>1?j:o.bindType||q,m=(N.get(h,\"events\")||{})[b.type]&&N.get(h,\"handle\"),m&&m.apply(h,c),m=l&&h[l],m&&m.apply&&L(h)&&(b.result=m.apply(h,c),b.result===!1&&b.preventDefault());return b.type=q,f||b.isDefaultPrevented()||o._default&&o._default.apply(p.pop(),c)!==!1||!L(e)||l&&n.isFunction(e[q])&&!n.isWindow(e)&&(i=e[l],i&&(e[l]=null),n.event.triggered=q,e[q](),n.event.triggered=void 0,i&&(e[l]=i)),b.result}},simulate:function(a,b,c){var d=n.extend(new n.Event,c,{type:a,isSimulated:!0});n.event.trigger(d,null,b),d.isDefaultPrevented()&&c.preventDefault()}}),n.fn.extend({trigger:function(a,b){return this.each(function(){n.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?n.event.trigger(a,b,c,!0):void 0}}),n.each(\"blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu\".split(\" \"),function(a,b){n.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),n.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}}),l.focusin=\"onfocusin\"in a,l.focusin||n.each({focus:\"focusin\",blur:\"focusout\"},function(a,b){var c=function(a){n.event.simulate(b,a.target,n.event.fix(a))};n.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=N.access(d,b);e||d.addEventListener(a,c,!0),N.access(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=N.access(d,b)-1;e?N.access(d,b,e):(d.removeEventListener(a,c,!0),N.remove(d,b))}}});var jb=a.location,kb=n.now(),lb=/\\?/;n.parseJSON=function(a){return JSON.parse(a+\"\")},n.parseXML=function(b){var c;if(!b||\"string\"!=typeof b)return null;try{c=(new a.DOMParser).parseFromString(b,\"text/xml\")}catch(d){c=void 0}return c&&!c.getElementsByTagName(\"parsererror\").length||n.error(\"Invalid XML: \"+b),c};var mb=/#.*$/,nb=/([?&])_=[^&]*/,ob=/^(.*?):[ \\t]*([^\\r\\n]*)$/gm,pb=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,qb=/^(?:GET|HEAD)$/,rb=/^\\/\\//,sb={},tb={},ub=\"*/\".concat(\"*\"),vb=d.createElement(\"a\");vb.href=jb.href;function wb(a){return function(b,c){\"string\"!=typeof b&&(c=b,b=\"*\");var d,e=0,f=b.toLowerCase().match(G)||[];if(n.isFunction(c))while(d=f[e++])\"+\"===d[0]?(d=d.slice(1)||\"*\",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function xb(a,b,c,d){var e={},f=a===tb;function g(h){var i;return e[h]=!0,n.each(a[h]||[],function(a,h){var j=h(b,c,d);return\"string\"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e[\"*\"]&&g(\"*\")}function yb(a,b){var c,d,e=n.ajaxSettings.flatOptions||{};for(c in b)void 0!==b[c]&&((e[c]?a:d||(d={}))[c]=b[c]);return d&&n.extend(!0,a,d),a}function zb(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while(\"*\"===i[0])i.shift(),void 0===d&&(d=a.mimeType||b.getResponseHeader(\"Content-Type\"));if(d)for(e in h)if(h[e]&&h[e].test(d)){i.unshift(e);break}if(i[0]in c)f=i[0];else{for(e in c){if(!i[0]||a.converters[e+\" \"+i[0]]){f=e;break}g||(g=e)}f=f||g}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function Ab(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if(\"*\"===f)f=i;else if(\"*\"!==i&&i!==f){if(g=j[i+\" \"+f]||j[\"* \"+f],!g)for(e in j)if(h=e.split(\" \"),h[1]===f&&(g=j[i+\" \"+h[0]]||j[\"* \"+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a[\"throws\"])b=g(b);else try{b=g(b)}catch(l){return{state:\"parsererror\",error:g?l:\"No conversion from \"+i+\" to \"+f}}}return{state:\"success\",data:b}}n.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:jb.href,type:\"GET\",isLocal:pb.test(jb.protocol),global:!0,processData:!0,async:!0,contentType:\"application/x-www-form-urlencoded; charset=UTF-8\",accepts:{\"*\":ub,text:\"text/plain\",html:\"text/html\",xml:\"application/xml, text/xml\",json:\"application/json, text/javascript\"},contents:{xml:/\\bxml\\b/,html:/\\bhtml/,json:/\\bjson\\b/},responseFields:{xml:\"responseXML\",text:\"responseText\",json:\"responseJSON\"},converters:{\"* text\":String,\"text html\":!0,\"text json\":n.parseJSON,\"text xml\":n.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?yb(yb(a,n.ajaxSettings),b):yb(n.ajaxSettings,a)},ajaxPrefilter:wb(sb),ajaxTransport:wb(tb),ajax:function(b,c){\"object\"==typeof b&&(c=b,b=void 0),c=c||{};var e,f,g,h,i,j,k,l,m=n.ajaxSetup({},c),o=m.context||m,p=m.context&&(o.nodeType||o.jquery)?n(o):n.event,q=n.Deferred(),r=n.Callbacks(\"once memory\"),s=m.statusCode||{},t={},u={},v=0,w=\"canceled\",x={readyState:0,getResponseHeader:function(a){var b;if(2===v){if(!h){h={};while(b=ob.exec(g))h[b[1].toLowerCase()]=b[2]}b=h[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===v?g:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return v||(a=u[c]=u[c]||a,t[a]=b),this},overrideMimeType:function(a){return v||(m.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>v)for(b in a)s[b]=[s[b],a[b]];else x.always(a[x.status]);return this},abort:function(a){var b=a||w;return e&&e.abort(b),z(0,b),this}};if(q.promise(x).complete=r.add,x.success=x.done,x.error=x.fail,m.url=((b||m.url||jb.href)+\"\").replace(mb,\"\").replace(rb,jb.protocol+\"//\"),m.type=c.method||c.type||m.method||m.type,m.dataTypes=n.trim(m.dataType||\"*\").toLowerCase().match(G)||[\"\"],null==m.crossDomain){j=d.createElement(\"a\");try{j.href=m.url,j.href=j.href,m.crossDomain=vb.protocol+\"//\"+vb.host!=j.protocol+\"//\"+j.host}catch(y){m.crossDomain=!0}}if(m.data&&m.processData&&\"string\"!=typeof m.data&&(m.data=n.param(m.data,m.traditional)),xb(sb,m,c,x),2===v)return x;k=n.event&&m.global,k&&0===n.active++&&n.event.trigger(\"ajaxStart\"),m.type=m.type.toUpperCase(),m.hasContent=!qb.test(m.type),f=m.url,m.hasContent||(m.data&&(f=m.url+=(lb.test(f)?\"&\":\"?\")+m.data,delete m.data),m.cache===!1&&(m.url=nb.test(f)?f.replace(nb,\"$1_=\"+kb++):f+(lb.test(f)?\"&\":\"?\")+\"_=\"+kb++)),m.ifModified&&(n.lastModified[f]&&x.setRequestHeader(\"If-Modified-Since\",n.lastModified[f]),n.etag[f]&&x.setRequestHeader(\"If-None-Match\",n.etag[f])),(m.data&&m.hasContent&&m.contentType!==!1||c.contentType)&&x.setRequestHeader(\"Content-Type\",m.contentType),x.setRequestHeader(\"Accept\",m.dataTypes[0]&&m.accepts[m.dataTypes[0]]?m.accepts[m.dataTypes[0]]+(\"*\"!==m.dataTypes[0]?\", \"+ub+\"; q=0.01\":\"\"):m.accepts[\"*\"]);for(l in m.headers)x.setRequestHeader(l,m.headers[l]);if(m.beforeSend&&(m.beforeSend.call(o,x,m)===!1||2===v))return x.abort();w=\"abort\";for(l in{success:1,error:1,complete:1})x[l](m[l]);if(e=xb(tb,m,c,x)){if(x.readyState=1,k&&p.trigger(\"ajaxSend\",[x,m]),2===v)return x;m.async&&m.timeout>0&&(i=a.setTimeout(function(){x.abort(\"timeout\")},m.timeout));try{v=1,e.send(t,z)}catch(y){if(!(2>v))throw y;z(-1,y)}}else z(-1,\"No Transport\");function z(b,c,d,h){var j,l,t,u,w,y=c;2!==v&&(v=2,i&&a.clearTimeout(i),e=void 0,g=h||\"\",x.readyState=b>0?4:0,j=b>=200&&300>b||304===b,d&&(u=zb(m,x,d)),u=Ab(m,u,x,j),j?(m.ifModified&&(w=x.getResponseHeader(\"Last-Modified\"),w&&(n.lastModified[f]=w),w=x.getResponseHeader(\"etag\"),w&&(n.etag[f]=w)),204===b||\"HEAD\"===m.type?y=\"nocontent\":304===b?y=\"notmodified\":(y=u.state,l=u.data,t=u.error,j=!t)):(t=y,!b&&y||(y=\"error\",0>b&&(b=0))),x.status=b,x.statusText=(c||y)+\"\",j?q.resolveWith(o,[l,y,x]):q.rejectWith(o,[x,y,t]),x.statusCode(s),s=void 0,k&&p.trigger(j?\"ajaxSuccess\":\"ajaxError\",[x,m,j?l:t]),r.fireWith(o,[x,y]),k&&(p.trigger(\"ajaxComplete\",[x,m]),--n.active||n.event.trigger(\"ajaxStop\")))}return x},getJSON:function(a,b,c){return n.get(a,b,c,\"json\")},getScript:function(a,b){return n.get(a,void 0,b,\"script\")}}),n.each([\"get\",\"post\"],function(a,b){n[b]=function(a,c,d,e){return n.isFunction(c)&&(e=e||d,d=c,c=void 0),n.ajax(n.extend({url:a,type:b,dataType:e,data:c,success:d},n.isPlainObject(a)&&a))}}),n._evalUrl=function(a){return n.ajax({url:a,type:\"GET\",dataType:\"script\",async:!1,global:!1,\"throws\":!0})},n.fn.extend({wrapAll:function(a){var b;return n.isFunction(a)?this.each(function(b){n(this).wrapAll(a.call(this,b))}):(this[0]&&(b=n(a,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstElementChild)a=a.firstElementChild;return a}).append(this)),this)},wrapInner:function(a){return n.isFunction(a)?this.each(function(b){n(this).wrapInner(a.call(this,b))}):this.each(function(){var b=n(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=n.isFunction(a);return this.each(function(c){n(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){n.nodeName(this,\"body\")||n(this).replaceWith(this.childNodes)}).end()}}),n.expr.filters.hidden=function(a){return!n.expr.filters.visible(a)},n.expr.filters.visible=function(a){return a.offsetWidth>0||a.offsetHeight>0||a.getClientRects().length>0};var Bb=/%20/g,Cb=/\\[\\]$/,Db=/\\r?\\n/g,Eb=/^(?:submit|button|image|reset|file)$/i,Fb=/^(?:input|select|textarea|keygen)/i;function Gb(a,b,c,d){var e;if(n.isArray(b))n.each(b,function(b,e){c||Cb.test(a)?d(a,e):Gb(a+\"[\"+(\"object\"==typeof e&&null!=e?b:\"\")+\"]\",e,c,d)});else if(c||\"object\"!==n.type(b))d(a,b);else for(e in b)Gb(a+\"[\"+e+\"]\",b[e],c,d)}n.param=function(a,b){var c,d=[],e=function(a,b){b=n.isFunction(b)?b():null==b?\"\":b,d[d.length]=encodeURIComponent(a)+\"=\"+encodeURIComponent(b)};if(void 0===b&&(b=n.ajaxSettings&&n.ajaxSettings.traditional),n.isArray(a)||a.jquery&&!n.isPlainObject(a))n.each(a,function(){e(this.name,this.value)});else for(c in a)Gb(c,a[c],b,e);return d.join(\"&\").replace(Bb,\"+\")},n.fn.extend({serialize:function(){return n.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=n.prop(this,\"elements\");return a?n.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!n(this).is(\":disabled\")&&Fb.test(this.nodeName)&&!Eb.test(a)&&(this.checked||!X.test(a))}).map(function(a,b){var c=n(this).val();return null==c?null:n.isArray(c)?n.map(c,function(a){return{name:b.name,value:a.replace(Db,\"\\r\\n\")}}):{name:b.name,value:c.replace(Db,\"\\r\\n\")}}).get()}}),n.ajaxSettings.xhr=function(){try{return new a.XMLHttpRequest}catch(b){}};var Hb={0:200,1223:204},Ib=n.ajaxSettings.xhr();l.cors=!!Ib&&\"withCredentials\"in Ib,l.ajax=Ib=!!Ib,n.ajaxTransport(function(b){var c,d;return l.cors||Ib&&!b.crossDomain?{send:function(e,f){var g,h=b.xhr();if(h.open(b.type,b.url,b.async,b.username,b.password),b.xhrFields)for(g in b.xhrFields)h[g]=b.xhrFields[g];b.mimeType&&h.overrideMimeType&&h.overrideMimeType(b.mimeType),b.crossDomain||e[\"X-Requested-With\"]||(e[\"X-Requested-With\"]=\"XMLHttpRequest\");for(g in e)h.setRequestHeader(g,e[g]);c=function(a){return function(){c&&(c=d=h.onload=h.onerror=h.onabort=h.onreadystatechange=null,\"abort\"===a?h.abort():\"error\"===a?\"number\"!=typeof h.status?f(0,\"error\"):f(h.status,h.statusText):f(Hb[h.status]||h.status,h.statusText,\"text\"!==(h.responseType||\"text\")||\"string\"!=typeof h.responseText?{binary:h.response}:{text:h.responseText},h.getAllResponseHeaders()))}},h.onload=c(),d=h.onerror=c(\"error\"),void 0!==h.onabort?h.onabort=d:h.onreadystatechange=function(){4===h.readyState&&a.setTimeout(function(){c&&d()})},c=c(\"abort\");try{h.send(b.hasContent&&b.data||null)}catch(i){if(c)throw i}},abort:function(){c&&c()}}:void 0}),n.ajaxSetup({accepts:{script:\"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\"},contents:{script:/\\b(?:java|ecma)script\\b/},converters:{\"text script\":function(a){return n.globalEval(a),a}}}),n.ajaxPrefilter(\"script\",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type=\"GET\")}),n.ajaxTransport(\"script\",function(a){if(a.crossDomain){var b,c;return{send:function(e,f){b=n(\"<script>\").prop({charset:a.scriptCharset,src:a.url}).on(\"load error\",c=function(a){b.remove(),c=null,a&&f(\"error\"===a.type?404:200,a.type)}),d.head.appendChild(b[0])},abort:function(){c&&c()}}}});var Jb=[],Kb=/(=)\\?(?=&|$)|\\?\\?/;n.ajaxSetup({jsonp:\"callback\",jsonpCallback:function(){var a=Jb.pop()||n.expando+\"_\"+kb++;return this[a]=!0,a}}),n.ajaxPrefilter(\"json jsonp\",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(Kb.test(b.url)?\"url\":\"string\"==typeof b.data&&0===(b.contentType||\"\").indexOf(\"application/x-www-form-urlencoded\")&&Kb.test(b.data)&&\"data\");return h||\"jsonp\"===b.dataTypes[0]?(e=b.jsonpCallback=n.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(Kb,\"$1\"+e):b.jsonp!==!1&&(b.url+=(lb.test(b.url)?\"&\":\"?\")+b.jsonp+\"=\"+e),b.converters[\"script json\"]=function(){return g||n.error(e+\" was not called\"),g[0]},b.dataTypes[0]=\"json\",f=a[e],a[e]=function(){g=arguments},d.always(function(){void 0===f?n(a).removeProp(e):a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,Jb.push(e)),g&&n.isFunction(f)&&f(g[0]),g=f=void 0}),\"script\"):void 0}),n.parseHTML=function(a,b,c){if(!a||\"string\"!=typeof a)return null;\"boolean\"==typeof b&&(c=b,b=!1),b=b||d;var e=x.exec(a),f=!c&&[];return e?[b.createElement(e[1])]:(e=ca([a],b,f),f&&f.length&&n(f).remove(),n.merge([],e.childNodes))};var Lb=n.fn.load;n.fn.load=function(a,b,c){if(\"string\"!=typeof a&&Lb)return Lb.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(\" \");return h>-1&&(d=n.trim(a.slice(h)),a=a.slice(0,h)),n.isFunction(b)?(c=b,b=void 0):b&&\"object\"==typeof b&&(e=\"POST\"),g.length>0&&n.ajax({url:a,type:e||\"GET\",dataType:\"html\",data:b}).done(function(a){f=arguments,g.html(d?n(\"<div>\").append(n.parseHTML(a)).find(d):a)}).always(c&&function(a,b){g.each(function(){c.apply(this,f||[a.responseText,b,a])})}),this},n.each([\"ajaxStart\",\"ajaxStop\",\"ajaxComplete\",\"ajaxError\",\"ajaxSuccess\",\"ajaxSend\"],function(a,b){n.fn[b]=function(a){return this.on(b,a)}}),n.expr.filters.animated=function(a){return n.grep(n.timers,function(b){return a===b.elem}).length};function Mb(a){return n.isWindow(a)?a:9===a.nodeType&&a.defaultView}n.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=n.css(a,\"position\"),l=n(a),m={};\"static\"===k&&(a.style.position=\"relative\"),h=l.offset(),f=n.css(a,\"top\"),i=n.css(a,\"left\"),j=(\"absolute\"===k||\"fixed\"===k)&&(f+i).indexOf(\"auto\")>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),n.isFunction(b)&&(b=b.call(a,c,n.extend({},h))),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),\"using\"in b?b.using.call(a,m):l.css(m)}},n.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){n.offset.setOffset(this,a,b)});var b,c,d=this[0],e={top:0,left:0},f=d&&d.ownerDocument;if(f)return b=f.documentElement,n.contains(b,d)?(e=d.getBoundingClientRect(),c=Mb(f),{top:e.top+c.pageYOffset-b.clientTop,left:e.left+c.pageXOffset-b.clientLeft}):e},position:function(){if(this[0]){var a,b,c=this[0],d={top:0,left:0};return\"fixed\"===n.css(c,\"position\")?b=c.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),n.nodeName(a[0],\"html\")||(d=a.offset()),d.top+=n.css(a[0],\"borderTopWidth\",!0),d.left+=n.css(a[0],\"borderLeftWidth\",!0)),{top:b.top-d.top-n.css(c,\"marginTop\",!0),left:b.left-d.left-n.css(c,\"marginLeft\",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent;while(a&&\"static\"===n.css(a,\"position\"))a=a.offsetParent;return a||Ea})}}),n.each({scrollLeft:\"pageXOffset\",scrollTop:\"pageYOffset\"},function(a,b){var c=\"pageYOffset\"===b;n.fn[a]=function(d){return K(this,function(a,d,e){var f=Mb(a);return void 0===e?f?f[b]:a[d]:void(f?f.scrollTo(c?f.pageXOffset:e,c?e:f.pageYOffset):a[d]=e)},a,d,arguments.length)}}),n.each([\"top\",\"left\"],function(a,b){n.cssHooks[b]=Ga(l.pixelPosition,function(a,c){return c?(c=Fa(a,b),Ba.test(c)?n(a).position()[b]+\"px\":c):void 0})}),n.each({Height:\"height\",Width:\"width\"},function(a,b){n.each({padding:\"inner\"+a,content:b,\"\":\"outer\"+a},function(c,d){n.fn[d]=function(d,e){var f=arguments.length&&(c||\"boolean\"!=typeof d),g=c||(d===!0||e===!0?\"margin\":\"border\");return K(this,function(b,c,d){var e;return n.isWindow(b)?b.document.documentElement[\"client\"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body[\"scroll\"+a],e[\"scroll\"+a],b.body[\"offset\"+a],e[\"offset\"+a],e[\"client\"+a])):void 0===d?n.css(b,c,g):n.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),n.fn.extend({bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,\"**\"):this.off(b,a||\"**\",c)},size:function(){return this.length}}),n.fn.andSelf=n.fn.addBack,\"function\"==typeof define&&define.amd&&define(\"jquery\",[],function(){return n});var Nb=a.jQuery,Ob=a.$;return n.noConflict=function(b){return a.$===n&&(a.$=Ob),b&&a.jQuery===n&&(a.jQuery=Nb),n},b||(a.jQuery=a.$=n),n});\n    5  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/admin/views/main.py:\n   23  from django.utils.translation import ugettext\n   24  \n   25: # Changelist settings\n   26  ALL_VAR = 'all'\n   27  ORDER_VAR = 'o'\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/admindocs/middleware.py:\n    1  from django import http\n    2: from django.conf import settings\n    3  from django.utils.deprecation import MiddlewareMixin\n    4  \n    .\n   19              \"installed. Edit your MIDDLEWARE%s setting to insert \"\n   20              \"'django.contrib.auth.middleware.AuthenticationMiddleware'.\" % (\n   21:                 \"_CLASSES\" if settings.MIDDLEWARE is None else \"\"\n   22              )\n   23          )\n   24:         if request.method == 'HEAD' and (request.META.get('REMOTE_ADDR') in settings.INTERNAL_IPS or\n   25                                           (request.user.is_active and request.user.is_staff)):\n   26              response = http.HttpResponse()\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/admindocs/utils.py:\n   86          source % text,\n   87          source_path=thing_being_parsed, destination_path=None,\n   88:         writer_name='html', settings_overrides=overrides,\n   89      )\n   90      return mark_safe(parts['fragment'])\n   ..\n  112              text,\n  113              refuri=(urlbase % (\n  114:                 inliner.document.settings.link_base,\n  115                  text.lower(),\n  116              )),\n  ...\n  126      if content is None:\n  127          content = []\n  128:     context = inliner.document.settings.default_reference_context\n  129      node = docutils.nodes.reference(\n  130          rawtext,\n  131          text,\n  132          refuri=(ROLES[context] % (\n  133:             inliner.document.settings.link_base,\n  134              text.lower(),\n  135          )),\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/admindocs/views.py:\n    5  \n    6  from django.apps import apps\n    7: from django.conf import settings\n    8  from django.contrib import admin\n    9  from django.contrib.admin.views.decorators import staff_member_required\n   ..\n   65              engine = Engine.get_default()\n   66          except ImproperlyConfigured:\n   67:             # Non-trivial TEMPLATES settings aren't supported (#24125).\n   68              pass\n   69          else:\n   ..\n   99              engine = Engine.get_default()\n  100          except ImproperlyConfigured:\n  101:             # Non-trivial TEMPLATES settings aren't supported (#24125).\n  102              pass\n  103          else:\n  ...\n  140      def get_context_data(self, **kwargs):\n  141          views = []\n  142:         urlconf = import_module(settings.ROOT_URLCONF)\n  143          view_functions = extract_views_from_urlpatterns(urlconf.urlpatterns)\n  144          for (func, regex, namespace, name) in view_functions:\n  ...\n  351              default_engine = Engine.get_default()\n  352          except ImproperlyConfigured:\n  353:             # Non-trivial TEMPLATES settings aren't supported (#24125).\n  354              pass\n  355          else:\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/auth/__init__.py:\n    3  \n    4  from django.apps import apps as django_apps\n    5: from django.conf import settings\n    6  from django.core.exceptions import ImproperlyConfigured, PermissionDenied\n    7  from django.middleware.csrf import rotate_token\n    .\n   24  def _get_backends(return_tuples=False):\n   25      backends = []\n   26:     for backend_path in settings.AUTHENTICATION_BACKENDS:\n   27          backend = load_backend(backend_path)\n   28          backends.append((backend, backend_path) if return_tuples else backend)\n   ..\n  161      \"\"\"\n  162      try:\n  163:         return django_apps.get_model(settings.AUTH_USER_MODEL)\n  164      except ValueError:\n  165          raise ImproperlyConfigured(\"AUTH_USER_MODEL must be of the form 'app_label.model_name'\")\n  166      except LookupError:\n  167          raise ImproperlyConfigured(\n  168:             \"AUTH_USER_MODEL refers to model '%s' that has not been installed\" % settings.AUTH_USER_MODEL\n  169          )\n  170  \n  ...\n  183          pass\n  184      else:\n  185:         if backend_path in settings.AUTHENTICATION_BACKENDS:\n  186              backend = load_backend(backend_path)\n  187              user = backend.get_user(user_id)\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/auth/admin.py:\n    1: from django.conf import settings\n    2  from django.conf.urls import url\n    3  from django.contrib import admin, messages\n    .\n  108          # permission.\n  109          if not self.has_change_permission(request):\n  110:             if self.has_add_permission(request) and settings.DEBUG:\n  111                  # Raise Http404 in debug mode so that the user gets a helpful\n  112                  # error message.\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/auth/backends.py:\n    7  class ModelBackend(object):\n    8      \"\"\"\n    9:     Authenticates against settings.AUTH_USER_MODEL.\n   10      \"\"\"\n   11  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/auth/checks.py:\n    5  \n    6  from django.apps import apps\n    7: from django.conf import settings\n    8  from django.core import checks\n    9  from django.utils import six\n   ..\n   14  def check_user_model(app_configs=None, **kwargs):\n   15      if app_configs is None:\n   16:         cls = apps.get_model(settings.AUTH_USER_MODEL)\n   17      else:\n   18:         app_label, model_name = settings.AUTH_USER_MODEL.split('.')\n   19          for app_config in app_configs:\n   20              if app_config.label == app_label:\n   ..\n   52      # Check that the username field is unique\n   53      if not cls._meta.get_field(cls.USERNAME_FIELD).unique:\n   54:         if (settings.AUTHENTICATION_BACKENDS ==\n   55                  ['django.contrib.auth.backends.ModelBackend']):\n   56              errors.append(\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/auth/decorators.py:\n    1  from functools import wraps\n    2  \n    3: from django.conf import settings\n    4  from django.contrib.auth import REDIRECT_FIELD_NAME\n    5  from django.core.exceptions import PermissionDenied\n    .\n   23                  return view_func(request, *args, **kwargs)\n   24              path = request.build_absolute_uri()\n   25:             resolved_login_url = resolve_url(login_url or settings.LOGIN_URL)\n   26              # If the login url is the same scheme and net location then just\n   27              # use the path as the \"next\" url.\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/auth/hashers.py:\n    8  from collections import OrderedDict\n    9  \n   10: from django.conf import settings\n   11  from django.core.exceptions import ImproperlyConfigured\n   12  from django.core.signals import setting_changed\n   ..\n   88  def get_hashers():\n   89      hashers = []\n   90:     for hasher_path in settings.PASSWORD_HASHERS:\n   91          hasher_cls = import_string(hasher_path)\n   92          hasher = hasher_cls()\n   ..\n  116      If algorithm is 'default', the default hasher will be returned.\n  117      This function will also lazy import hashers specified in your\n  118:     settings file if needed.\n  119      \"\"\"\n  120      if hasattr(algorithm, 'algorithm'):\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/auth/middleware.py:\n    1: from django.conf import settings\n    2  from django.contrib import auth\n    3  from django.contrib.auth import load_backend\n    .\n   21              \"'django.contrib.sessions.middleware.SessionMiddleware' before \"\n   22              \"'django.contrib.auth.middleware.AuthenticationMiddleware'.\"\n   23:         ) % (\"_CLASSES\" if settings.MIDDLEWARE is None else \"\")\n   24          request.user = SimpleLazyObject(lambda: get_user(request))\n   25  \n   ..\n   31      caused the \"Vary: Cookie\" header on all responses.\n   32  \n   33:     It's now a shim to allow a single settings file to more easily support\n   34      multiple versions of Django. Will be RemovedInDjango20Warning.\n   35      \"\"\"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/auth/mixins.py:\n    1: from django.conf import settings\n    2  from django.contrib.auth import REDIRECT_FIELD_NAME\n    3  from django.contrib.auth.views import redirect_to_login\n    .\n   21          Override this method to override the login_url attribute.\n   22          \"\"\"\n   23:         login_url = self.login_url or settings.LOGIN_URL\n   24          if not login_url:\n   25              raise ImproperlyConfigured(\n   26:                 '{0} is missing the login_url attribute. Define {0}.login_url, settings.LOGIN_URL, or override '\n   27                  '{0}.get_login_url().'.format(self.__class__.__name__)\n   28              )\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/auth/password_validation.py:\n    6  from difflib import SequenceMatcher\n    7  \n    8: from django.conf import settings\n    9  from django.core.exceptions import ImproperlyConfigured, ValidationError\n   10  from django.utils import lru_cache\n   ..\n   20  @lru_cache.lru_cache(maxsize=None)\n   21  def get_default_password_validators():\n   22:     return get_password_validators(settings.AUTH_PASSWORD_VALIDATORS)\n   23  \n   24  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/auth/tokens.py:\n    1  from datetime import date\n    2  \n    3: from django.conf import settings\n    4  from django.utils import six\n    5  from django.utils.crypto import constant_time_compare, salted_hmac\n    .\n   41  \n   42          # Check the timestamp is within limit\n   43:         if (self._num_days(self._today()) - ts) > settings.PASSWORD_RESET_TIMEOUT_DAYS:\n   44              return False\n   45  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/auth/views.py:\n    2  import warnings\n    3  \n    4: from django.conf import settings\n    5  # Avoid shadowing the login() and logout() views below.\n    6  from django.contrib.auth import (\n    .\n   52      # Ensure the user-originating redirection URL is safe.\n   53      if not is_safe_url(url=redirect_to, host=request.get_host()):\n   54:         return resolve_url(settings.LOGIN_REDIRECT_URL)\n   55      return redirect_to\n   56  \n   ..\n  112      if next_page is not None:\n  113          next_page = resolve_url(next_page)\n  114:     elif settings.LOGOUT_REDIRECT_URL:\n  115:         next_page = resolve_url(settings.LOGOUT_REDIRECT_URL)\n  116  \n  117      if (redirect_field_name in request.POST or\n  ...\n  145      \"\"\"\n  146      if not login_url:\n  147:         login_url = settings.LOGIN_URL\n  148      login_url = resolve_url(login_url)\n  149      return logout(request, login_url, extra_context=extra_context)\n  ...\n  155      Redirects the user to the login page, passing the given 'next' page\n  156      \"\"\"\n  157:     resolved_url = resolve_url(login_url or settings.LOGIN_URL)\n  158  \n  159      login_url_parts = list(urlparse(resolved_url))\n  ...\n  287                              extra_context=None):\n  288      context = {\n  289:         'login_url': resolve_url(settings.LOGIN_URL),\n  290          'title': _('Password reset complete'),\n  291      }\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/auth/tests/utils.py:\n    2  from unittest import skipIf\n    3  \n    4: from django.conf import settings\n    5  from django.utils.deprecation import RemovedInDjango20Warning\n    6  \n    .\n   14          RemovedInDjango20Warning, stacklevel=2)\n   15  \n   16:     return skipIf(settings.AUTH_USER_MODEL != 'auth.User', 'Custom user model in use')(test_func)\n   17  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/flatpages/forms.py:\n    1  from django import forms\n    2: from django.conf import settings\n    3  from django.contrib.flatpages.models import FlatPage\n    4  from django.utils.translation import ugettext, ugettext_lazy as _\n    .\n   30                  code='missing_leading_slash',\n   31              )\n   32:         if (settings.APPEND_SLASH and (\n   33:                 (settings.MIDDLEWARE and 'django.middleware.common.CommonMiddleware' in settings.MIDDLEWARE) or\n   34:                 'django.middleware.common.CommonMiddleware' in settings.MIDDLEWARE_CLASSES) and\n   35                  not url.endswith('/')):\n   36              raise forms.ValidationError(\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/flatpages/middleware.py:\n    1: from django.conf import settings\n    2  from django.contrib.flatpages.views import flatpage\n    3  from django.http import Http404\n    .\n   16              return response\n   17          except Exception:\n   18:             if settings.DEBUG:\n   19                  raise\n   20              return response\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/flatpages/views.py:\n    1: from django.conf import settings\n    2  from django.contrib.flatpages.models import FlatPage\n    3  from django.contrib.sites.shortcuts import get_current_site\n    .\n   37          f = get_object_or_404(FlatPage, url=url, sites=site_id)\n   38      except Http404:\n   39:         if not url.endswith('/') and settings.APPEND_SLASH:\n   40              url += '/'\n   41              f = get_object_or_404(FlatPage, url=url, sites=site_id)\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/flatpages/templatetags/flatpages.py:\n    1  from django import template\n    2: from django.conf import settings\n    3  from django.contrib.flatpages.models import FlatPage\n    4  from django.contrib.sites.shortcuts import get_current_site\n    .\n   23              site_pk = get_current_site(context['request']).pk\n   24          else:\n   25:             site_pk = settings.SITE_ID\n   26          flatpages = FlatPage.objects.filter(sites__id=site_pk)\n   27          # If a prefix was specified, add a filter\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/gis/shortcuts.py:\n    2  from io import BytesIO\n    3  \n    4: from django.conf import settings\n    5  from django.http import HttpResponse\n    6  from django.template import loader\n    .\n   17      kmz = BytesIO()\n   18      zf = zipfile.ZipFile(kmz, 'a', zipfile.ZIP_DEFLATED)\n   19:     zf.writestr('doc.kml', kml.encode(settings.DEFAULT_CHARSET))\n   20      zf.close()\n   21      kmz.seek(0)\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/gis/admin/options.py:\n   10  class GeoModelAdmin(ModelAdmin):\n   11      \"\"\"\n   12:     The administration options class for Geographic models. Map settings\n   13      may be overloaded from their defaults to create custom maps.\n   14      \"\"\"\n   15:     # The default map settings that may be overloaded -- still subject\n   16      # to API changes.\n   17      default_lon = 0\n   ..\n   75          \"\"\"\n   76          Returns a subclass of the OpenLayersWidget (or whatever was specified\n   77:         in the `widget` attribute) using the settings from the attributes set\n   78          in this class.\n   79          \"\"\"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/gis/admin/widgets.py:\n    7  from django.utils import six, translation\n    8  \n    9: # Creating a template context that contains Django settings\n   10  # values needed by admin map templates.\n   11  geo_context = {'LANGUAGE_BIDI': translation.get_language_bidi()}\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/gis/db/backends/postgis/operations.py:\n    1  import re\n    2  \n    3: from django.conf import settings\n    4  from django.contrib.gis.db.backends.base.operations import \\\n    5      BaseSpatialOperations\n    .\n  207          # comprising user-supplied values for the major, minor, and\n  208          # subminor revision of PostGIS.\n  209:         if hasattr(settings, 'POSTGIS_VERSION'):\n  210:             version = settings.POSTGIS_VERSION\n  211          else:\n  212              # Run a basic query to check the status of the connection so we're\n  ...\n  223                      'GeoDjango requires at least PostGIS version 2.0. '\n  224                      'Was the database created from a spatial database '\n  225:                     'template?' % self.connection.settings_dict['NAME']\n  226                  )\n  227              version = vtup[1:]\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/gis/db/backends/spatialite/base.py:\n    2  from ctypes.util import find_library\n    3  \n    4: from django.conf import settings\n    5  from django.core.exceptions import ImproperlyConfigured\n    6  from django.db.backends.sqlite3.base import (\n    .\n   29          # (`libspatialite`). If it's not in the system library path (e.g., it\n   30          # cannot be found by `ctypes.util.find_library`), then it may be set\n   31:         # manually in the settings via the `SPATIALITE_LIBRARY_PATH` setting.\n   32:         self.spatialite_lib = getattr(settings, 'SPATIALITE_LIBRARY_PATH',\n   33                                        find_library('spatialite'))\n   34          if not self.spatialite_lib:\n   35              raise ImproperlyConfigured('Unable to locate the SpatiaLite library. '\n   36                                         'Make sure it is in your library path, or set '\n   37:                                        'SPATIALITE_LIBRARY_PATH in your settings.'\n   38                                         )\n   39          super(DatabaseWrapper, self).__init__(*args, **kwargs)\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/gis/db/backends/spatialite/operations.py:\n  115                  'Cannot determine the SpatiaLite version for the \"%s\" '\n  116                  'database (error was \"%s\").  Was the SpatiaLite initialization '\n  117:                 'SQL loaded on this database?') % (self.connection.settings_dict['NAME'], msg)\n  118              six.reraise(ImproperlyConfigured, ImproperlyConfigured(new_msg), sys.exc_info()[2])\n  119          if version < (3, 0, 0):\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/gis/db/models/query.py:\n  396          return procedure_args, geo_field\n  397  \n  398:     def _spatial_attribute(self, att, settings, field_name=None, model_att=None):\n  399          \"\"\"\n  400          DRY routine for calling a spatial stored procedure on a geometry column\n  ...\n  406            SQL function to call.\n  407  \n  408:          settings:\n  409:           Dictionary of internal settings to customize for the spatial procedure.\n  410  \n  411          Public Keyword Arguments:\n  ...\n  425              RemovedInDjango20Warning, stacklevel=2\n  426          )\n  427:         # Default settings.\n  428:         settings.setdefault('desc', None)\n  429:         settings.setdefault('geom_args', ())\n  430:         settings.setdefault('geom_field', None)\n  431:         settings.setdefault('procedure_args', {})\n  432:         settings.setdefault('procedure_fmt', '%(geo_col)s')\n  433:         settings.setdefault('select_params', [])\n  434  \n  435          connection = connections[self.db]\n  436  \n  437          # Performing setup for the spatial column, unless told not to.\n  438:         if settings.get('setup', True):\n  439              default_args, geo_field = self._spatial_setup(\n  440:                 att, desc=settings['desc'], field_name=field_name,\n  441:                 geo_field_type=settings.get('geo_field_type'))\n  442              for k, v in six.iteritems(default_args):\n  443:                 settings['procedure_args'].setdefault(k, v)\n  444          else:\n  445:             geo_field = settings['geo_field']\n  446  \n  447          # The attribute to attach to the model.\n  ...\n  450  \n  451          # Special handling for any argument that is a geometry.\n  452:         for name in settings['geom_args']:\n  453              # Using the field's get_placeholder() routine to get any needed\n  454              # transformation SQL.\n  455:             geom = geo_field.get_prep_value(settings['procedure_args'][name])\n  456              params = geo_field._get_db_prep_lookup('contains', geom, connection=connection)\n  457              geom_placeholder = geo_field.get_placeholder(geom, None, connection)\n  ...\n  461              old_fmt = '%%(%s)s' % name\n  462              new_fmt = geom_placeholder % '%%s'\n  463:             settings['procedure_fmt'] = settings['procedure_fmt'].replace(old_fmt, new_fmt)\n  464:             settings['select_params'].extend(params)\n  465  \n  466          # Getting the format for the stored procedure.\n  467:         fmt = '%%(function)s(%s)' % settings['procedure_fmt']\n  468  \n  469          # If the result of this function needs to be converted.\n  470:         if settings.get('select_field'):\n  471:             select_field = settings['select_field']\n  472              if connection.ops.oracle:\n  473                  select_field.empty_strings_allowed = False\n  ...\n  479          # arguments.\n  480          self.query.add_annotation(\n  481:             RawSQL(fmt % settings['procedure_args'], settings['select_params'], select_field),\n  482              model_att)\n  483          return self\n  ...\n  620                          procedure_args.update({'function': backend.length3d})\n  621  \n  622:         # Setting up the settings for `_spatial_attribute`.\n  623          s = {'select_field': DistanceField(dist_att),\n  624               'setup': False,\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/gis/forms/widgets.py:\n    3  import logging\n    4  \n    5: from django.conf import settings\n    6  from django.contrib.gis import gdal\n    7  from django.contrib.gis.geos import GEOSException, GEOSGeometry\n    .\n   69              serialized=self.serialize(value),\n   70              geom_type=gdal.OGRGeomType(self.attrs['geom_type']),\n   71:             STATIC_URL=settings.STATIC_URL,\n   72              LANGUAGE_BIDI=translation.get_language_bidi(),\n   73          )\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/gis/gdal/__init__.py:\n   23   The GDAL library will be imported from the system path using the default\n   24   library name for the current OS. The default library path may be overridden\n   25:  by setting `GDAL_LIBRARY_PATH` in your settings with the path to the GDAL C\n   26   library on your system.\n   27  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/gis/gdal/libgdal.py:\n   14  # Custom library path set?\n   15  try:\n   16:     from django.conf import settings\n   17:     lib_path = settings.GDAL_LIBRARY_PATH\n   18  except (AttributeError, EnvironmentError,\n   19          ImportError, ImproperlyConfigured):\n   ..\n   42      raise GDALException(\n   43          'Could not find the GDAL library (tried \"%s\"). Try setting '\n   44:         'GDAL_LIBRARY_PATH in your settings.' % '\", \"'.join(lib_names)\n   45      )\n   46  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/gis/geoip/__init__.py:\n   10   downloaded from MaxMind at http://www.maxmind.com/download/geoip/database/.\n   11   Grab GeoIP.dat.gz and GeoLiteCity.dat.gz, and unzip them in the directory\n   12:  corresponding to settings.GEOIP_PATH.\n   13  \"\"\"\n   14  __all__ = ['HAS_GEOIP']\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/gis/geoip/base.py:\n    4  from ctypes import c_char_p\n    5  \n    6: from django.contrib.gis.geoip.libgeoip import GEOIP_SETTINGS\n    7  from django.contrib.gis.geoip.prototypes import (\n    8      GeoIP_country_code_by_addr, GeoIP_country_code_by_name,\n    .\n   63          \"\"\"\n   64          Initializes the GeoIP object, no parameters are required to use default\n   65:         settings.  Keyword arguments may be passed in to customize the locations\n   66          of the GeoIP data sets.\n   67  \n   ..\n   69              to where the city or country data files (*.dat) are located.\n   70              Assumes that both the city and country data sets are located in\n   71:             this directory; overrides the GEOIP_PATH settings attribute.\n   72  \n   73:         * cache: The cache settings when opening up the GeoIP datasets,\n   74              and may be an integer in (0, 1, 2, 4, 8) corresponding to\n   75              the GEOIP_STANDARD, GEOIP_MEMORY_CACHE, GEOIP_CHECK_CACHE,\n   76              GEOIP_INDEX_CACHE, and GEOIP_MMAP_CACHE, `GeoIPOptions` C API\n   77:             settings,  respectively.  Defaults to 0, meaning that the data is read\n   78              from the disk.\n   79  \n   80          * country: The name of the GeoIP country data file.  Defaults to\n   81:             'GeoIP.dat'; overrides the GEOIP_COUNTRY settings attribute.\n   82  \n   83          * city: The name of the GeoIP city data file.  Defaults to\n   84:             'GeoLiteCity.dat'; overrides the GEOIP_CITY settings attribute.\n   85          \"\"\"\n   86  \n   ..\n   99          # Getting the GeoIP data path.\n  100          if not path:\n  101:             path = GEOIP_SETTINGS.get('GEOIP_PATH')\n  102              if not path:\n  103                  raise GeoIPException('GeoIP path must be provided via parameter or the GEOIP_PATH setting.')\n  ...\n  106  \n  107          if os.path.isdir(path):\n  108:             # Constructing the GeoIP database filenames using the settings\n  109              # dictionary.  If the database files for the GeoLite country\n  110              # and/or city datasets exist, then try and open them.\n  111:             country_db = os.path.join(path, country or GEOIP_SETTINGS.get('GEOIP_COUNTRY', 'GeoIP.dat'))\n  112              if os.path.isfile(country_db):\n  113                  self._country = GeoIP_open(force_bytes(country_db), cache)\n  114                  self._country_file = country_db\n  115  \n  116:             city_db = os.path.join(path, city or GEOIP_SETTINGS.get('GEOIP_CITY', 'GeoLiteCity.dat'))\n  117              if os.path.isfile(city_db):\n  118                  self._city = GeoIP_open(force_bytes(city_db), cache)\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/gis/geoip/libgeoip.py:\n    3  from ctypes.util import find_library\n    4  \n    5: from django.conf import settings\n    6  \n    7: # Creating the settings dictionary with any settings, if needed.\n    8: GEOIP_SETTINGS = {key: getattr(settings, key)\n    9                    for key in ('GEOIP_PATH', 'GEOIP_LIBRARY_PATH', 'GEOIP_COUNTRY', 'GEOIP_CITY')\n   10:                   if hasattr(settings, key)}\n   11: lib_path = GEOIP_SETTINGS.get('GEOIP_LIBRARY_PATH')\n   12  \n   13  # The shared library for the GeoIP C API.  May be downloaded\n   ..\n   24  if lib_path is None:\n   25      raise RuntimeError('Could not find the GeoIP library (tried \"%s\"). '\n   26:                        'Try setting GEOIP_LIBRARY_PATH in your settings.' % lib_name)\n   27  lgeoip = CDLL(lib_path)\n   28  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/gis/geoip2/__init__.py:\n   10  downloaded from MaxMind at http://dev.maxmind.com/geoip/geoip2/geolite2/.\n   11  Grab GeoLite2-Country.mmdb.gz and GeoLite2-City.mmdb.gz, and unzip them in the\n   12: directory corresponding to settings.GEOIP_PATH.\n   13  \"\"\"\n   14  __all__ = ['HAS_GEOIP2']\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/gis/geoip2/base.py:\n    4  import geoip2.database\n    5  \n    6: from django.conf import settings\n    7  from django.core.validators import ipv4_re\n    8  from django.utils import six\n    .\n   11  from .resources import City, Country\n   12  \n   13: # Creating the settings dictionary with any settings, if needed.\n   14: GEOIP_SETTINGS = {\n   15:     'GEOIP_PATH': getattr(settings, 'GEOIP_PATH', None),\n   16:     'GEOIP_CITY': getattr(settings, 'GEOIP_CITY', 'GeoLite2-City.mmdb'),\n   17:     'GEOIP_COUNTRY': getattr(settings, 'GEOIP_COUNTRY', 'GeoLite2-Country.mmdb'),\n   18  }\n   19  \n   ..\n   48          \"\"\"\n   49          Initialize the GeoIP object. No parameters are required to use default\n   50:         settings. Keyword arguments may be passed in to customize the locations\n   51          of the GeoIP datasets.\n   52  \n   ..\n   56              this directory; overrides the GEOIP_PATH setting.\n   57  \n   58:         * cache: The cache settings when opening up the GeoIP datasets. May be\n   59              an integer in (0, 1, 2, 4, 8) corresponding to the MODE_AUTO,\n   60              MODE_MMAP_EXT, MODE_MMAP, MODE_FILE, and MODE_MEMORY,\n   61:             `GeoIPOptions` C API settings,  respectively. Defaults to 0,\n   62              meaning MODE_AUTO.\n   63  \n   ..\n   76          # Getting the GeoIP data path.\n   77          if not path:\n   78:             path = GEOIP_SETTINGS['GEOIP_PATH']\n   79              if not path:\n   80                  raise GeoIP2Exception('GeoIP path must be provided via parameter or the GEOIP_PATH setting.')\n   ..\n   83  \n   84          if os.path.isdir(path):\n   85:             # Constructing the GeoIP database filenames using the settings\n   86              # dictionary. If the database files for the GeoLite country\n   87              # and/or city datasets exist, then try to open them.\n   88:             country_db = os.path.join(path, country or GEOIP_SETTINGS['GEOIP_COUNTRY'])\n   89              if os.path.isfile(country_db):\n   90                  self._country = geoip2.database.Reader(country_db, mode=cache)\n   91                  self._country_file = country_db\n   92  \n   93:             city_db = os.path.join(path, city or GEOIP_SETTINGS['GEOIP_CITY'])\n   94              if os.path.isfile(city_db):\n   95                  self._city = geoip2.database.Reader(city_db, mode=cache)\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/gis/geometry/backend/__init__.py:\n    1  from importlib import import_module\n    2  \n    3: from django.conf import settings\n    4  from django.core.exceptions import ImproperlyConfigured\n    5  \n    6: geom_backend = getattr(settings, 'GEOMETRY_BACKEND', 'geos')\n    7  \n    8  try:\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/gis/geos/libgeos.py:\n   23      # Custom library path set?\n   24      try:\n   25:         from django.conf import settings\n   26:         lib_path = settings.GEOS_LIBRARY_PATH\n   27      except (AttributeError, EnvironmentError,\n   28              ImportError, ImproperlyConfigured):\n   ..\n   54          raise ImportError(\n   55              'Could not find the GEOS library (tried \"%s\"). '\n   56:             'Try setting GEOS_LIBRARY_PATH in your settings.' %\n   57              '\", \"'.join(lib_names)\n   58          )\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/gis/maps/google/__init__.py:\n   51     - The `dom_id` property returns the DOM id for the map.  Defaults to \"map\".\n   52  \n   53:   The following attributes may be set or customized in your local settings:\n   54     * GOOGLE_MAPS_API_KEY: String of your Google Maps API key.  These are tied\n   55        to a domain.  May be obtained from https://developers.google.com/maps/\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/gis/maps/google/gmap.py:\n    1  from __future__ import unicode_literals\n    2  \n    3: from django.conf import settings\n    4  from django.contrib.gis.maps.google.overlays import (\n    5      GMarker, GPolygon, GPolyline,\n    .\n   35                   extra_context={}):\n   36  \n   37:         # The Google Maps API Key defined in the settings will be used\n   38          # if not passed in as a parameter.  The use of an API key is\n   39          # _required_.\n   40          if not key:\n   41              try:\n   42:                 self.key = settings.GOOGLE_MAPS_API_KEY\n   43              except AttributeError:\n   44                  raise GoogleMapException(\n   45                      'Google Maps API Key not found (try adding '\n   46:                     'GOOGLE_MAPS_API_KEY to your settings).'\n   47                  )\n   48          else:\n   ..\n   52          # this is not necessarily the most stable.\n   53          if not version:\n   54:             self.version = getattr(settings, 'GOOGLE_MAPS_API_VERSION', '2.x')\n   55          else:\n   56              self.version = version\n   ..\n   58          # Can specify the API URL in the `api_url` keyword.\n   59          if not api_url:\n   60:             self.api_url = getattr(settings, 'GOOGLE_MAPS_URL', GOOGLE_MAPS_URL) % self.version\n   61          else:\n   62              self.api_url = api_url\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/gis/maps/google/overlays.py:\n  128          self.points = self.latlng_from_coords(poly.shell.coords)\n  129  \n  130:         # Stroke settings.\n  131          self.stroke_color, self.stroke_opacity, self.stroke_weight = stroke_color, stroke_opacity, stroke_weight\n  132  \n  133:         # Fill settings.\n  134          self.fill_color, self.fill_opacity = fill_color, fill_opacity\n  135  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/gis/templates/gis/admin/openlayers.js:\n  107  };\n  108  {{ module }}.init = function(){\n  109:     {% block map_options %}// The options hash, w/ zoom, resolution, and projection settings.\n  110      var options = {\n  111  {% autoescape off %}{% for item in map_options.items %}      '{{ item.0 }}' : {{ item.1 }}{% if not forloop.last %},{% endif %}\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/gis/utils/__init__.py:\n   11      from django.core.exceptions import ImproperlyConfigured\n   12      try:\n   13:         # LayerMapping requires DJANGO_SETTINGS_MODULE to be set,\n   14          # so this needs to be in try/except.\n   15          from django.contrib.gis.utils.layermapping import LayerMapping, LayerMapError  # NOQA\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/humanize/templatetags/humanize.py:\n    7  \n    8  from django import template\n    9: from django.conf import settings\n   10  from django.template import defaultfilters\n   11  from django.utils.encoding import force_text\n   ..\n   41      For example, 3000 becomes '3,000' and 45000 becomes '45,000'.\n   42      \"\"\"\n   43:     if settings.USE_L10N and use_l10n:\n   44          try:\n   45              if not isinstance(value, (float, Decimal)):\n   ..\n  124          Use the i18n enabled defaultfilters.floatformat if possible\n  125          \"\"\"\n  126:         if settings.USE_L10N:\n  127              value = defaultfilters.floatformat(value, 1)\n  128              template = string_formatted\n  ...\n  162      For date values that are tomorrow, today or yesterday compared to\n  163      present day returns representing string. Otherwise, returns a string\n  164:     formatted according to settings.DATE_FORMAT.\n  165      \"\"\"\n  166      try:\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/messages/middleware.py:\n    1: from django.conf import settings\n    2  from django.contrib.messages.storage import default_storage\n    3  from django.utils.deprecation import MiddlewareMixin\n    .\n   23          if hasattr(request, '_messages'):\n   24              unstored_messages = request._messages.update(response)\n   25:             if unstored_messages and settings.DEBUG:\n   26                  raise ValueError('Not all temporary messages could be stored.')\n   27          return response\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/messages/utils.py:\n    1: from django.conf import settings\n    2  from django.contrib.messages import constants\n    3  \n    .\n    8      \"\"\"\n    9      level_tags = constants.DEFAULT_TAGS.copy()\n   10:     level_tags.update(getattr(settings, 'MESSAGE_TAGS', {}))\n   11      return level_tags\n   12  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/messages/storage/__init__.py:\n    1: from django.conf import settings\n    2  from django.utils.module_loading import import_string\n    3  \n    .\n    7      Callable with the same interface as the storage classes.\n    8  \n    9:     This isn't just default_storage = import_string(settings.MESSAGE_STORAGE)\n   10:     to avoid accessing the settings at the module level.\n   11      \"\"\"\n   12:     return import_string(settings.MESSAGE_STORAGE)(request)\n   13  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/messages/storage/base.py:\n    1  from __future__ import unicode_literals\n    2  \n    3: from django.conf import settings\n    4  from django.contrib.messages import constants, utils\n    5  from django.utils.encoding import force_text, python_2_unicode_compatible\n    .\n  168          \"\"\"\n  169          if not hasattr(self, '_level'):\n  170:             self._level = getattr(settings, 'MESSAGE_LEVEL', constants.INFO)\n  171          return self._level\n  172  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/messages/storage/cookie.py:\n    1  import json\n    2  \n    3: from django.conf import settings\n    4  from django.contrib.messages.storage.base import BaseStorage, Message\n    5  from django.http import SimpleCookie\n    .\n   85              response.set_cookie(\n   86                  self.cookie_name, encoded_data,\n   87:                 domain=settings.SESSION_COOKIE_DOMAIN,\n   88:                 secure=settings.SESSION_COOKIE_SECURE or None,\n   89:                 httponly=settings.SESSION_COOKIE_HTTPONLY or None,\n   90              )\n   91          else:\n   92:             response.delete_cookie(self.cookie_name, domain=settings.SESSION_COOKIE_DOMAIN)\n   93  \n   94      def _store(self, messages, response, remove_oldest=True, *args, **kwargs):\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/messages/storage/session.py:\n    1  import json\n    2  \n    3: from django.conf import settings\n    4  from django.contrib.messages.storage.base import BaseStorage\n    5  from django.contrib.messages.storage.cookie import (\n    .\n   19              \"message storage requires session middleware to be installed, \"\\\n   20              \"and come before the message middleware in the \"\\\n   21:             \"MIDDLEWARE%s list.\" % (\"_CLASSES\" if settings.MIDDLEWARE is None else \"\")\n   22          super(SessionStorage, self).__init__(request, *args, **kwargs)\n   23  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/redirects/middleware.py:\n    3  from django import http\n    4  from django.apps import apps\n    5: from django.conf import settings\n    6  from django.contrib.redirects.models import Redirect\n    7  from django.contrib.sites.shortcuts import get_current_site\n    .\n   36          except Redirect.DoesNotExist:\n   37              pass\n   38:         if r is None and settings.APPEND_SLASH and not request.path.endswith('/'):\n   39              try:\n   40                  r = Redirect.objects.get(\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/sessions/middleware.py:\n    2  from importlib import import_module\n    3  \n    4: from django.conf import settings\n    5  from django.contrib.sessions.backends.base import UpdateError\n    6  from django.core.exceptions import SuspiciousOperation\n    .\n   13      def __init__(self, get_response=None):\n   14          self.get_response = get_response\n   15:         engine = import_module(settings.SESSION_ENGINE)\n   16          self.SessionStore = engine.SessionStore\n   17  \n   18      def process_request(self, request):\n   19:         session_key = request.COOKIES.get(settings.SESSION_COOKIE_NAME)\n   20          request.session = self.SessionStore(session_key)\n   21  \n   ..\n   35              # First check if we need to delete this cookie.\n   36              # The session should be deleted only if the session is entirely empty\n   37:             if settings.SESSION_COOKIE_NAME in request.COOKIES and empty:\n   38                  response.delete_cookie(\n   39:                     settings.SESSION_COOKIE_NAME,\n   40:                     path=settings.SESSION_COOKIE_PATH,\n   41:                     domain=settings.SESSION_COOKIE_DOMAIN,\n   42                  )\n   43              else:\n   44                  if accessed:\n   45                      patch_vary_headers(response, ('Cookie',))\n   46:                 if (modified or settings.SESSION_SAVE_EVERY_REQUEST) and not empty:\n   47                      if request.session.get_expire_at_browser_close():\n   48                          max_age = None\n   ..\n   64                              )\n   65                          response.set_cookie(\n   66:                             settings.SESSION_COOKIE_NAME,\n   67                              request.session.session_key, max_age=max_age,\n   68:                             expires=expires, domain=settings.SESSION_COOKIE_DOMAIN,\n   69:                             path=settings.SESSION_COOKIE_PATH,\n   70:                             secure=settings.SESSION_COOKIE_SECURE or None,\n   71:                             httponly=settings.SESSION_COOKIE_HTTPONLY or None,\n   72                          )\n   73          return response\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/sessions/backends/base.py:\n    6  from datetime import datetime, timedelta\n    7  \n    8: from django.conf import settings\n    9  from django.contrib.sessions.exceptions import SuspiciousSession\n   10  from django.core.exceptions import SuspiciousOperation\n   ..\n   49          self.accessed = False\n   50          self.modified = False\n   51:         self.serializer = import_string(settings.SESSION_SERIALIZER)\n   52  \n   53      def __contains__(self, key):\n   ..\n  229  \n  230          if not expiry:   # Checks both None and 0 cases\n  231:             return settings.SESSION_COOKIE_AGE\n  232          if not isinstance(expiry, datetime):\n  233              return expiry\n  ...\n  254              return expiry\n  255          if not expiry:   # Checks both None and 0 cases\n  256:             expiry = settings.SESSION_COOKIE_AGE\n  257          return modification + timedelta(seconds=expiry)\n  258  \n  ...\n  291          \"\"\"\n  292          if self.get('_session_expiry') is None:\n  293:             return settings.SESSION_EXPIRE_AT_BROWSER_CLOSE\n  294          return self.get('_session_expiry') == 0\n  295  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/sessions/backends/cache.py:\n    1: from django.conf import settings\n    2  from django.contrib.sessions.backends.base import (\n    3      CreateError, SessionBase, UpdateError,\n    .\n   16  \n   17      def __init__(self, session_key=None):\n   18:         self._cache = caches[settings.SESSION_CACHE_ALIAS]\n   19          super(SessionStore, self).__init__(session_key)\n   20  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/sessions/backends/cached_db.py:\n    5  import logging\n    6  \n    7: from django.conf import settings\n    8  from django.contrib.sessions.backends.db import SessionStore as DBStore\n    9  from django.core.cache import caches\n   ..\n   22  \n   23      def __init__(self, session_key=None):\n   24:         self._cache = caches[settings.SESSION_CACHE_ALIAS]\n   25          super(SessionStore, self).__init__(session_key)\n   26  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/sessions/backends/file.py:\n    6  import tempfile\n    7  \n    8: from django.conf import settings\n    9  from django.contrib.sessions.backends.base import (\n   10      VALID_KEY_CHARS, CreateError, SessionBase, UpdateError,\n   ..\n   22      def __init__(self, session_key=None):\n   23          self.storage_path = type(self)._get_storage_path()\n   24:         self.file_prefix = settings.SESSION_COOKIE_NAME\n   25          super(SessionStore, self).__init__(session_key)\n   26  \n   ..\n   30              return cls._storage_path\n   31          except AttributeError:\n   32:             storage_path = getattr(settings, \"SESSION_FILE_PATH\", None)\n   33              if not storage_path:\n   34                  storage_path = tempfile.gettempdir()\n   ..\n   65          \"\"\"\n   66          modification = os.stat(self._key_to_file()).st_mtime\n   67:         if settings.USE_TZ:\n   68              modification = datetime.datetime.utcfromtimestamp(modification)\n   69              modification = modification.replace(tzinfo=timezone.utc)\n   ..\n   78          expiry = session_data.get('_session_expiry')\n   79          if not expiry:\n   80:             expiry = self._last_modification() + datetime.timedelta(seconds=settings.SESSION_COOKIE_AGE)\n   81          return expiry\n   82  \n   ..\n  199      def clear_expired(cls):\n  200          storage_path = cls._get_storage_path()\n  201:         file_prefix = settings.SESSION_COOKIE_NAME\n  202  \n  203          for session_file in os.listdir(storage_path):\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/sessions/backends/signed_cookies.py:\n    1: from django.conf import settings\n    2  from django.contrib.sessions.backends.base import SessionBase\n    3  from django.core import signing\n    .\n   17                  serializer=self.serializer,\n   18                  # This doesn't handle non-default expiry dates, see #19201\n   19:                 max_age=settings.SESSION_COOKIE_AGE,\n   20                  salt='django.contrib.sessions.backends.signed_cookies',\n   21              )\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/sessions/management/commands/clearsessions.py:\n    1  from importlib import import_module\n    2  \n    3: from django.conf import settings\n    4  from django.core.management.base import BaseCommand\n    5  \n    .\n   12  \n   13      def handle(self, **options):\n   14:         engine = import_module(settings.SESSION_ENGINE)\n   15          try:\n   16              engine.SessionStore.clear_expired()\n   17          except NotImplementedError:\n   18              self.stderr.write(\"Session engine '%s' doesn't support clearing \"\n   19:                               \"expired sessions.\\n\" % settings.SESSION_ENGINE)\n   20  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/sitemaps/__init__.py:\n    1  from django.apps import apps as django_apps\n    2: from django.conf import settings\n    3  from django.core import paginator\n    4  from django.core.exceptions import ImproperlyConfigured\n    .\n   98              urls = []\n   99              current_lang_code = translation.get_language()\n  100:             for lang_code, lang_name in settings.LANGUAGES:\n  101                  translation.activate(lang_code)\n  102                  urls += self._urls(page, protocol, domain)\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/sites/management.py:\n    4  \n    5  from django.apps import apps as global_apps\n    6: from django.conf import settings\n    7  from django.core.management.color import no_style\n    8  from django.db import DEFAULT_DB_ALIAS, connections, router\n    .\n   19  \n   20      if not Site.objects.using(using).exists():\n   21:         # The default settings set SITE_ID = 1, and some tests in Django's test\n   22          # suite rely on this value. However, if database sequences are reused\n   23          # (e.g. in the test suite after flush/syncdb), it isn't guaranteed that\n   ..\n   26          if verbosity >= 2:\n   27              print(\"Creating example.com Site object\")\n   28:         Site(pk=getattr(settings, 'SITE_ID', 1), domain=\"example.com\", name=\"example.com\").save(using=using)\n   29  \n   30          # We set an explicit pk instead of relying on auto-incrementation,\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/sites/managers.py:\n    2  from __future__ import unicode_literals\n    3  \n    4: from django.conf import settings\n    5  from django.core import checks\n    6  from django.core.exceptions import FieldDoesNotExist\n    .\n   62      def get_queryset(self):\n   63          return super(CurrentSiteManager, self).get_queryset().filter(\n   64:             **{self._get_field_name() + '__id': settings.SITE_ID})\n   65  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/sites/models.py:\n   55      def get_current(self, request=None):\n   56          \"\"\"\n   57:         Returns the current Site based on the SITE_ID in the project's settings.\n   58          If SITE_ID isn't defined, it returns the site with domain matching\n   59          request.get_host(). The ``Site`` object is cached the first time it's\n   60          retrieved from the database.\n   61          \"\"\"\n   62:         from django.conf import settings\n   63:         if getattr(settings, 'SITE_ID', ''):\n   64:             site_id = settings.SITE_ID\n   65              return self._get_site_by_id(site_id)\n   66          elif request:\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/staticfiles/finders.py:\n    3  \n    4  from django.apps import apps\n    5: from django.conf import settings\n    6  from django.contrib.staticfiles import utils\n    7  from django.core.exceptions import ImproperlyConfigured\n    .\n   53          # Maps dir paths to an appropriate storage instance\n   54          self.storages = OrderedDict()\n   55:         if not isinstance(settings.STATICFILES_DIRS, (list, tuple)):\n   56              raise ImproperlyConfigured(\n   57                  \"Your STATICFILES_DIRS setting is not a tuple or list; \"\n   58                  \"perhaps you forgot a trailing comma?\")\n   59:         for root in settings.STATICFILES_DIRS:\n   60              if isinstance(root, (list, tuple)):\n   61                  prefix, root = root\n   62              else:\n   63                  prefix = ''\n   64:             if settings.STATIC_ROOT and os.path.abspath(settings.STATIC_ROOT) == os.path.abspath(root):\n   65                  raise ImproperlyConfigured(\n   66                      \"The STATICFILES_DIRS setting should \"\n   ..\n  261  \n  262  def get_finders():\n  263:     for finder_path in settings.STATICFILES_FINDERS:\n  264          yield get_finder(finder_path)\n  265  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/staticfiles/handlers.py:\n    1: from django.conf import settings\n    2  from django.contrib.staticfiles import utils\n    3  from django.contrib.staticfiles.views import serve\n    .\n   22  \n   23      def get_base_url(self):\n   24:         utils.check_settings()\n   25:         return settings.STATIC_URL\n   26  \n   27      def _should_handle(self, path):\n   ..\n   54                  return self.serve(request)\n   55              except Http404 as e:\n   56:                 if settings.DEBUG:\n   57                      from django.views import debug\n   58                      return debug.technical_404_response(request, e)\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/staticfiles/storage.py:\n    8  from collections import OrderedDict\n    9  \n   10: from django.conf import settings\n   11: from django.contrib.staticfiles.utils import check_settings, matches_patterns\n   12  from django.core.cache import (\n   13      InvalidCacheBackendError, cache as default_cache, caches,\n   ..\n   33      def __init__(self, location=None, base_url=None, *args, **kwargs):\n   34          if location is None:\n   35:             location = settings.STATIC_ROOT\n   36          if base_url is None:\n   37:             base_url = settings.STATIC_URL\n   38:         check_settings(base_url)\n   39          super(StaticFilesStorage, self).__init__(location, base_url,\n   40                                                   *args, **kwargs)\n   ..\n  123          Return the real URL in DEBUG mode.\n  124          \"\"\"\n  125:         if settings.DEBUG and not force:\n  126              hashed_name, fragment = name, ''\n  127          else:\n  ...\n  169              # Ignore absolute URLs that don't point to a static file (dynamic\n  170              # CSS / JS?). Note that STATIC_URL cannot be empty.\n  171:             if url.startswith('/') and not url.startswith(settings.STATIC_URL):\n  172                  return matched\n  173  \n  ...\n  177              if url_path.startswith('/'):\n  178                  # Otherwise the condition above would have returned prematurely.\n  179:                 assert url_path.startswith(settings.STATIC_URL)\n  180:                 target_name = url_path[len(settings.STATIC_URL):]\n  181              else:\n  182                  # We're using the posixpath module to mix paths and URLs conveniently.\n  ...\n  249                  # ..to apply each replacement pattern to the content\n  250                  if name in adjustable_paths:\n  251:                     content = original_file.read().decode(settings.FILE_CHARSET)\n  252                      for extension, patterns in iteritems(self._patterns):\n  253                          if matches_patterns(path, (extension,)):\n  ...\n  404  class ConfiguredStorage(LazyObject):\n  405      def _setup(self):\n  406:         self._wrapped = get_storage_class(settings.STATICFILES_STORAGE)()\n  407  \n  408  staticfiles_storage = ConfiguredStorage()\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/staticfiles/urls.py:\n    1: from django.conf import settings\n    2  from django.conf.urls.static import static\n    3  from django.contrib.staticfiles.views import serve\n    .\n   11      \"\"\"\n   12      if prefix is None:\n   13:         prefix = settings.STATIC_URL\n   14      return static(prefix, view=serve)\n   15  \n   16  # Only append if urlpatterns are empty\n   17: if settings.DEBUG and not urlpatterns:\n   18      urlpatterns += staticfiles_urlpatterns()\n   19  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/staticfiles/utils.py:\n    2  import os\n    3  \n    4: from django.conf import settings\n    5  from django.core.exceptions import ImproperlyConfigured\n    6  \n    .\n   42  \n   43  \n   44: def check_settings(base_url=None):\n   45      \"\"\"\n   46:     Checks if the staticfiles settings have sane values.\n   47      \"\"\"\n   48      if base_url is None:\n   49:         base_url = settings.STATIC_URL\n   50      if not base_url:\n   51          raise ImproperlyConfigured(\n   52              \"You're using the staticfiles app \"\n   53              \"without having set the required STATIC_URL setting.\")\n   54:     if settings.MEDIA_URL == base_url:\n   55          raise ImproperlyConfigured(\"The MEDIA_URL and STATIC_URL \"\n   56:                                    \"settings must have different values\")\n   57:     if ((settings.MEDIA_ROOT and settings.STATIC_ROOT) and\n   58:             (settings.MEDIA_ROOT == settings.STATIC_ROOT)):\n   59          raise ImproperlyConfigured(\"The MEDIA_ROOT and STATIC_ROOT \"\n   60:                                    \"settings must have different values\")\n   61  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/staticfiles/views.py:\n    7  import posixpath\n    8  \n    9: from django.conf import settings\n   10  from django.contrib.staticfiles import finders\n   11  from django.http import Http404\n   ..\n   29      It uses the django.views.static.serve() view to serve the found files.\n   30      \"\"\"\n   31:     if not settings.DEBUG and not insecure:\n   32          raise Http404\n   33      normalized_path = posixpath.normpath(unquote(path)).lstrip('/')\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/staticfiles/management/commands/collectstatic.py:\n   18      \"\"\"\n   19      Command that allows to copy or symlink static files from different\n   20:     locations to the settings.STATIC_ROOT.\n   21      \"\"\"\n   22      help = \"Collect static files in a single location.\"\n   ..\n  168          message.append(\n  169              'You have requested to collect static files at the destination\\n'\n  170:             'location as specified in your settings'\n  171          )\n  172  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/staticfiles/management/commands/runserver.py:\n    1: from django.conf import settings\n    2  from django.contrib.staticfiles.handlers import StaticFilesHandler\n    3  from django.core.management.commands.runserver import \\\n    .\n   28          use_static_handler = options['use_static_handler']\n   29          insecure_serving = options['insecure_serving']\n   30:         if use_static_handler and (settings.DEBUG or insecure_serving):\n   31              return StaticFilesHandler(handler)\n   32          return handler\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/contrib/syndication/views.py:\n    3  from calendar import timegm\n    4  \n    5: from django.conf import settings\n    6  from django.contrib.sites.shortcuts import get_current_site\n    7  from django.core.exceptions import ImproperlyConfigured, ObjectDoesNotExist\n    .\n  137              link=link,\n  138              description=self._get_dynamic_attr('description', obj),\n  139:             language=settings.LANGUAGE_CODE,\n  140              feed_url=add_domain(\n  141                  current_site.domain,\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/exceptions.py:\n   57      \"\"\"\n   58      The number of fields in a GET or POST request exceeded\n   59:     settings.DATA_UPLOAD_MAX_NUMBER_FIELDS.\n   60      \"\"\"\n   61      pass\n   ..\n   65      \"\"\"\n   66      The size of the request (excluding any file uploads) exceeded\n   67:     settings.DATA_UPLOAD_MAX_MEMORY_SIZE.\n   68      \"\"\"\n   69      pass\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/signing.py:\n   43  import zlib\n   44  \n   45: from django.conf import settings\n   46  from django.utils import baseconv\n   47  from django.utils.crypto import constant_time_compare, salted_hmac\n   ..\n   80  \n   81  def get_cookie_signer(salt='django.core.signing.get_cookie_signer'):\n   82:     Signer = import_string(settings.SIGNING_BACKEND)\n   83:     key = force_bytes(settings.SECRET_KEY)\n   84      return Signer(b'django.http.cookies' + key, salt=salt)\n   85  \n   ..\n  100      \"\"\"\n  101      Returns URL-safe, sha1 signed base64 compressed JSON string. If key is\n  102:     None, settings.SECRET_KEY is used instead.\n  103  \n  104      If compress is True (not the default) checks if compressing using zlib can\n  ...\n  154      def __init__(self, key=None, sep=':', salt=None):\n  155          # Use of native strings in all versions of Python\n  156:         self.key = key or settings.SECRET_KEY\n  157          self.sep = force_str(sep)\n  158          if _SEP_UNSAFE.match(self.sep):\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/cache/__init__.py:\n   15  from threading import local\n   16  \n   17: from django.conf import settings\n   18  from django.core import signals\n   19  from django.core.cache.backends.base import (\n   ..\n   34          # Try to get the CACHES entry for the given backend name first\n   35          try:\n   36:             conf = settings.CACHES[backend]\n   37          except KeyError:\n   38              try:\n   ..\n   73              pass\n   74  \n   75:         if alias not in settings.CACHES:\n   76              raise InvalidCacheBackendError(\n   77:                 \"Could not find config for '%s' in settings.CACHES\" % alias\n   78              )\n   79  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/cache/backends/db.py:\n    3  from datetime import datetime\n    4  \n    5: from django.conf import settings\n    6  from django.core.cache.backends.base import DEFAULT_TIMEOUT, BaseCache\n    7  from django.db import DatabaseError, connections, models, router, transaction\n    .\n  105              if timeout is None:\n  106                  exp = datetime.max\n  107:             elif settings.USE_TZ:\n  108                  exp = datetime.utcfromtimestamp(timeout)\n  109              else:\n  ...\n  169          table = connection.ops.quote_name(self._table)\n  170  \n  171:         if settings.USE_TZ:\n  172              now = datetime.utcnow()\n  173          else:\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/checks/caches.py:\n    1  from __future__ import unicode_literals\n    2  \n    3: from django.conf import settings\n    4  from django.core.cache import DEFAULT_CACHE_ALIAS\n    5  \n    .\n   14  @register(Tags.caches)\n   15  def check_default_cache_is_configured(app_configs, **kwargs):\n   16:     if DEFAULT_CACHE_ALIAS not in settings.CACHES:\n   17          return [E001]\n   18      return []\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/checks/messages.py:\n   53  \n   54      def is_silenced(self):\n   55:         from django.conf import settings\n   56:         return self.id in settings.SILENCED_SYSTEM_CHECKS\n   57  \n   58  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/checks/templates.py:\n    4  import copy\n    5  \n    6: from django.conf import settings\n    7  from django.utils import six\n    8  \n    .\n   23  def check_setting_app_dirs_loaders(app_configs, **kwargs):\n   24      passed_check = True\n   25:     for conf in settings.TEMPLATES:\n   26          if not conf.get('APP_DIRS'):\n   27              continue\n   ..\n   34  def check_string_if_invalid_is_string(app_configs, **kwargs):\n   35      errors = []\n   36:     for conf in settings.TEMPLATES:\n   37          string_if_invalid = conf.get('OPTIONS', {}).get('string_if_invalid', '')\n   38          if not isinstance(string_if_invalid, six.string_types):\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/checks/urls.py:\n    1  from __future__ import unicode_literals\n    2  \n    3: from django.conf import settings\n    4  from django.utils import six\n    5  \n    .\n    9  @register(Tags.urls)\n   10  def check_url_config(app_configs, **kwargs):\n   11:     if getattr(settings, 'ROOT_URLCONF', None):\n   12          from django.urls import get_resolver\n   13          resolver = get_resolver()\n   ..\n   96      \"\"\"\n   97      regex_pattern = pattern.regex.pattern\n   98:     if not settings.APPEND_SLASH:\n   99          # Skip check as it can be useful to start a URL pattern with a slash\n  100          # when APPEND_SLASH=False.\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/checks/utils.py:\n    1  import copy\n    2  \n    3: from django.conf import settings\n    4  \n    5  \n    6  def patch_middleware_message(error):\n    7:     if settings.MIDDLEWARE is None:\n    8          error = copy.copy(error)\n    9          error.msg = error.msg.replace('MIDDLEWARE', 'MIDDLEWARE_CLASSES')\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/checks/compatibility/django_1_10.py:\n    1  from __future__ import unicode_literals\n    2  \n    3: from django.conf import global_settings, settings\n    4  \n    5  from .. import Tags, Warning, register\n    .\n    7  \n    8  @register(Tags.compatibility)\n    9: def check_duplicate_middleware_settings(app_configs, **kwargs):\n   10:     if settings.MIDDLEWARE is not None and settings.MIDDLEWARE_CLASSES != global_settings.MIDDLEWARE_CLASSES:\n   11          return [Warning(\n   12              \"The MIDDLEWARE_CLASSES setting is deprecated in Django 1.10 \"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/checks/compatibility/django_1_8_0.py:\n    1  from __future__ import unicode_literals\n    2  \n    3: from django.conf import settings\n    4  \n    5  from .. import Tags, Warning, register\n    .\n    7  \n    8  @register(Tags.compatibility)\n    9: def check_duplicate_template_settings(app_configs, **kwargs):\n   10:     if settings.TEMPLATES:\n   11          values = [\n   12              'TEMPLATE_DIRS',\n   ..\n   16              'TEMPLATE_STRING_IF_INVALID',\n   17          ]\n   18:         defined = [value for value in values if getattr(settings, value, None)]\n   19          if defined:\n   20              return [Warning(\n   21:                 \"The standalone TEMPLATE_* settings were deprecated in Django \"\n   22                  \"1.8 and the TEMPLATES dictionary takes precedence. You must \"\n   23:                 \"put the values of the following settings into your default \"\n   24                  \"TEMPLATES dict: %s.\" % \", \".join(defined),\n   25                  id='1_8.W001',\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/checks/security/base.py:\n    1: from django.conf import settings\n    2  \n    3  from .. import Tags, Warning, register\n    .\n   11      \"in your MIDDLEWARE so the SECURE_HSTS_SECONDS, \"\n   12      \"SECURE_CONTENT_TYPE_NOSNIFF, \"\n   13:     \"SECURE_BROWSER_XSS_FILTER, and SECURE_SSL_REDIRECT settings \"\n   14      \"will have no effect.\",\n   15      id='security.W001',\n   ..\n  104  \n  105  def _security_middleware():\n  106:     return (\"django.middleware.security.SecurityMiddleware\" in settings.MIDDLEWARE_CLASSES or\n  107:             settings.MIDDLEWARE and \"django.middleware.security.SecurityMiddleware\" in settings.MIDDLEWARE)\n  108  \n  109  \n  110  def _xframe_middleware():\n  111:     return (\"django.middleware.clickjacking.XFrameOptionsMiddleware\" in settings.MIDDLEWARE_CLASSES or\n  112:             settings.MIDDLEWARE and \"django.middleware.clickjacking.XFrameOptionsMiddleware\" in settings.MIDDLEWARE)\n  113  \n  114  \n  ...\n  127  @register(Tags.security, deploy=True)\n  128  def check_sts(app_configs, **kwargs):\n  129:     passed_check = not _security_middleware() or settings.SECURE_HSTS_SECONDS\n  130      return [] if passed_check else [W004]\n  131  \n  ...\n  135      passed_check = (\n  136          not _security_middleware() or\n  137:         not settings.SECURE_HSTS_SECONDS or\n  138:         settings.SECURE_HSTS_INCLUDE_SUBDOMAINS is True\n  139      )\n  140      return [] if passed_check else [W005]\n  ...\n  145      passed_check = (\n  146          not _security_middleware() or\n  147:         settings.SECURE_CONTENT_TYPE_NOSNIFF is True\n  148      )\n  149      return [] if passed_check else [W006]\n  ...\n  154      passed_check = (\n  155          not _security_middleware() or\n  156:         settings.SECURE_BROWSER_XSS_FILTER is True\n  157      )\n  158      return [] if passed_check else [W007]\n  ...\n  163      passed_check = (\n  164          not _security_middleware() or\n  165:         settings.SECURE_SSL_REDIRECT is True\n  166      )\n  167      return [] if passed_check else [W008]\n  ...\n  171  def check_secret_key(app_configs, **kwargs):\n  172      passed_check = (\n  173:         getattr(settings, 'SECRET_KEY', None) and\n  174:         len(set(settings.SECRET_KEY)) >= SECRET_KEY_MIN_UNIQUE_CHARACTERS and\n  175:         len(settings.SECRET_KEY) >= SECRET_KEY_MIN_LENGTH\n  176      )\n  177      return [] if passed_check else [W009]\n  ...\n  180  @register(Tags.security, deploy=True)\n  181  def check_debug(app_configs, **kwargs):\n  182:     passed_check = not settings.DEBUG\n  183      return [] if passed_check else [W018]\n  184  \n  ...\n  188      passed_check = (\n  189          not _xframe_middleware() or\n  190:         settings.X_FRAME_OPTIONS == 'DENY'\n  191      )\n  192      return [] if passed_check else [patch_middleware_message(W019)]\n  ...\n  195  @register(Tags.security, deploy=True)\n  196  def check_allowed_hosts(app_configs, **kwargs):\n  197:     return [] if settings.ALLOWED_HOSTS else [W020]\n  198  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/checks/security/csrf.py:\n    1: from django.conf import settings\n    2  \n    3  from .. import Tags, Warning, register\n    .\n   31  \n   32  def _csrf_middleware():\n   33:     return (\"django.middleware.csrf.CsrfViewMiddleware\" in settings.MIDDLEWARE_CLASSES or\n   34:             settings.MIDDLEWARE and \"django.middleware.csrf.CsrfViewMiddleware\" in settings.MIDDLEWARE)\n   35  \n   36  \n   ..\n   45      passed_check = (\n   46          not _csrf_middleware() or\n   47:         settings.CSRF_COOKIE_SECURE\n   48      )\n   49      return [] if passed_check else [patch_middleware_message(W016)]\n   ..\n   54      passed_check = (\n   55          not _csrf_middleware() or\n   56:         settings.CSRF_COOKIE_HTTPONLY\n   57      )\n   58      return [] if passed_check else [patch_middleware_message(W017)]\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/checks/security/sessions.py:\n    1: from django.conf import settings\n    2  \n    3  from .. import Tags, Warning, register\n    .\n   67  def check_session_cookie_secure(app_configs, **kwargs):\n   68      errors = []\n   69:     if not settings.SESSION_COOKIE_SECURE:\n   70          if _session_app():\n   71              errors.append(W010)\n   ..\n   80  def check_session_cookie_httponly(app_configs, **kwargs):\n   81      errors = []\n   82:     if not settings.SESSION_COOKIE_HTTPONLY:\n   83          if _session_app():\n   84              errors.append(W013)\n   ..\n   91  \n   92  def _session_middleware():\n   93:     return (\"django.contrib.sessions.middleware.SessionMiddleware\" in settings.MIDDLEWARE_CLASSES or\n   94:             settings.MIDDLEWARE and \"django.contrib.sessions.middleware.SessionMiddleware\" in settings.MIDDLEWARE)\n   95  \n   96  \n   97  def _session_app():\n   98:     return \"django.contrib.sessions\" in settings.INSTALLED_APPS\n   99  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/files/storage.py:\n    4  from datetime import datetime\n    5  \n    6: from django.conf import settings\n    7  from django.core.exceptions import SuspiciousFileOperation\n    8  from django.core.files import File, locks\n    .\n  239      # This function is only needed to help with the deprecations above and can\n  240      # be removed in Django 2.0, RemovedInDjango20Warning.\n  241:     if settings.USE_TZ:\n  242          tz = timezone.get_default_timezone()\n  243          return timezone.make_aware(dt, tz).astimezone(timezone.utc)\n  ...\n  277      @cached_property\n  278      def base_location(self):\n  279:         return self._value_or_setting(self._location, settings.MEDIA_ROOT)\n  280  \n  281      @cached_property\n  ...\n  287          if self._base_url is not None and not self._base_url.endswith('/'):\n  288              self._base_url += '/'\n  289:         return self._value_or_setting(self._base_url, settings.MEDIA_URL)\n  290  \n  291      @cached_property\n  292      def file_permissions_mode(self):\n  293:         return self._value_or_setting(self._file_permissions_mode, settings.FILE_UPLOAD_PERMISSIONS)\n  294  \n  295      @cached_property\n  296      def directory_permissions_mode(self):\n  297:         return self._value_or_setting(self._directory_permissions_mode, settings.FILE_UPLOAD_DIRECTORY_PERMISSIONS)\n  298  \n  299      def _open(self, name, mode='rb'):\n  ...\n  450          otherwise make a naive one in the local timezone.\n  451          \"\"\"\n  452:         if settings.USE_TZ:\n  453              # Safe to use .replace() because UTC doesn't have DST\n  454              return datetime.utcfromtimestamp(ts).replace(tzinfo=timezone.utc)\n  ...\n  467  \n  468  def get_storage_class(import_path=None):\n  469:     return import_string(import_path or settings.DEFAULT_FILE_STORAGE)\n  470  \n  471  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/files/uploadedfile.py:\n    7  from io import BytesIO\n    8  \n    9: from django.conf import settings\n   10  from django.core.files import temp as tempfile\n   11  from django.core.files.base import File\n   ..\n   62      \"\"\"\n   63      def __init__(self, name, content_type, size, charset, content_type_extra=None):\n   64:         if settings.FILE_UPLOAD_TEMP_DIR:\n   65:             file = tempfile.NamedTemporaryFile(suffix='.upload', dir=settings.FILE_UPLOAD_TEMP_DIR)\n   66          else:\n   67              file = tempfile.NamedTemporaryFile(suffix='.upload')\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/files/uploadhandler.py:\n    7  from io import BytesIO\n    8  \n    9: from django.conf import settings\n   10  from django.core.files.uploadedfile import (\n   11      InMemoryUploadedFile, TemporaryUploadedFile,\n   ..\n  167          # Check the content-length header to see if we should\n  168          # If the post is too large, we cannot use the Memory handler.\n  169:         if content_length > settings.FILE_UPLOAD_MAX_MEMORY_SIZE:\n  170              self.activated = False\n  171          else:\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/handlers/base.py:\n    6  import warnings\n    7  \n    8: from django.conf import settings\n    9  from django.core import signals\n   10  from django.core.exceptions import ImproperlyConfigured, MiddlewareNotUsed\n   ..\n   35      def load_middleware(self):\n   36          \"\"\"\n   37:         Populate middleware lists from settings.MIDDLEWARE (or the deprecated\n   38          MIDDLEWARE_CLASSES).\n   39  \n   ..\n   46          self._exception_middleware = []\n   47  \n   48:         if settings.MIDDLEWARE is None:\n   49              warnings.warn(\n   50:                 \"Old-style middleware using settings.MIDDLEWARE_CLASSES is \"\n   51:                 \"deprecated. Update your middleware and use settings.MIDDLEWARE \"\n   52                  \"instead.\", RemovedInDjango20Warning\n   53              )\n   54              handler = convert_exception_to_response(self._legacy_get_response)\n   55:             for middleware_path in settings.MIDDLEWARE_CLASSES:\n   56                  mw_class = import_string(middleware_path)\n   57                  try:\n   58                      mw_instance = mw_class()\n   59                  except MiddlewareNotUsed as exc:\n   60:                     if settings.DEBUG:\n   61                          if six.text_type(exc):\n   62                              logger.debug('MiddlewareNotUsed(%r): %s', middleware_path, exc)\n   ..\n   77          else:\n   78              handler = convert_exception_to_response(self._get_response)\n   79:             for middleware_path in reversed(settings.MIDDLEWARE):\n   80                  middleware = import_string(middleware_path)\n   81                  try:\n   82                      mw_instance = middleware(handler)\n   83                  except MiddlewareNotUsed as exc:\n   84:                     if settings.DEBUG:\n   85                          if six.text_type(exc):\n   86                              logger.debug('MiddlewareNotUsed(%r): %s', middleware_path, exc)\n   ..\n  110          non_atomic_requests = getattr(view, '_non_atomic_requests', set())\n  111          for db in connections.all():\n  112:             if db.settings_dict['ATOMIC_REQUESTS'] and db.alias not in non_atomic_requests:\n  113                  view = transaction.atomic(using=db.alias)(view)\n  114          return view\n  ...\n  120          \"\"\"Return an HttpResponse object for the given HttpRequest.\"\"\"\n  121          # Setup default url resolver for this thread\n  122:         set_urlconf(settings.ROOT_URLCONF)\n  123  \n  124          response = self._middleware_chain(request)\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/handlers/exception.py:\n    6  from functools import wraps\n    7  \n    8: from django.conf import settings\n    9  from django.core import signals\n   10  from django.core.exceptions import PermissionDenied, SuspiciousOperation\n   ..\n   46  def response_for_exception(request, exc):\n   47      if isinstance(exc, Http404):\n   48:         if settings.DEBUG:\n   49              response = debug.technical_404_response(request, exc)\n   50          else:\n   ..\n   73              extra={'status_code': 400, 'request': request},\n   74          )\n   75:         if settings.DEBUG:\n   76              response = debug.technical_500_response(request, *sys.exc_info(), status_code=400)\n   77          else:\n   ..\n  116      generate HTTP 500 responses).\n  117      \"\"\"\n  118:     if settings.DEBUG_PROPAGATE_EXCEPTIONS:\n  119          raise\n  120  \n  ...\n  125      )\n  126  \n  127:     if settings.DEBUG:\n  128          return debug.technical_500_response(request, *exc_info)\n  129  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/handlers/wsgi.py:\n    9  \n   10  from django import http\n   11: from django.conf import settings\n   12  from django.core import signals\n   13  from django.core.handlers import base\n   ..\n  199      set (to anything).\n  200      \"\"\"\n  201:     if settings.FORCE_SCRIPT_NAME is not None:\n  202:         return force_text(settings.FORCE_SCRIPT_NAME)\n  203  \n  204      # If Apache's mod_rewrite had a whack at the URL, Apache set either\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/mail/__init__.py:\n    4  from __future__ import unicode_literals\n    5  \n    6: from django.conf import settings\n    7  # Imported for backwards compatibility and for the sake\n    8  # of a cleaner namespace. These symbols used to be in\n    .\n   29      \"\"\"Load an email backend and return an instance of it.\n   30  \n   31:     If backend is None (default) settings.EMAIL_BACKEND is used.\n   32  \n   33      Both fail_silently and other keyword arguments are used in the\n   34      constructor of the backend.\n   35      \"\"\"\n   36:     klass = import_string(backend or settings.EMAIL_BACKEND)\n   37      return klass(fail_silently=fail_silently, **kwds)\n   38  \n   ..\n   92                  html_message=None):\n   93      \"\"\"Sends a message to the admins, as defined by the ADMINS setting.\"\"\"\n   94:     if not settings.ADMINS:\n   95          return\n   96      mail = EmailMultiAlternatives(\n   97:         '%s%s' % (settings.EMAIL_SUBJECT_PREFIX, subject), message,\n   98:         settings.SERVER_EMAIL, [a[1] for a in settings.ADMINS],\n   99          connection=connection,\n  100      )\n  ...\n  107                    html_message=None):\n  108      \"\"\"Sends a message to the managers, as defined by the MANAGERS setting.\"\"\"\n  109:     if not settings.MANAGERS:\n  110          return\n  111      mail = EmailMultiAlternatives(\n  112:         '%s%s' % (settings.EMAIL_SUBJECT_PREFIX, subject), message,\n  113:         settings.SERVER_EMAIL, [a[1] for a in settings.MANAGERS],\n  114          connection=connection,\n  115      )\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/mail/message.py:\n   17  from io import BytesIO\n   18  \n   19: from django.conf import settings\n   20  from django.core.mail.utils import DNS_NAME\n   21  from django.utils import six\n   ..\n   87  def forbid_multi_line_headers(name, val, encoding):\n   88      \"\"\"Forbids multi-line headers, to prevent header injection.\"\"\"\n   89:     encoding = encoding or settings.DEFAULT_CHARSET\n   90      val = force_text(val)\n   91      if '\\n' in val or '\\r' in val:\n   ..\n  251      content_subtype = 'plain'\n  252      mixed_subtype = 'mixed'\n  253:     encoding = None     # None => use settings default\n  254  \n  255      def __init__(self, subject='', body='', from_email=None, to=None, bcc=None,\n  ...\n  288          else:\n  289              self.reply_to = []\n  290:         self.from_email = from_email or settings.DEFAULT_FROM_EMAIL\n  291          self.subject = subject\n  292          self.body = body\n  ...\n  302  \n  303      def message(self):\n  304:         encoding = self.encoding or settings.DEFAULT_CHARSET\n  305          msg = SafeMIMEText(self.body, self.content_subtype, encoding)\n  306          msg = self._create_message(msg)\n  ...\n  396      def _create_attachments(self, msg):\n  397          if self.attachments:\n  398:             encoding = self.encoding or settings.DEFAULT_CHARSET\n  399              body_msg = msg\n  400              msg = SafeMIMEMultipart(_subtype=self.mixed_subtype, encoding=encoding)\n  ...\n  417          basetype, subtype = mimetype.split('/', 1)\n  418          if basetype == 'text':\n  419:             encoding = self.encoding or settings.DEFAULT_CHARSET\n  420              attachment = SafeMIMEText(content, subtype, encoding)\n  421          elif basetype == 'message' and subtype == 'rfc822':\n  ...\n  495  \n  496      def _create_alternatives(self, msg):\n  497:         encoding = self.encoding or settings.DEFAULT_CHARSET\n  498          if self.alternatives:\n  499              body_msg = msg\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/mail/backends/filebased.py:\n    4  import os\n    5  \n    6: from django.conf import settings\n    7  from django.core.exceptions import ImproperlyConfigured\n    8  from django.core.mail.backends.console import \\\n    .\n   17              self.file_path = kwargs.pop('file_path')\n   18          else:\n   19:             self.file_path = getattr(settings, 'EMAIL_FILE_PATH', None)\n   20          # Make sure self.file_path is a string.\n   21          if not isinstance(self.file_path, six.string_types):\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/mail/backends/smtp.py:\n    4  import threading\n    5  \n    6: from django.conf import settings\n    7  from django.core.mail.backends.base import BaseEmailBackend\n    8  from django.core.mail.message import sanitize_address\n    .\n   19                   **kwargs):\n   20          super(EmailBackend, self).__init__(fail_silently=fail_silently)\n   21:         self.host = host or settings.EMAIL_HOST\n   22:         self.port = port or settings.EMAIL_PORT\n   23:         self.username = settings.EMAIL_HOST_USER if username is None else username\n   24:         self.password = settings.EMAIL_HOST_PASSWORD if password is None else password\n   25:         self.use_tls = settings.EMAIL_USE_TLS if use_tls is None else use_tls\n   26:         self.use_ssl = settings.EMAIL_USE_SSL if use_ssl is None else use_ssl\n   27:         self.timeout = settings.EMAIL_TIMEOUT if timeout is None else timeout\n   28:         self.ssl_keyfile = settings.EMAIL_SSL_KEYFILE if ssl_keyfile is None else ssl_keyfile\n   29:         self.ssl_certfile = settings.EMAIL_SSL_CERTFILE if ssl_certfile is None else ssl_certfile\n   30          if self.use_ssl and self.use_tls:\n   31              raise ValueError(\n   32                  \"EMAIL_USE_TLS/EMAIL_USE_SSL are mutually exclusive, so only set \"\n   33:                 \"one of those settings to True.\")\n   34          self.connection = None\n   35          self._lock = threading.RLock()\n   ..\n  116          if not email_message.recipients():\n  117              return False\n  118:         encoding = email_message.encoding or settings.DEFAULT_CHARSET\n  119          from_email = sanitize_address(email_message.from_email, encoding)\n  120          recipients = [sanitize_address(addr, encoding) for addr in email_message.recipients()]\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/management/__init__.py:\n    9  import django\n   10  from django.apps import apps\n   11: from django.conf import settings\n   12  from django.core.exceptions import ImproperlyConfigured\n   13  from django.core.management.base import (\n   ..\n   51      in that package are registered.\n   52  \n   53:     Core commands are always included. If a settings module has been\n   54      specified, user-defined commands will also be included.\n   55  \n   ..\n   67      commands = {name: 'django.core' for name in find_commands(upath(__path__[0]))}\n   68  \n   69:     if not settings.configured:\n   70          return commands\n   71  \n   ..\n  141          self.argv = argv or sys.argv[:]\n  142          self.prog_name = os.path.basename(self.argv[0])\n  143:         self.settings_exception = None\n  144  \n  145      def main_help_text(self, commands_only=False):\n  ...\n  169                  for name in sorted(commands_dict[app]):\n  170                      usage.append(\"    %s\" % name)\n  171:             # Output an extra note if settings are not properly configured\n  172:             if self.settings_exception is not None:\n  173                  usage.append(style.NOTICE(\n  174                      \"Note that only Django core commands are listed \"\n  175:                     \"as settings are not properly configured (error: %s).\"\n  176:                     % self.settings_exception))\n  177  \n  178          return '\\n'.join(usage)\n  ...\n  189              app_name = commands[subcommand]\n  190          except KeyError:\n  191:             if os.environ.get('DJANGO_SETTINGS_MODULE'):\n  192:                 # If `subcommand` is missing due to misconfigured settings, the\n  193                  # following line will retrigger an ImproperlyConfigured exception\n  194                  # (get_commands() swallows the original one) so the user is\n  195                  # informed about it.\n  196:                 settings.INSTALLED_APPS\n  197              else:\n  198:                 sys.stderr.write(\"No Django settings specified.\\n\")\n  199              sys.stderr.write(\n  200                  \"Unknown command: %r\\nType '%s help' for usage.\\n\"\n  ...\n  259                      options.extend((app_config.label, 0) for app_config in app_configs)\n  260                  except ImportError:\n  261:                     # Fail silently if DJANGO_SETTINGS_MODULE isn't set. The\n  262                      # user will find out once they execute the command.\n  263                      pass\n  ...\n  294              subcommand = 'help'  # Display help if no arguments were given.\n  295  \n  296:         # Preprocess options to extract --settings and --pythonpath.\n  297          # These options could affect the commands that are available, so they\n  298          # must be processed early.\n  299          parser = CommandParser(None, usage=\"%(prog)s subcommand [options] [args]\", add_help=False)\n  300:         parser.add_argument('--settings')\n  301          parser.add_argument('--pythonpath')\n  302          parser.add_argument('args', nargs='*')  # catch-all\n  ...\n  307              pass  # Ignore any option errors at this point.\n  308  \n  309:         no_settings_commands = [\n  310              'help', 'version', '--help', '--version', '-h',\n  311              'compilemessages', 'makemessages',\n  ...\n  314  \n  315          try:\n  316:             settings.INSTALLED_APPS\n  317          except ImproperlyConfigured as exc:\n  318:             self.settings_exception = exc\n  319:             # A handful of built-in management commands work without settings.\n  320:             # Load the default settings -- where INSTALLED_APPS is empty.\n  321:             if subcommand in no_settings_commands:\n  322:                 settings.configure()\n  323  \n  324:         if settings.configured:\n  325              # Start the auto-reloading dev server even if the code is broken.\n  326              # The hardcoded condition is a code smell but we can't rely on a\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/management/base.py:\n   71      user commands.\n   72      \"\"\"\n   73:     if options.settings:\n   74:         os.environ['DJANGO_SETTINGS_MODULE'] = options.settings\n   75      if options.pythonpath:\n   76          sys.path.insert(0, options.pythonpath)\n   ..\n  152      Several attributes affect behavior at various steps along the way:\n  153  \n  154:     ``can_import_settings``\n  155          A boolean indicating whether the command needs to be able to\n  156:         import Django settings; if ``True``, ``execute()`` will verify\n  157          that this is possible before proceeding. Default value is\n  158          ``True``.\n  ...\n  182  \n  183      ``leave_locale_alone``\n  184:         A boolean indicating whether the locale set in settings should be\n  185          preserved during the execution of the command instead of translations\n  186          being deactivated.\n  ...\n  194          permissions) as activating any locale might cause unintended effects.\n  195  \n  196:         This option can't be False when the can_import_settings option is set\n  197          to False too because attempting to deactivate translations needs access\n  198:         to settings. This condition will generate a CommandError.\n  199      \"\"\"\n  200      # Metadata about this command.\n  ...\n  203      # Configuration shortcuts that alter various logic.\n  204      _called_from_command_line = False\n  205:     can_import_settings = True\n  206      output_transaction = False  # Whether to wrap the output in a \"BEGIN; COMMIT;\"\n  207      leave_locale_alone = False\n  ...\n  242          )\n  243          parser.add_argument(\n  244:             '--settings',\n  245              help=(\n  246:                 'The Python path to a settings module, e.g. '\n  247:                 '\"myproject.settings.main\". If this isn\\'t provided, the '\n  248:                 'DJANGO_SETTINGS_MODULE environment variable will be used.'\n  249              ),\n  250          )\n  ...\n  278          \"\"\"\n  279          Set up any environment changes requested (e.g., Python path\n  280:         and Django settings), then run this command. If the\n  281          command raises a ``CommandError``, intercept it and print it sensibly\n  282          to stderr. If the ``--traceback`` option is present or the raised\n  ...\n  323          if not self.leave_locale_alone:\n  324              # Only mess with locales if we can assume we have a working\n  325:             # settings file, because django.utils.translation requires settings\n  326              # (The final saying about whether the i18n machinery is active will be\n  327              # found in the value of the USE_I18N setting)\n  328:             if not self.can_import_settings:\n  329                  raise CommandError(\"Incompatible values of 'leave_locale_alone' \"\n  330:                                    \"(%s) and 'can_import_settings' (%s) command \"\n  331                                     \"options.\" % (self.leave_locale_alone,\n  332:                                                  self.can_import_settings))\n  333              # Deactivate translations, because django-admin creates database\n  334              # content like permissions, and those shouldn't contain any\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/management/color.py:\n   37      style = Style()\n   38  \n   39:     color_settings = termcolors.parse_color_setting(config_string)\n   40  \n   41      # The nocolor palette has all available roles.\n   ..\n   43      # the palette as defined in the environment.\n   44      for role in termcolors.PALETTES[termcolors.NOCOLOR_PALETTE]:\n   45:         if color_settings:\n   46:             format = color_settings.get(role, {})\n   47              style_func = termcolors.make_style(**format)\n   48          else:\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/management/templates.py:\n   35      \"\"\"\n   36      requires_system_checks = False\n   37:     # Can't import settings during this command, because they haven't\n   38      # necessarily been created.\n   39:     can_import_settings = False\n   40      # The supported URL schemes\n   41      url_schemes = ['http', 'https', 'ftp']\n   ..\n  118          }), autoescape=False)\n  119  \n  120:         # Setup a stub settings environment for template rendering\n  121:         from django.conf import settings\n  122:         if not settings.configured:\n  123:             settings.configure()\n  124  \n  125          template_dir = self.handle_template(options['template'],\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/management/commands/check.py:\n   25          parser.add_argument(\n   26              '--deploy', action='store_true', dest='deploy',\n   27:             help='Check deployment settings.',\n   28          )\n   29          parser.add_argument(\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/management/commands/compilemessages.py:\n   63  \n   64          basedirs = [os.path.join('conf', 'locale'), 'locale']\n   65:         if os.environ.get('DJANGO_SETTINGS_MODULE'):\n   66:             from django.conf import settings\n   67:             basedirs.extend(upath(path) for path in settings.LOCALE_PATHS)\n   68  \n   69          # Walk entire tree, looking for locale directories\n   ..\n   79              raise CommandError(\"This script should be run from the Django Git \"\n   80                                 \"checkout or your project or app tree, or with \"\n   81:                                \"the settings module specified.\")\n   82  \n   83          # Build locale list\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/management/commands/createcachetable.py:\n    1: from django.conf import settings\n    2  from django.core.cache import caches\n    3  from django.core.cache.backends.db import BaseDatabaseCache\n    .\n   18          parser.add_argument(\n   19              'args', metavar='table_name', nargs='*',\n   20:             help='Optional table names. Otherwise, settings.CACHES is used to find cache tables.',\n   21          )\n   22          parser.add_argument(\n   ..\n   40                  self.create_table(db, tablename, dry_run)\n   41          else:\n   42:             for cache_alias in settings.CACHES:\n   43                  cache = caches[cache_alias]\n   44                  if isinstance(cache, BaseDatabaseCache):\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/management/commands/diffsettings.py:\n    8  \n    9  class Command(BaseCommand):\n   10:     help = \"\"\"Displays differences between the current settings.py and Django's\n   11:     default settings. Settings that don't appear in the defaults are\n   12      followed by \"###\".\"\"\"\n   13  \n   ..\n   17          parser.add_argument(\n   18              '--all', action='store_true', dest='all', default=False,\n   19:             help='Display all settings, regardless of their value. Default values are prefixed by \"###\".',\n   20          )\n   21  \n   22      def handle(self, **options):\n   23          # Inspired by Postfix's \"postconf -n\".\n   24:         from django.conf import settings, global_settings\n   25  \n   26:         # Because settings are imported lazily, we need to explicitly load them.\n   27:         settings._setup()\n   28  \n   29:         user_settings = module_to_dict(settings._wrapped)\n   30:         default_settings = module_to_dict(global_settings)\n   31  \n   32          output = []\n   33:         for key in sorted(user_settings):\n   34:             if key not in default_settings:\n   35:                 output.append(\"%s = %s  ###\" % (key, user_settings[key]))\n   36:             elif user_settings[key] != default_settings[key]:\n   37:                 output.append(\"%s = %s\" % (key, user_settings[key]))\n   38              elif options['all']:\n   39:                 output.append(\"### %s = %s\" % (key, user_settings[key]))\n   40          return '\\n'.join(output)\n   41  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/management/commands/flush.py:\n   60  Are you sure you want to do this?\n   61  \n   62:     Type 'yes' to continue, or 'no' to cancel: \"\"\" % connection.settings_dict['NAME'])\n   63          else:\n   64              confirm = 'yes'\n   ..\n   79                      \"Hint: Look at the output of 'django-admin sqlflush'. \"\n   80                      \"That's the SQL this command wasn't able to run.\\n\"\n   81:                     \"The full error: %s\") % (connection.settings_dict['NAME'], e)\n   82                  six.reraise(CommandError, CommandError(new_msg), sys.exc_info()[2])\n   83  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/management/commands/loaddata.py:\n    9  \n   10  from django.apps import apps\n   11: from django.conf import settings\n   12  from django.core import serializers\n   13  from django.core.exceptions import ImproperlyConfigured\n   ..\n  265          \"\"\"\n  266          dirs = []\n  267:         fixture_dirs = settings.FIXTURE_DIRS\n  268          if len(fixture_dirs) != len(set(fixture_dirs)):\n  269:             raise ImproperlyConfigured(\"settings.FIXTURE_DIRS contains duplicates.\")\n  270          for app_config in apps.get_app_configs():\n  271              app_label = app_config.label\n  ...\n  274                  raise ImproperlyConfigured(\n  275                      \"'%s' is a default fixture directory for the '%s' app \"\n  276:                     \"and cannot be listed in settings.FIXTURE_DIRS.\" % (app_dir, app_label)\n  277                  )\n  278  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/management/commands/makemessages.py:\n   11  \n   12  import django\n   13: from django.conf import settings\n   14  from django.core.files.temp import NamedTemporaryFile\n   15  from django.core.management.base import BaseCommand, CommandError\n   ..\n  105              return\n  106  \n  107:         with io.open(self.path, 'r', encoding=settings.FILE_CHARSET) as fp:\n  108              src_data = fp.read()\n  109  \n  ...\n  279  \n  280          # Need to ensure that the i18n framework is enabled\n  281:         if settings.configured:\n  282:             settings.USE_I18N = True\n  283          else:\n  284:             settings.configure(USE_I18N=True)\n  285  \n  286          ignore_patterns = options['ignore_patterns']\n  ...\n  333              self.invoked_for_django = True\n  334          else:\n  335:             self.locale_paths.extend(settings.LOCALE_PATHS)\n  336              # Allow to run makemessages inside an app dir\n  337              if os.path.isdir('locale'):\n  ...\n  446  \n  447          all_files = []\n  448:         ignored_roots = [os.path.normpath(p) for p in (settings.MEDIA_ROOT, settings.STATIC_ROOT) if p]\n  449          for dirpath, dirnames, filenames in os.walk(root, topdown=True, followlinks=self.symlinks):\n  450              for dirname in dirnames[:]:\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/management/commands/makemigrations.py:\n    5  \n    6  from django.apps import apps\n    7: from django.conf import settings\n    8  from django.core.management.base import BaseCommand, CommandError\n    9  from django.db import DEFAULT_DB_ALIAS, connections, router\n   ..\n   98          consistency_check_labels = set(config.label for config in apps.get_app_configs())\n   99          # Non-default databases are only checked if database routers used.\n  100:         aliases_to_check = connections if settings.DATABASE_ROUTERS else [DEFAULT_DB_ALIAS]\n  101          for alias in sorted(aliases_to_check):\n  102              connection = connections[alias]\n  103:             if (connection.settings_dict['ENGINE'] != 'django.db.backends.dummy' and any(\n  104                      # At least one model must be migrated to the database.\n  105                      router.allow_migrate(connection.alias, app_label, model_name=model._meta.object_name)\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/management/commands/runserver.py:\n    8  from datetime import datetime\n    9  \n   10: from django.conf import settings\n   11  from django.core.management.base import BaseCommand, CommandError\n   12  from django.core.servers.basehttp import get_internal_wsgi_application, run\n   ..\n   65  \n   66      def handle(self, *args, **options):\n   67:         from django.conf import settings\n   68  \n   69:         if not settings.DEBUG and not settings.ALLOWED_HOSTS:\n   70:             raise CommandError('You must set settings.ALLOWED_HOSTS if DEBUG is False.')\n   71  \n   72          self.use_ipv6 = options['use_ipv6']\n   ..\n  128          self.stdout.write(now)\n  129          self.stdout.write((\n  130:             \"Django version %(version)s, using settings %(settings)r\\n\"\n  131              \"Starting development server at http://%(addr)s:%(port)s/\\n\"\n  132              \"Quit the server with %(quit_command)s.\\n\"\n  133          ) % {\n  134              \"version\": self.get_version(),\n  135:             \"settings\": settings.SETTINGS_MODULE,\n  136              \"addr\": '[%s]' % self.addr if self._raw_ipv6 else self.addr,\n  137              \"port\": self.port,\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/management/commands/sendtestemail.py:\n   17          parser.add_argument(\n   18              '--managers', action='store_true', dest='managers', default=False,\n   19:             help='Send a test email to the addresses specified in settings.MANAGERS.',\n   20          )\n   21          parser.add_argument(\n   22              '--admins', action='store_true', dest='admins', default=False,\n   23:             help='Send a test email to the addresses specified in settings.ADMINS.',\n   24          )\n   25  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/management/commands/squashmigrations.py:\n    1: from django.conf import settings\n    2  from django.core.management.base import BaseCommand, CommandError\n    3  from django.db import DEFAULT_DB_ALIAS, connections, migrations\n    .\n  112              for dependency in smigration.dependencies:\n  113                  if isinstance(dependency, SwappableTuple):\n  114:                     if settings.AUTH_USER_MODEL == dependency.setting:\n  115                          dependencies.add((\"__setting__\", \"AUTH_USER_MODEL\"))\n  116                      else:\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/management/commands/startproject.py:\n   29              )\n   30  \n   31:         # Create a random SECRET_KEY to put it in the main settings.\n   32          options['secret_key'] = get_random_secret_key()\n   33  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/management/commands/test.py:\n    2  import sys\n    3  \n    4: from django.conf import settings\n    5  from django.core.management.base import BaseCommand\n    6  from django.test.utils import get_runner\n    .\n   54          )\n   55  \n   56:         test_runner_class = get_runner(settings, self.test_runner)\n   57  \n   58          if hasattr(test_runner_class, 'add_arguments'):\n   ..\n   60  \n   61      def handle(self, *test_labels, **options):\n   62:         from django.conf import settings\n   63          from django.test.utils import get_runner\n   64  \n   65:         TestRunner = get_runner(settings, options['testrunner'])\n   66  \n   67          if options['liveserver'] is not None:\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/serializers/__init__.py:\n   20  \n   21  from django.apps import apps\n   22: from django.conf import settings\n   23  from django.core.serializers.base import SerializerDoesNotExist\n   24  from django.utils import six\n   ..\n  144  def _load_serializers():\n  145      \"\"\"\n  146:     Register built-in and settings-defined serializers. This is done lazily so\n  147:     that user code has a chance to (e.g.) set up custom settings without\n  148      needing to be careful of import order.\n  149      \"\"\"\n  ...\n  152      for format in BUILTIN_SERIALIZERS:\n  153          register_serializer(format, BUILTIN_SERIALIZERS[format], serializers)\n  154:     if hasattr(settings, \"SERIALIZATION_MODULES\"):\n  155:         for format in settings.SERIALIZATION_MODULES:\n  156:             register_serializer(format, settings.SERIALIZATION_MODULES[format], serializers)\n  157      _serializers = serializers\n  158  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/serializers/python.py:\n    9  \n   10  from django.apps import apps\n   11: from django.conf import settings\n   12  from django.core.serializers import base\n   13  from django.db import DEFAULT_DB_ALIAS, models\n   ..\n  124              if isinstance(field_value, str):\n  125                  field_value = force_text(\n  126:                     field_value, options.get(\"encoding\", settings.DEFAULT_CHARSET), strings_only=True\n  127                  )\n  128  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/serializers/xml_serializer.py:\n   11  \n   12  from django.apps import apps\n   13: from django.conf import settings\n   14  from django.core.serializers import base\n   15  from django.db import DEFAULT_DB_ALIAS, models\n   ..\n   33          Start serialization -- open the XML document and the root element.\n   34          \"\"\"\n   35:         self.xml = SimplerXMLGenerator(self.stream, self.options.get(\"encoding\", settings.DEFAULT_CHARSET))\n   36          self.xml.startDocument()\n   37          self.xml.startElement(\"django-objects\", {\"version\": \"1.0\"})\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/core/servers/basehttp.py:\n   31      \"\"\"\n   32      Loads and returns the WSGI application as configured by the user in\n   33:     ``settings.WSGI_APPLICATION``. With the default ``startproject`` layout,\n   34      this will be the ``application`` object in ``projectname/wsgi.py``.\n   35  \n   ..\n   38      be configured to point to the correct application object directly.\n   39  \n   40:     If settings.WSGI_APPLICATION is not set (is ``None``), we just return\n   41      whatever ``django.core.wsgi.get_wsgi_application`` returns.\n   42      \"\"\"\n   43:     from django.conf import settings\n   44:     app_path = getattr(settings, 'WSGI_APPLICATION')\n   45      if app_path is None:\n   46          return get_wsgi_application()\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/db/__init__.py:\n   19  \n   20  \n   21: # DatabaseWrapper.__init__() takes a dictionary, not a settings module, so we\n   22: # manually create the dictionary from the settings, passing only the settings\n   23  # that the database backends care about.\n   24  # We load all these up for backwards compatibility, you should use\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/db/utils.py:\n    4  from threading import local\n    5  \n    6: from django.conf import settings\n    7  from django.core.exceptions import ImproperlyConfigured\n    8  from django.utils import six\n    .\n  146          \"\"\"\n  147          databases is an optional dictionary of database definitions (structured\n  148:         like settings.DATABASES).\n  149          \"\"\"\n  150          self._databases = databases\n  ...\n  154      def databases(self):\n  155          if self._databases is None:\n  156:             self._databases = settings.DATABASES\n  157          if self._databases == {}:\n  158              self._databases = {\n  ...\n  170      def ensure_defaults(self, alias):\n  171          \"\"\"\n  172:         Puts the defaults into the settings dictionary for a given connection\n  173:         where no settings is provided.\n  174          \"\"\"\n  175          try:\n  ...\n  189              conn.setdefault(setting, '')\n  190  \n  191:     def prepare_test_settings(self, alias):\n  192          \"\"\"\n  193:         Makes sure the test settings are available in the 'TEST' sub-dictionary.\n  194          \"\"\"\n  195          try:\n  ...\n  198              raise ConnectionDoesNotExist(\"The connection %s doesn't exist\" % alias)\n  199  \n  200:         test_settings = conn.setdefault('TEST', {})\n  201          for key in ['CHARSET', 'COLLATION', 'NAME', 'MIRROR']:\n  202:             test_settings.setdefault(key, None)\n  203  \n  204      def __getitem__(self, alias):\n  ...\n  207  \n  208          self.ensure_defaults(alias)\n  209:         self.prepare_test_settings(alias)\n  210          db = self.databases[alias]\n  211          backend = load_backend(db['ENGINE'])\n  ...\n  238      def __init__(self, routers=None):\n  239          \"\"\"\n  240:         If routers is not specified, will default to settings.DATABASE_ROUTERS.\n  241          \"\"\"\n  242          self._routers = routers\n  ...\n  245      def routers(self):\n  246          if self._routers is None:\n  247:             self._routers = settings.DATABASE_ROUTERS\n  248          routers = []\n  249          for r in self._routers:\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/db/backends/utils.py:\n    7  from time import time\n    8  \n    9: from django.conf import settings\n   10  from django.utils.encoding import force_bytes\n   11  from django.utils.timezone import utc\n   ..\n  156      else:\n  157          microseconds = '0'\n  158:     tzinfo = utc if settings.USE_TZ else None\n  159      return datetime.datetime(\n  160          int(dates[0]), int(dates[1]), int(dates[2]),\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/db/backends/base/base.py:\n    5  from contextlib import contextmanager\n    6  \n    7: from django.conf import settings\n    8  from django.core.exceptions import ImproperlyConfigured\n    9  from django.db import DEFAULT_DB_ALIAS\n   ..\n   40      queries_limit = 9000\n   41  \n   42:     def __init__(self, settings_dict, alias=DEFAULT_DB_ALIAS,\n   43                   allow_thread_sharing=False):\n   44          # Connection related attributes.\n   45          # The underlying database connection.\n   46          self.connection = None\n   47:         # `settings_dict` should be a dictionary containing keys such as\n   48:         # NAME, USER, etc. It's called `settings_dict` instead of `settings`\n   49:         # to disambiguate it from Django settings modules.\n   50:         self.settings_dict = settings_dict\n   51          self.alias = alias\n   52          # Query logging in debug mode or when explicitly enabled.\n   ..\n  100          the adapter handles aware datetimes so Django doesn't need to.)\n  101          \"\"\"\n  102:         if not settings.USE_TZ:\n  103              return None\n  104          elif self.features.supports_timezones:\n  105              return None\n  106:         elif self.settings_dict['TIME_ZONE'] is None:\n  107              return timezone.utc\n  108          else:\n  109              # Only this branch requires pytz.\n  110:             return pytz.timezone(self.settings_dict['TIME_ZONE'])\n  111  \n  112      @cached_property\n  ...\n  115          Name of the time zone of the database connection.\n  116          \"\"\"\n  117:         if not settings.USE_TZ:\n  118:             return settings.TIME_ZONE\n  119:         elif self.settings_dict['TIME_ZONE'] is None:\n  120              return 'UTC'\n  121          else:\n  122:             return self.settings_dict['TIME_ZONE']\n  123  \n  124      @property\n  125      def queries_logged(self):\n  126:         return self.force_debug_cursor or settings.DEBUG\n  127  \n  128      @property\n  ...\n  145  \n  146      def init_connection_state(self):\n  147:         \"\"\"Initializes the database connection settings.\"\"\"\n  148          raise NotImplementedError('subclasses of BaseDatabaseWrapper may require an init_connection_state() method')\n  149  \n  ...\n  157          \"\"\"Connects to the database. Assumes that the connection is closed.\"\"\"\n  158          # Check for invalid configurations.\n  159:         self.check_settings()\n  160          # In case the previous connection was closed while in an atomic block\n  161          self.in_atomic_block = False\n  ...\n  163          self.needs_rollback = False\n  164          # Reset parameters defining when to close the connection\n  165:         max_age = self.settings_dict['CONN_MAX_AGE']\n  166          self.close_at = None if max_age is None else time.time() + max_age\n  167          self.closed_in_transaction = False\n  ...\n  170          conn_params = self.get_connection_params()\n  171          self.connection = self.get_new_connection(conn_params)\n  172:         self.set_autocommit(self.settings_dict['AUTOCOMMIT'])\n  173          self.init_connection_state()\n  174          connection_created.send(sender=self.__class__, connection=self)\n  ...\n  176          self.run_on_commit = []\n  177  \n  178:     def check_settings(self):\n  179:         if self.settings_dict['TIME_ZONE'] is not None:\n  180:             if not settings.USE_TZ:\n  181                  raise ImproperlyConfigured(\n  182                      \"Connection '%s' cannot set TIME_ZONE because USE_TZ is \"\n  ...\n  488              # If the application didn't restore the original autocommit setting,\n  489              # don't take chances, drop the connection.\n  490:             if self.get_autocommit() != self.settings_dict['AUTOCOMMIT']:\n  491                  self.close()\n  492                  return\n  ...\n  579          Refs #10868, #17786, #16969.\n  580          \"\"\"\n  581:         settings_dict = self.settings_dict.copy()\n  582:         settings_dict['NAME'] = None\n  583          nodb_connection = self.__class__(\n  584:             settings_dict,\n  585              alias=NO_DB_ALIAS,\n  586              allow_thread_sharing=False)\n  ...\n  630          For tests that require two connections to the same database.\n  631          \"\"\"\n  632:         settings_dict = copy.deepcopy(self.settings_dict)\n  633          if alias is None:\n  634              alias = self.alias\n  635          if allow_thread_sharing is None:\n  636              allow_thread_sharing = self.allow_thread_sharing\n  637:         return type(self)(settings_dict, alias, allow_thread_sharing)\n  638  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/db/backends/base/creation.py:\n    3  \n    4  from django.apps import apps\n    5: from django.conf import settings\n    6  from django.core import serializers\n    7  from django.db import router\n    .\n   57  \n   58          self.connection.close()\n   59:         settings.DATABASES[self.connection.alias][\"NAME\"] = test_database_name\n   60:         self.connection.settings_dict[\"NAME\"] = test_database_name\n   61  \n   62          # We report migrate messages at one level lower than that requested.\n   ..\n   85          return test_database_name\n   86  \n   87:     def set_as_test_mirror(self, primary_settings_dict):\n   88          \"\"\"\n   89          Set this database up to be used in testing as a mirror of a primary database\n   90:         whose settings are given\n   91          \"\"\"\n   92:         self.connection.settings_dict['NAME'] = primary_settings_dict['NAME']\n   93  \n   94      def serialize_db_to_string(self):\n   ..\n  106                  app_config.models_module is not None and\n  107                  app_config.label in loader.migrated_apps and\n  108:                 app_config.name not in settings.TEST_NON_SERIALIZED_APPS\n  109              ):\n  110                  app_list.append((app_config, None))\n  ...\n  146          created. Only useful when called from create_test_db() and\n  147          _create_test_db() and when no external munging is done with the 'NAME'\n  148:         settings.\n  149          \"\"\"\n  150:         if self.connection.settings_dict['TEST']['NAME']:\n  151:             return self.connection.settings_dict['TEST']['NAME']\n  152:         return TEST_DATABASE_PREFIX + self.connection.settings_dict['NAME']\n  153  \n  154      def _create_test_db(self, verbosity, autoclobber, keepdb=False):\n  ...\n  204          Clone a test database.\n  205          \"\"\"\n  206:         source_database_name = self.connection.settings_dict['NAME']\n  207  \n  208          if verbosity >= 1:\n  ...\n  219          self._clone_test_db(number, verbosity, keepdb)\n  220  \n  221:     def get_test_db_clone_settings(self, number):\n  222          \"\"\"\n  223:         Return a modified connection settings dict for the n-th clone of a DB.\n  224          \"\"\"\n  225          # When this function is called, the test database has been created\n  226:         # already and its name has been copied to settings_dict['NAME'] so\n  227          # we don't need to call _get_test_db_name.\n  228:         orig_settings_dict = self.connection.settings_dict\n  229:         new_settings_dict = orig_settings_dict.copy()\n  230:         new_settings_dict['NAME'] = '{}_{}'.format(orig_settings_dict['NAME'], number)\n  231:         return new_settings_dict\n  232  \n  233      def _clone_test_db(self, number, verbosity, keepdb=False):\n  ...\n  246          self.connection.close()\n  247          if number is None:\n  248:             test_database_name = self.connection.settings_dict['NAME']\n  249          else:\n  250:             test_database_name = self.get_test_db_clone_settings(number)['NAME']\n  251  \n  252          if verbosity >= 1:\n  ...\n  266          # Restore the original database name\n  267          if old_database_name is not None:\n  268:             settings.DATABASES[self.connection.alias][\"NAME\"] = old_database_name\n  269:             self.connection.settings_dict[\"NAME\"] = old_database_name\n  270  \n  271      def _destroy_test_db(self, test_database_name, verbosity):\n  ...\n  291      def test_db_signature(self):\n  292          \"\"\"\n  293:         Returns a tuple with elements of self.connection.settings_dict (a\n  294          DATABASES setting value) that uniquely identify a database\n  295          accordingly to the RDBMS particularities.\n  296          \"\"\"\n  297:         settings_dict = self.connection.settings_dict\n  298          return (\n  299:             settings_dict['HOST'],\n  300:             settings_dict['PORT'],\n  301:             settings_dict['ENGINE'],\n  302              self._get_test_db_name(),\n  303          )\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/db/backends/base/operations.py:\n    4  from importlib import import_module\n    5  \n    6: from django.conf import settings\n    7  from django.core.exceptions import ImproperlyConfigured\n    8  from django.db.backends import utils\n    .\n  526          first = datetime.datetime(value, 1, 1)\n  527          second = datetime.datetime(value, 12, 31, 23, 59, 59, 999999)\n  528:         if settings.USE_TZ:\n  529              tz = timezone.get_current_timezone()\n  530              first = timezone.make_aware(first, tz)\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/db/backends/dummy/base.py:\n   19  \n   20  def complain(*args, **kwargs):\n   21:     raise ImproperlyConfigured(\"settings.DATABASES is improperly configured. \"\n   22                                 \"Please supply the ENGINE value. Check \"\n   23:                                \"settings documentation for more details.\")\n   24  \n   25  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/db/backends/mysql/base.py:\n   12  import warnings\n   13  \n   14: from django.conf import settings\n   15  from django.db import utils\n   16  from django.db.backends import utils as backend_utils\n   ..\n   56  def adapt_datetime_warn_on_aware_datetime(value, conv):\n   57      # Remove this function and rely on the default adapter in Django 2.0.\n   58:     if settings.USE_TZ and timezone.is_aware(value):\n   59          warnings.warn(\n   60              \"The MySQL database adapter received an aware datetime (%s), \"\n   ..\n  241          if six.PY2:\n  242              kwargs['use_unicode'] = True\n  243:         settings_dict = self.settings_dict\n  244:         if settings_dict['USER']:\n  245:             kwargs['user'] = settings_dict['USER']\n  246:         if settings_dict['NAME']:\n  247:             kwargs['db'] = settings_dict['NAME']\n  248:         if settings_dict['PASSWORD']:\n  249:             kwargs['passwd'] = force_str(settings_dict['PASSWORD'])\n  250:         if settings_dict['HOST'].startswith('/'):\n  251:             kwargs['unix_socket'] = settings_dict['HOST']\n  252:         elif settings_dict['HOST']:\n  253:             kwargs['host'] = settings_dict['HOST']\n  254:         if settings_dict['PORT']:\n  255:             kwargs['port'] = int(settings_dict['PORT'])\n  256          # We need the number of potentially affected rows after an\n  257          # \"UPDATE\", not the number of changed rows.\n  258          kwargs['client_flag'] = CLIENT.FOUND_ROWS\n  259:         kwargs.update(settings_dict['OPTIONS'])\n  260          return kwargs\n  261  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/db/backends/mysql/client.py:\n    8  \n    9      @classmethod\n   10:     def settings_to_cmd_args(cls, settings_dict):\n   11          args = [cls.executable_name]\n   12:         db = settings_dict['OPTIONS'].get('db', settings_dict['NAME'])\n   13:         user = settings_dict['OPTIONS'].get('user', settings_dict['USER'])\n   14:         passwd = settings_dict['OPTIONS'].get('passwd', settings_dict['PASSWORD'])\n   15:         host = settings_dict['OPTIONS'].get('host', settings_dict['HOST'])\n   16:         port = settings_dict['OPTIONS'].get('port', settings_dict['PORT'])\n   17:         cert = settings_dict['OPTIONS'].get('ssl', {}).get('ca')\n   18:         defaults_file = settings_dict['OPTIONS'].get('read_default_file')\n   19          # Seems to be no good way to set sql_mode with CLI.\n   20  \n   ..\n   39  \n   40      def runshell(self):\n   41:         args = DatabaseClient.settings_to_cmd_args(self.connection.settings_dict)\n   42          subprocess.call(args)\n   43  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/db/backends/mysql/creation.py:\n   11      def sql_table_creation_suffix(self):\n   12          suffix = []\n   13:         test_settings = self.connection.settings_dict['TEST']\n   14:         if test_settings['CHARSET']:\n   15:             suffix.append('CHARACTER SET %s' % test_settings['CHARSET'])\n   16:         if test_settings['COLLATION']:\n   17:             suffix.append('COLLATE %s' % test_settings['COLLATION'])\n   18          return ' '.join(suffix)\n   19  \n   20      def _clone_test_db(self, number, verbosity, keepdb=False):\n   21          qn = self.connection.ops.quote_name\n   22:         source_database_name = self.connection.settings_dict['NAME']\n   23:         target_database_name = self.get_test_db_clone_settings(number)['NAME']\n   24  \n   25          with self._nodb_connection.cursor() as cursor:\n   ..\n   40                      sys.exit(2)\n   41  \n   42:         dump_cmd = DatabaseClient.settings_to_cmd_args(self.connection.settings_dict)\n   43          dump_cmd[0] = 'mysqldump'\n   44          dump_cmd[-1] = source_database_name\n   45:         load_cmd = DatabaseClient.settings_to_cmd_args(self.connection.settings_dict)\n   46          load_cmd[-1] = target_database_name\n   47  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/db/backends/mysql/operations.py:\n    3  import uuid\n    4  \n    5: from django.conf import settings\n    6  from django.db.backends.base.operations import BaseDatabaseOperations\n    7  from django.utils import six, timezone\n    .\n   40  \n   41      def _convert_field_to_tz(self, field_name, tzname):\n   42:         if settings.USE_TZ:\n   43              field_name = \"CONVERT_TZ(%s, 'UTC', %%s)\" % field_name\n   44              params = [tzname]\n   ..\n  144          # MySQL doesn't support tz-aware datetimes\n  145          if timezone.is_aware(value):\n  146:             if settings.USE_TZ:\n  147                  value = timezone.make_naive(value, self.connection.timezone)\n  148              else:\n  ...\n  205      def convert_datetimefield_value(self, value, expression, connection, context):\n  206          if value is not None:\n  207:             if settings.USE_TZ:\n  208                  value = timezone.make_aware(value, self.connection.timezone)\n  209          return value\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/db/backends/oracle/base.py:\n   13  import warnings\n   14  \n   15: from django.conf import settings\n   16  from django.db import utils\n   17  from django.db.backends.base.base import BaseDatabaseWrapper\n   ..\n  185  \n  186          self.features = DatabaseFeatures(self)\n  187:         use_returning_into = self.settings_dict[\"OPTIONS\"].get('use_returning_into', True)\n  188          self.features.can_return_id_from_insert = use_returning_into\n  189          self.ops = DatabaseOperations(self)\n  ...\n  194  \n  195      def _connect_string(self):\n  196:         settings_dict = self.settings_dict\n  197:         if not settings_dict['HOST'].strip():\n  198:             settings_dict['HOST'] = 'localhost'\n  199:         if settings_dict['PORT'].strip():\n  200:             dsn = Database.makedsn(settings_dict['HOST'],\n  201:                                    int(settings_dict['PORT']),\n  202:                                    settings_dict['NAME'])\n  203          else:\n  204:             dsn = settings_dict['NAME']\n  205:         return \"%s/%s@%s\" % (settings_dict['USER'],\n  206:                              settings_dict['PASSWORD'], dsn)\n  207  \n  208      def get_connection_params(self):\n  209:         conn_params = self.settings_dict['OPTIONS'].copy()\n  210          if 'use_returning_into' in conn_params:\n  211              del conn_params['use_returning_into']\n  ...\n  230              \"ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD HH24:MI:SS'\"\n  231              \" NLS_TIMESTAMP_FORMAT = 'YYYY-MM-DD HH24:MI:SS.FF'\" +\n  232:             (\" TIME_ZONE = 'UTC'\" if settings.USE_TZ else '')\n  233          )\n  234          cursor.close()\n  ...\n  238              # This check is performed only once per DatabaseWrapper\n  239              # instance per thread, since subsequent connections will use\n  240:             # the same settings.\n  241              cursor = self.create_cursor()\n  242              try:\n  ...\n  338          # With raw SQL queries, datetimes can reach this function\n  339          # without being converted by DateTimeField.get_db_prep_value.\n  340:         if settings.USE_TZ and (isinstance(param, datetime.datetime) and\n  341                                  not isinstance(param, Oracle_datetime)):\n  342              if timezone.is_aware(param):\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/db/backends/oracle/creation.py:\n    2  import time\n    3  \n    4: from django.conf import settings\n    5  from django.db.backends.base.creation import BaseDatabaseCreation\n    6  from django.db.utils import DatabaseError\n    .\n   23          is the main (non-test) connection.\n   24          \"\"\"\n   25:         settings_dict = settings.DATABASES[self.connection.alias]\n   26:         user = settings_dict.get('SAVED_USER') or settings_dict['USER']\n   27:         password = settings_dict.get('SAVED_PASSWORD') or settings_dict['PASSWORD']\n   28:         settings_dict = settings_dict.copy()\n   29:         settings_dict.update(USER=user, PASSWORD=password)\n   30          DatabaseWrapper = type(self.connection)\n   31:         return DatabaseWrapper(settings_dict, alias=self.connection.alias)\n   32  \n   33      def _create_test_db(self, verbosity=1, autoclobber=False, keepdb=False):\n   ..\n  103          self._maindb_connection.close()  # done with main user -- test user and tablespaces created\n  104          self._switch_to_test_user(parameters)\n  105:         return self.connection.settings_dict['NAME']\n  106  \n  107      def _switch_to_test_user(self, parameters):\n  ...\n  111          to switch to that user. We will need the main user again for clean-up when\n  112          we end testing, so we keep its credentials in SAVED_USER/SAVED_PASSWORD\n  113:         entries in the settings dict.\n  114          \"\"\"\n  115:         real_settings = settings.DATABASES[self.connection.alias]\n  116:         real_settings['SAVED_USER'] = self.connection.settings_dict['SAVED_USER'] = \\\n  117:             self.connection.settings_dict['USER']\n  118:         real_settings['SAVED_PASSWORD'] = self.connection.settings_dict['SAVED_PASSWORD'] = \\\n  119:             self.connection.settings_dict['PASSWORD']\n  120:         real_test_settings = real_settings['TEST']\n  121:         test_settings = self.connection.settings_dict['TEST']\n  122:         real_test_settings['USER'] = real_settings['USER'] = test_settings['USER'] = \\\n  123:             self.connection.settings_dict['USER'] = parameters['user']\n  124:         real_settings['PASSWORD'] = self.connection.settings_dict['PASSWORD'] = parameters['password']\n  125  \n  126:     def set_as_test_mirror(self, primary_settings_dict):\n  127          \"\"\"\n  128          Set this database up to be used in testing as a mirror of a primary database\n  129:         whose settings are given\n  130          \"\"\"\n  131:         self.connection.settings_dict['USER'] = primary_settings_dict['USER']\n  132:         self.connection.settings_dict['PASSWORD'] = primary_settings_dict['PASSWORD']\n  133  \n  134      def _handle_objects_preventing_db_destruction(self, cursor, parameters, verbosity, autoclobber):\n  ...\n  172          database already exists. Returns the name of the test database created.\n  173          \"\"\"\n  174:         self.connection.settings_dict['USER'] = self.connection.settings_dict['SAVED_USER']\n  175:         self.connection.settings_dict['PASSWORD'] = self.connection.settings_dict['SAVED_PASSWORD']\n  176          self.connection.close()\n  177          parameters = self._get_test_db_params()\n  ...\n  226          success = self._execute_allow_fail_statements(cursor, statements, parameters, verbosity, acceptable_ora_err)\n  227          # If the password was randomly generated, change the user accordingly.\n  228:         if not success and self._test_settings_get('PASSWORD') is None:\n  229              set_password = \"ALTER USER %(user)s IDENTIFIED BY %(password)s\"\n  230              self._execute_statements(cursor, [set_password], parameters, verbosity)\n  ...\n  295          }\n  296  \n  297:     def _test_settings_get(self, key, default=None, prefixed=None):\n  298          \"\"\"\n  299:         Return a value from the test settings dict,\n  300          or a given default,\n  301:         or a prefixed entry from the main settings dict\n  302          \"\"\"\n  303:         settings_dict = self.connection.settings_dict\n  304:         val = settings_dict['TEST'].get(key, default)\n  305          if val is None and prefixed:\n  306:             val = TEST_DATABASE_PREFIX + settings_dict[prefixed]\n  307          return val\n  308  \n  309      def _test_database_name(self):\n  310:         return self._test_settings_get('NAME', prefixed='NAME')\n  311  \n  312      def _test_database_create(self):\n  313:         return self._test_settings_get('CREATE_DB', default=True)\n  314  \n  315      def _test_user_create(self):\n  316:         return self._test_settings_get('CREATE_USER', default=True)\n  317  \n  318      def _test_database_user(self):\n  319:         return self._test_settings_get('USER', prefixed='USER')\n  320  \n  321      def _test_database_passwd(self):\n  322:         password = self._test_settings_get('PASSWORD')\n  323          if password is None and self._test_user_create():\n  324              # Oracle passwords are limited to 30 chars and can't contain symbols.\n  ...\n  327  \n  328      def _test_database_tblspace(self):\n  329:         return self._test_settings_get('TBLSPACE', prefixed='USER')\n  330  \n  331      def _test_database_tblspace_tmp(self):\n  332:         settings_dict = self.connection.settings_dict\n  333:         return settings_dict['TEST'].get('TBLSPACE_TMP',\n  334:                                          TEST_DATABASE_PREFIX + settings_dict['USER'] + '_temp')\n  335  \n  336      def _test_database_tblspace_datafile(self):\n  337          tblspace = '%s.dbf' % self._test_database_tblspace()\n  338:         return self._test_settings_get('DATAFILE', default=tblspace)\n  339  \n  340      def _test_database_tblspace_tmp_datafile(self):\n  341          tblspace = '%s.dbf' % self._test_database_tblspace_tmp()\n  342:         return self._test_settings_get('DATAFILE_TMP', default=tblspace)\n  343  \n  344      def _test_database_tblspace_size(self):\n  345:         return self._test_settings_get('DATAFILE_MAXSIZE', default='500M')\n  346  \n  347      def _test_database_tblspace_tmp_size(self):\n  348:         return self._test_settings_get('DATAFILE_TMP_MAXSIZE', default='500M')\n  349  \n  350      def _get_test_db_name(self):\n  ...\n  354          names as handled by Django haven't real counterparts in Oracle.\n  355          \"\"\"\n  356:         return self.connection.settings_dict['NAME']\n  357  \n  358      def test_db_signature(self):\n  359:         settings_dict = self.connection.settings_dict\n  360          return (\n  361:             settings_dict['HOST'],\n  362:             settings_dict['PORT'],\n  363:             settings_dict['ENGINE'],\n  364:             settings_dict['NAME'],\n  365              self._test_database_user(),\n  366          )\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/db/backends/oracle/operations.py:\n    5  import uuid\n    6  \n    7: from django.conf import settings\n    8  from django.db.backends.base.operations import BaseDatabaseOperations\n    9  from django.db.backends.utils import truncate_name\n   ..\n  116  \n  117      def _convert_field_to_tz(self, field_name, tzname):\n  118:         if settings.USE_TZ:\n  119              if not self._tzname_re.match(tzname):\n  120                  raise ValueError(\"Invalid time zone name: %s\" % tzname)\n  ...\n  196      def convert_datetimefield_value(self, value, expression, connection, context):\n  197          if value is not None:\n  198:             if settings.USE_TZ:\n  199                  value = timezone.make_aware(value, self.connection.timezone)\n  200          return value\n  ...\n  402          # cx_Oracle doesn't support tz-aware datetimes\n  403          if timezone.is_aware(value):\n  404:             if settings.USE_TZ:\n  405                  value = timezone.make_naive(value, self.connection.timezone)\n  406              else:\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:\n    7  import warnings\n    8  \n    9: from django.conf import settings\n   10  from django.core.exceptions import ImproperlyConfigured\n   11  from django.db import DEFAULT_DB_ALIAS\n   ..\n  152  \n  153      def get_connection_params(self):\n  154:         settings_dict = self.settings_dict\n  155          # None may be used to connect to the default 'postgres' db\n  156:         if settings_dict['NAME'] == '':\n  157              raise ImproperlyConfigured(\n  158:                 \"settings.DATABASES is improperly configured. \"\n  159                  \"Please supply the NAME value.\")\n  160          conn_params = {\n  161:             'database': settings_dict['NAME'] or 'postgres',\n  162          }\n  163:         conn_params.update(settings_dict['OPTIONS'])\n  164          conn_params.pop('isolation_level', None)\n  165:         if settings_dict['USER']:\n  166:             conn_params['user'] = settings_dict['USER']\n  167:         if settings_dict['PASSWORD']:\n  168:             conn_params['password'] = force_str(settings_dict['PASSWORD'])\n  169:         if settings_dict['HOST']:\n  170:             conn_params['host'] = settings_dict['HOST']\n  171:         if settings_dict['PORT']:\n  172:             conn_params['port'] = settings_dict['PORT']\n  173          return conn_params\n  174  \n  ...\n  181          # - before calling _set_autocommit() because if autocommit is on, that\n  182          #   will set connection.isolation_level to ISOLATION_LEVEL_AUTOCOMMIT.\n  183:         options = self.settings_dict['OPTIONS']\n  184          try:\n  185              self.isolation_level = options['isolation_level']\n  ...\n  210      def create_cursor(self):\n  211          cursor = self.connection.cursor()\n  212:         cursor.tzinfo_factory = utc_tzinfo_factory if settings.USE_TZ else None\n  213          return cursor\n  214  \n  ...\n  248                  RuntimeWarning\n  249              )\n  250:             settings_dict = self.settings_dict.copy()\n  251:             settings_dict['NAME'] = settings.DATABASES[DEFAULT_DB_ALIAS]['NAME']\n  252              nodb_connection = self.__class__(\n  253:                 self.settings_dict.copy(),\n  254                  alias=self.alias,\n  255                  allow_thread_sharing=False)\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/db/backends/postgresql/creation.py:\n    7  \n    8      def sql_table_creation_suffix(self):\n    9:         test_settings = self.connection.settings_dict['TEST']\n   10:         assert test_settings['COLLATION'] is None, (\n   11              \"PostgreSQL does not support collation setting at database creation time.\"\n   12          )\n   13:         if test_settings['CHARSET']:\n   14:             return \"WITH ENCODING '%s'\" % test_settings['CHARSET']\n   15          return ''\n   16  \n   ..\n   21  \n   22          qn = self.connection.ops.quote_name\n   23:         source_database_name = self.connection.settings_dict['NAME']\n   24:         target_database_name = self.get_test_db_clone_settings(number)['NAME']\n   25  \n   26          with self._nodb_connection.cursor() as cursor:\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/db/backends/postgresql/operations.py:\n    3  from psycopg2.extras import Inet\n    4  \n    5: from django.conf import settings\n    6  from django.db.backends.base.operations import BaseDatabaseOperations\n    7  \n    .\n   34  \n   35      def _convert_field_to_tz(self, field_name, tzname):\n   36:         if settings.USE_TZ:\n   37              field_name = \"%s AT TIME ZONE %%s\" % field_name\n   38              params = [tzname]\n   ..\n  258      def fulltext_search_sql(self, field_name):\n  259          raise NotImplementedError(\n  260:             \"Add 'django.contrib.postgres' to settings.INSTALLED_APPS to use \"\n  261              \"the search operator.\"\n  262          )\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/db/backends/sqlite3/base.py:\n   12  import warnings\n   13  \n   14: from django.conf import settings\n   15  from django.db import utils\n   16  from django.db.backends import utils as backend_utils\n   ..\n   53  def adapt_datetime_warn_on_aware_datetime(value):\n   54      # Remove this function and rely on the default adapter in Django 2.0.\n   55:     if settings.USE_TZ and timezone.is_aware(value):\n   56          warnings.warn(\n   57              \"The SQLite database adapter received an aware datetime (%s), \"\n   ..\n  176  \n  177      def get_connection_params(self):\n  178:         settings_dict = self.settings_dict\n  179:         if not settings_dict['NAME']:\n  180              from django.core.exceptions import ImproperlyConfigured\n  181              raise ImproperlyConfigured(\n  182:                 \"settings.DATABASES is improperly configured. \"\n  183                  \"Please supply the NAME value.\")\n  184          kwargs = {\n  185:             'database': settings_dict['NAME'],\n  186              'detect_types': Database.PARSE_DECLTYPES | Database.PARSE_COLNAMES,\n  187          }\n  188:         kwargs.update(settings_dict['OPTIONS'])\n  189          # Always allow the underlying SQLite connection to be shareable\n  190          # between multiple threads. The safe-guarding will be handled at a\n  ...\n  232          # database. To prevent accidental data loss, ignore close requests on\n  233          # an in-memory db.\n  234:         if not self.is_in_memory_db(self.settings_dict['NAME']):\n  235              BaseDatabaseWrapper.close(self)\n  236  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/db/backends/sqlite3/client.py:\n    9      def runshell(self):\n   10          args = [self.executable_name,\n   11:                 self.connection.settings_dict['NAME']]\n   12          subprocess.call(args)\n   13  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/db/backends/sqlite3/creation.py:\n   11  \n   12      def _get_test_db_name(self):\n   13:         test_database_name = self.connection.settings_dict['TEST']['NAME']\n   14          can_share_in_memory_db = self.connection.features.can_share_in_memory_db\n   15          if test_database_name and test_database_name != ':memory:':\n   ..\n   53          return test_database_name\n   54  \n   55:     def get_test_db_clone_settings(self, number):\n   56:         orig_settings_dict = self.connection.settings_dict\n   57:         source_database_name = orig_settings_dict['NAME']\n   58          if self.connection.is_in_memory_db(source_database_name):\n   59:             return orig_settings_dict\n   60          else:\n   61:             new_settings_dict = orig_settings_dict.copy()\n   62:             root, ext = os.path.splitext(orig_settings_dict['NAME'])\n   63:             new_settings_dict['NAME'] = '{}_{}.{}'.format(root, number, ext)\n   64:             return new_settings_dict\n   65  \n   66      def _clone_test_db(self, number, verbosity, keepdb=False):\n   67:         source_database_name = self.connection.settings_dict['NAME']\n   68:         target_database_name = self.get_test_db_clone_settings(number)['NAME']\n   69          # Forking automatically makes a copy of an in-memory database.\n   70          if not self.connection.is_in_memory_db(source_database_name):\n   ..\n  102          \"\"\"\n  103          test_database_name = self._get_test_db_name()\n  104:         sig = [self.connection.settings_dict['NAME']]\n  105          if self.connection.is_in_memory_db(test_database_name):\n  106              sig.append(self.connection.alias)\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/db/backends/sqlite3/operations.py:\n    4  import uuid\n    5  \n    6: from django.conf import settings\n    7  from django.core.exceptions import FieldError, ImproperlyConfigured\n    8  from django.db import utils\n    .\n   72  \n   73      def _require_pytz(self):\n   74:         if settings.USE_TZ and pytz is None:\n   75              raise ImproperlyConfigured(\"This query requires pytz, but it isn't installed.\")\n   76  \n   ..\n  177          # SQLite doesn't support tz-aware datetimes\n  178          if timezone.is_aware(value):\n  179:             if settings.USE_TZ:\n  180                  value = timezone.make_naive(value, self.connection.timezone)\n  181              else:\n  ...\n  213              if not isinstance(value, datetime.datetime):\n  214                  value = parse_datetime(value)\n  215:             if settings.USE_TZ:\n  216                  value = timezone.make_aware(value, self.connection.timezone)\n  217          return value\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/db/migrations/autodetector.py:\n    5  from itertools import chain\n    6  \n    7: from django.conf import settings\n    8  from django.db import models\n    9  from django.db.migrations import operations\n   ..\n  262                              # resolved model we still add the swappable dependencies.\n  263                              # See #23322\n  264:                             resolved_app_label, resolved_object_name = getattr(settings, dep[1]).split('.')\n  265                              original_dep = dep\n  266                              dep = (resolved_app_label, resolved_object_name.lower(), dep[2], dep[3])\n  ...\n  438                  \"AbstractUser\" in base_names or\n  439                  \"AbstractBaseUser\" in base_names or\n  440:                 settings.AUTH_USER_MODEL.lower() == string_version.lower()\n  441              ):\n  442                  return (\"___\" + item[0], \"___\" + item[1])\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/db/migrations/loader.py:\n    6  \n    7  from django.apps import apps\n    8: from django.conf import settings\n    9  from django.db.migrations.graph import MigrationGraph\n   10  from django.db.migrations.recorder import MigrationRecorder\n   ..\n   54      @classmethod\n   55      def migrations_module(cls, app_label):\n   56:         if app_label in settings.MIGRATION_MODULES:\n   57:             return settings.MIGRATION_MODULES[app_label]\n   58          else:\n   59              app_package_name = apps.get_app_config(app_label).name\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/db/migrations/serializer.py:\n  271  \n  272  \n  273: class SettingsReferenceSerializer(BaseSerializer):\n  274      def serialize(self):\n  275:         return \"settings.%s\" % self.value.setting_name, {\"from django.conf import settings\"}\n  276  \n  277  \n  ...\n  322  \n  323  def serializer_factory(value):\n  324:     from django.db.migrations.writer import SettingsReference\n  325      if isinstance(value, Promise):\n  326          value = force_text(value)\n  ...\n  363      if isinstance(value, datetime.timedelta):\n  364          return TimedeltaSerializer(value)\n  365:     if isinstance(value, SettingsReference):\n  366:         return SettingsReferenceSerializer(value)\n  367      if isinstance(value, float):\n  368          return FloatSerializer(value)\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/db/migrations/state.py:\n    8  from django.apps import AppConfig\n    9  from django.apps.registry import Apps, apps as global_apps\n   10: from django.conf import settings\n   11  from django.db import models\n   12  from django.db.models.fields.proxy import OrderWrt\n   ..\n  244          # There shouldn't be any operations pending at this point.\n  245          from django.core.checks.model_checks import _check_lazy_references\n  246:         ignore = {make_model_tuple(settings.AUTH_USER_MODEL)} if ignore_swappable else set()\n  247          errors = _check_lazy_references(self, ignore=ignore)\n  248          if errors:\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/db/migrations/writer.py:\n   23  \n   24  \n   25: class SettingsReference(str):\n   26      \"\"\"\n   27:     Special subclass of string which actually references a current settings\n   28      value. It's treated as the value in memory, but serializes out to a\n   29:     settings.NAME attribute reference.\n   30      \"\"\"\n   31  \n   ..\n  170          for dependency in self.migration.dependencies:\n  171              if dependency[0] == \"__setting__\":\n  172:                 dependencies.append(\"        migrations.swappable_dependency(settings.%s),\" % dependency[1])\n  173:                 imports.add(\"from django.conf import settings\")\n  174              else:\n  175                  # No need to output bytestrings for dependencies\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/db/models/base.py:\n    7  \n    8  from django.apps import apps\n    9: from django.conf import settings\n   10  from django.core import checks\n   11  from django.core.exceptions import (\n   ..\n  343              cls.__doc__ = \"%s(%s)\" % (cls.__name__, \", \".join(f.name for f in opts.fields))\n  344  \n  345:         get_absolute_url_override = settings.ABSOLUTE_URL_OVERRIDES.get(opts.label_lower)\n  346          if get_absolute_url_override:\n  347              setattr(cls, 'get_absolute_url', get_absolute_url_override)\n  ...\n 1649  \n 1650          # Find the minimum max allowed length among all specified db_aliases.\n 1651:         for db in settings.DATABASES.keys():\n 1652              # skip databases where the model won't be created\n 1653              if not router.allow_migrate_model(db, cls):\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/db/models/options.py:\n    8  \n    9  from django.apps import apps\n   10: from django.conf import settings\n   11  from django.core.exceptions import FieldDoesNotExist\n   12  from django.db import connections\n   ..\n  109          self.get_latest_by = None\n  110          self.order_with_respect_to = None\n  111:         self.db_tablespace = settings.DEFAULT_TABLESPACE\n  112          self.required_db_features = []\n  113          self.required_db_vendor = None\n  ...\n  351          \"\"\"\n  352          if self.swappable:\n  353:             swapped_for = getattr(settings, self.swappable, None)\n  354              if swapped_for:\n  355                  try:\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/db/models/query.py:\n    8  from collections import OrderedDict, deque\n    9  \n   10: from django.conf import settings\n   11  from django.core import exceptions\n   12  from django.db import (\n   ..\n  758          assert order in ('ASC', 'DESC'), \\\n  759              \"'order' must be either 'ASC' or 'DESC'.\"\n  760:         if settings.USE_TZ:\n  761              if tzinfo is None:\n  762                  tzinfo = timezone.get_current_timezone()\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/db/models/fields/__init__.py:\n   14  from django import forms\n   15  from django.apps import apps\n   16: from django.conf import settings\n   17  from django.core import checks, exceptions, validators\n   18  # When the _meta object was formalized, this exception was moved to\n   ..\n  164          self.db_index = db_index\n  165          self.db_column = db_column\n  166:         self.db_tablespace = db_tablespace or settings.DEFAULT_INDEX_TABLESPACE\n  167          self.auto_created = auto_created\n  168  \n  ...\n  408              \"help_text\": '',\n  409              \"db_column\": None,\n  410:             \"db_tablespace\": settings.DEFAULT_INDEX_TABLESPACE,\n  411              \"auto_created\": False,\n  412              \"validators\": [],\n  ...\n 1225              return value\n 1226          if isinstance(value, datetime.datetime):\n 1227:             if settings.USE_TZ and timezone.is_aware(value):\n 1228                  # Convert aware datetimes to the default time zone\n 1229                  # before casting them to dates (#17742).\n ....\n 1362          if isinstance(value, datetime.date):\n 1363              value = datetime.datetime(value.year, value.month, value.day)\n 1364:             if settings.USE_TZ:\n 1365                  # For backwards compatibility, interpret naive datetimes in\n 1366                  # local time. This won't work during DST change, but we can't\n ....\n 1417          value = super(DateTimeField, self).get_prep_value(value)\n 1418          value = self.to_python(value)\n 1419:         if value is not None and settings.USE_TZ and timezone.is_naive(value):\n 1420              # For backwards compatibility, interpret naive datetimes in local\n 1421              # time. This won't work during DST change, but we can't do much\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/db/models/fields/related.py:\n  175                      \"Field defines a relation with the model '%s', which has \"\n  176                      \"been swapped out.\" % model,\n  177:                     hint=\"Update the relation to point at 'settings.%s'.\" % self.remote_field.model._meta.swappable,\n  178                      obj=self,\n  179                      id='fields.E301',\n  ...\n  358              else:\n  359                  to_string = self.remote_field.model._meta.label\n  360:             return apps.get_swappable_settings_name(to_string)\n  361          return None\n  362  \n  ...\n  545          swappable_setting = self.swappable_setting\n  546          if swappable_setting is not None:\n  547:             # If it's already a settings reference, error\n  548              if hasattr(kwargs['to'], \"setting_name\"):\n  549                  if kwargs['to'].setting_name != swappable_setting:\n  ...\n  554                      )\n  555              # Set it\n  556:             from django.db.migrations.writer import SettingsReference\n  557:             kwargs['to'] = SettingsReference(\n  558                  kwargs['to'],\n  559                  swappable_setting,\n  ...\n 1404          swappable_setting = self.swappable_setting\n 1405          if swappable_setting is not None:\n 1406:             # If it's already a settings reference, error.\n 1407              if hasattr(kwargs['to'], \"setting_name\"):\n 1408                  if kwargs['to'].setting_name != swappable_setting:\n ....\n 1413                      )\n 1414  \n 1415:             from django.db.migrations.writer import SettingsReference\n 1416:             kwargs['to'] = SettingsReference(\n 1417                  kwargs['to'],\n 1418                  swappable_setting,\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/db/models/functions/datetime.py:\n    3  from datetime import datetime\n    4  \n    5: from django.conf import settings\n    6  from django.db.models import (\n    7      DateField, DateTimeField, IntegerField, TimeField, Transform,\n    .\n   23          # based on the input datetime not the stored datetime.\n   24          tzname = None\n   25:         if settings.USE_TZ:\n   26              if self.tzinfo is None:\n   27                  tzname = timezone.get_current_timezone_name()\n   ..\n  176      def convert_value(self, value, expression, connection, context):\n  177          if isinstance(self.output_field, DateTimeField):\n  178:             if settings.USE_TZ:\n  179                  if value is None:\n  180                      raise ValueError(\n  ...\n  219          # Cast to date rather than truncate to date.\n  220          lhs, lhs_params = compiler.compile(self.lhs)\n  221:         tzname = timezone.get_current_timezone_name() if settings.USE_TZ else None\n  222          sql, tz_params = connection.ops.datetime_cast_date_sql(lhs, tzname)\n  223          lhs_params.extend(tz_params)\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/db/models/sql/query.py:\n 1671      def clear_ordering(self, force_empty):\n 1672          \"\"\"\n 1673:         Removes any ordering settings. If 'force_empty' is True, there will be\n 1674          no ordering in the resulting query (not even the model's default).\n 1675          \"\"\"\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/dispatch/dispatcher.py:\n   88                  anything hashable.\n   89          \"\"\"\n   90:         from django.conf import settings\n   91  \n   92          # If DEBUG is on, check that we got a good receiver\n   93:         if settings.configured and settings.DEBUG:\n   94              assert callable(receiver), \"Signal receivers must be callable.\"\n   95  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/forms/utils.py:\n    4  import sys\n    5  \n    6: from django.conf import settings\n    7  from django.core.exceptions import ValidationError  # backwards compatibility\n    8  from django.utils import six, timezone\n    .\n  164      entered in the current time zone to aware datetimes.\n  165      \"\"\"\n  166:     if settings.USE_TZ and value is not None and timezone.is_naive(value):\n  167          current_timezone = timezone.get_current_timezone()\n  168          try:\n  ...\n  188      to naive datetimes in the current time zone for display.\n  189      \"\"\"\n  190:     if settings.USE_TZ and value is not None and timezone.is_aware(value):\n  191          current_timezone = timezone.get_current_timezone()\n  192          return timezone.make_naive(value, current_timezone)\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/forms/widgets.py:\n   10  from itertools import chain\n   11  \n   12: from django.conf import settings\n   13  from django.forms.utils import flatatt, to_current_timezone\n   14  from django.templatetags.static import static\n   ..\n 1025              year_val = month_val = day_val = None\n 1026              if isinstance(value, six.string_types):\n 1027:                 if settings.USE_L10N:\n 1028                      try:\n 1029                          input_format = get_format('DATE_INPUT_FORMATS')[0]\n ....\n 1062              return None\n 1063          if y and m and d:\n 1064:             if settings.USE_L10N:\n 1065                  input_format = get_format('DATE_INPUT_FORMATS')[0]\n 1066                  try:\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/http/multipartparser.py:\n   12  import sys\n   13  \n   14: from django.conf import settings\n   15  from django.core.exceptions import (\n   16      RequestDataTooBig, SuspiciousMultipartForm, TooManyFieldsSent,\n   ..\n  103  \n  104          self._meta = META\n  105:         self._encoding = encoding or settings.DEFAULT_CHARSET\n  106          self._content_length = content_length\n  107          self._upload_handlers = upload_handlers\n  ...\n  178                      # Avoid storing more than DATA_UPLOAD_MAX_NUMBER_FIELDS.\n  179                      num_post_keys += 1\n  180:                     if (settings.DATA_UPLOAD_MAX_NUMBER_FIELDS is not None and\n  181:                             settings.DATA_UPLOAD_MAX_NUMBER_FIELDS < num_post_keys):\n  182                          raise TooManyFieldsSent(\n  183                              'The number of GET/POST parameters exceeded '\n  184:                             'settings.DATA_UPLOAD_MAX_NUMBER_FIELDS.'\n  185                          )\n  186  \n  187                      # Avoid reading more than DATA_UPLOAD_MAX_MEMORY_SIZE.\n  188:                     if settings.DATA_UPLOAD_MAX_MEMORY_SIZE is not None:\n  189:                         read_size = settings.DATA_UPLOAD_MAX_MEMORY_SIZE - num_bytes_read\n  190  \n  191                      # This is a post field, we can just set it in the post\n  ...\n  204                      # x-www-form-urlencoded check that includes '&='.\n  205                      num_bytes_read += len(field_name) + 2\n  206:                     if (settings.DATA_UPLOAD_MAX_MEMORY_SIZE is not None and\n  207:                             num_bytes_read > settings.DATA_UPLOAD_MAX_MEMORY_SIZE):\n  208:                         raise RequestDataTooBig('Request body exceeded settings.DATA_UPLOAD_MAX_MEMORY_SIZE.')\n  209  \n  210                      self._post.appendlist(field_name,\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/http/request.py:\n    7  from itertools import chain\n    8  \n    9: from django.conf import settings\n   10  from django.core import signing\n   11  from django.core.exceptions import (\n   ..\n   80          \"\"\"\n   81          # We try three options, in order of decreasing preference.\n   82:         if settings.USE_X_FORWARDED_HOST and (\n   83                  'HTTP_X_FORWARDED_HOST' in self.META):\n   84              host = self.META['HTTP_X_FORWARDED_HOST']\n   ..\n   98  \n   99          # Allow variants of localhost if ALLOWED_HOSTS is empty and DEBUG=True.\n  100:         allowed_hosts = settings.ALLOWED_HOSTS\n  101:         if settings.DEBUG and not allowed_hosts:\n  102              allowed_hosts = ['localhost', '127.0.0.1', '[::1]']\n  103  \n  ...\n  115      def get_port(self):\n  116          \"\"\"Return the port number for the request as a string.\"\"\"\n  117:         if settings.USE_X_FORWARDED_PORT and 'HTTP_X_FORWARDED_PORT' in self.META:\n  118              port = self.META['HTTP_X_FORWARDED_PORT']\n  119          else:\n  ...\n  198      @property\n  199      def scheme(self):\n  200:         if settings.SECURE_PROXY_SSL_HEADER:\n  201              try:\n  202:                 header, value = settings.SECURE_PROXY_SSL_HEADER\n  203              except ValueError:\n  204                  raise ImproperlyConfigured(\n  ...\n  234      def _initialize_handlers(self):\n  235          self._upload_handlers = [uploadhandler.load_handler(handler, self)\n  236:                                  for handler in settings.FILE_UPLOAD_HANDLERS]\n  237  \n  238      @property\n  239      def upload_handlers(self):\n  240          if not self._upload_handlers:\n  241:             # If there are no upload handlers defined, initialize them from settings.\n  242              self._initialize_handlers()\n  243          return self._upload_handlers\n  ...\n  265  \n  266              # Limit the maximum request data size that will be handled in-memory.\n  267:             if (settings.DATA_UPLOAD_MAX_MEMORY_SIZE is not None and\n  268:                     int(self.META.get('CONTENT_LENGTH') or 0) > settings.DATA_UPLOAD_MAX_MEMORY_SIZE):\n  269:                 raise RequestDataTooBig('Request body exceeded settings.DATA_UPLOAD_MAX_MEMORY_SIZE.')\n  270  \n  271              try:\n  ...\n  376          super(QueryDict, self).__init__()\n  377          if not encoding:\n  378:             encoding = settings.DEFAULT_CHARSET\n  379          self.encoding = encoding\n  380          query_string = query_string or ''\n  381          parse_qsl_kwargs = {\n  382              'keep_blank_values': True,\n  383:             'fields_limit': settings.DATA_UPLOAD_MAX_NUMBER_FIELDS,\n  384              'encoding': encoding,\n  385          }\n  ...\n  407      def encoding(self):\n  408          if self._encoding is None:\n  409:             self._encoding = settings.DEFAULT_CHARSET\n  410          return self._encoding\n  411  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/http/response.py:\n    8  from email.header import Header\n    9  \n   10: from django.conf import settings\n   11  from django.core import signals, signing\n   12  from django.core.exceptions import DisallowedRedirect\n   ..\n   55          self._charset = charset\n   56          if content_type is None:\n   57:             content_type = '%s; charset=%s' % (settings.DEFAULT_CONTENT_TYPE,\n   58                                                 self.charset)\n   59          self['Content-Type'] = content_type\n   ..\n   80              # Extract the charset and strip its double quotes\n   81              return matched.group('charset').replace('\"', '')\n   82:         return settings.DEFAULT_CHARSET\n   83  \n   84      @charset.setter\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/middleware/cache.py:\n   44  \"\"\"\n   45  \n   46: from django.conf import settings\n   47  from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n   48  from django.utils.cache import (\n   ..\n   63      \"\"\"\n   64      def __init__(self, get_response=None):\n   65:         self.cache_timeout = settings.CACHE_MIDDLEWARE_SECONDS\n   66:         self.key_prefix = settings.CACHE_MIDDLEWARE_KEY_PREFIX\n   67:         self.cache_alias = settings.CACHE_MIDDLEWARE_ALIAS\n   68          self.cache = caches[self.cache_alias]\n   69          self.get_response = get_response\n   ..\n  116      \"\"\"\n  117      def __init__(self, get_response=None):\n  118:         self.key_prefix = settings.CACHE_MIDDLEWARE_KEY_PREFIX\n  119:         self.cache_alias = settings.CACHE_MIDDLEWARE_ALIAS\n  120          self.cache = caches[self.cache_alias]\n  121          self.get_response = get_response\n  ...\n  169                  key_prefix = ''\n  170          except KeyError:\n  171:             key_prefix = settings.CACHE_MIDDLEWARE_KEY_PREFIX\n  172          self.key_prefix = key_prefix\n  173  \n  ...\n  177                  cache_alias = DEFAULT_CACHE_ALIAS\n  178          except KeyError:\n  179:             cache_alias = settings.CACHE_MIDDLEWARE_ALIAS\n  180          self.cache_alias = cache_alias\n  181  \n  182          if cache_timeout is None:\n  183:             cache_timeout = settings.CACHE_MIDDLEWARE_SECONDS\n  184          self.cache_timeout = cache_timeout\n  185          self.cache = caches[self.cache_alias]\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/middleware/clickjacking.py:\n    6  \"\"\"\n    7  \n    8: from django.conf import settings\n    9  from django.utils.deprecation import MiddlewareMixin\n   10  \n   ..\n   20      response can only be loaded on a frame within the same site. To prevent the\n   21      response from being loaded in a frame in any site, set X_FRAME_OPTIONS in\n   22:     your project's Django settings to 'DENY'.\n   23  \n   24      Note: older browsers will quietly ignore this header, thus other\n   ..\n   46  \n   47          By default this uses the value from the X_FRAME_OPTIONS Django\n   48:         settings. If not found in settings, defaults to 'SAMEORIGIN'.\n   49  \n   50          This method can be overridden if needed, allowing it to vary based on\n   51          the request or response.\n   52          \"\"\"\n   53:         return getattr(settings, 'X_FRAME_OPTIONS', 'SAMEORIGIN').upper()\n   54  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/middleware/common.py:\n    3  \n    4  from django import http\n    5: from django.conf import settings\n    6  from django.core.exceptions import PermissionDenied\n    7  from django.core.mail import mail_managers\n    .\n   20      \"Common\" middleware for taking care of some basic operations:\n   21  \n   22:         - Forbids access to User-Agents in settings.DISALLOWED_USER_AGENTS\n   23  \n   24:         - URL rewriting: Based on the APPEND_SLASH and PREPEND_WWW settings,\n   25            this middleware appends missing slashes and/or prepends missing\n   26            \"www.\"s.\n   ..\n   45          \"\"\"\n   46          Check for denied User-Agents and rewrite the URL based on\n   47:         settings.APPEND_SLASH and settings.PREPEND_WWW\n   48          \"\"\"\n   49  \n   50          # Check for denied User-Agents\n   51          if 'HTTP_USER_AGENT' in request.META:\n   52:             for user_agent_regex in settings.DISALLOWED_USER_AGENTS:\n   53                  if user_agent_regex.search(request.META['HTTP_USER_AGENT']):\n   54                      raise PermissionDenied('Forbidden user agent')\n   55  \n   56:         # Check for a redirect based on settings.PREPEND_WWW\n   57          host = request.get_host()\n   58:         must_prepend = settings.PREPEND_WWW and host and not host.startswith('www.')\n   59          redirect_url = ('%s://www.%s' % (request.scheme, host)) if must_prepend else ''\n   60  \n   ..\n   72      def should_redirect_with_slash(self, request):\n   73          \"\"\"\n   74:         Return True if settings.APPEND_SLASH is True and appending a slash to\n   75          the request path turns an invalid path into a valid one.\n   76          \"\"\"\n   77:         if settings.APPEND_SLASH and not request.get_full_path().endswith('/'):\n   78              urlconf = getattr(request, 'urlconf', None)\n   79              return (\n   ..\n   87          Return the full path of the request with a trailing slash appended.\n   88  \n   89:         Raise a RuntimeError if settings.DEBUG is True and request.method is\n   90          POST, PUT, or PATCH.\n   91          \"\"\"\n   92          new_path = request.get_full_path(force_append_slash=True)\n   93:         if settings.DEBUG and request.method in ('POST', 'PUT', 'PATCH'):\n   94              raise RuntimeError(\n   95                  \"You called this URL via %(method)s, but the URL doesn't end \"\n   ..\n   97                  \"redirect to the slash URL while maintaining %(method)s data. \"\n   98                  \"Change your form to point to %(url)s (note the trailing \"\n   99:                 \"slash), or set APPEND_SLASH=False in your Django settings.\" % {\n  100                      'method': request.method,\n  101                      'url': request.get_host() + new_path,\n  ...\n  117                  return self.response_redirect_class(self.get_full_path_with_slash(request))\n  118  \n  119:         if settings.USE_ETAGS:\n  120              if not response.has_header('ETag'):\n  121                  set_response_etag(response)\n  ...\n  137          Send broken link emails for relevant 404 NOT FOUND responses.\n  138          \"\"\"\n  139:         if response.status_code == 404 and not settings.DEBUG:\n  140              domain = request.get_host()\n  141              path = request.get_full_path()\n  ...\n  165          \"\"\"\n  166          Return True if the given request *shouldn't* notify the site managers\n  167:         according to project settings or in situations outlined by the inline\n  168          comments.\n  169          \"\"\"\n  ...\n  174          # APPEND_SLASH is enabled and the referer is equal to the current URL\n  175          # without a trailing slash indicating an internal redirect.\n  176:         if settings.APPEND_SLASH and uri.endswith('/') and referer == uri[:-1]:\n  177              return True\n  178  \n  ...\n  187              return True\n  188  \n  189:         return any(pattern.search(uri) for pattern in settings.IGNORABLE_404_URLS)\n  190  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/middleware/csrf.py:\n   11  import string\n   12  \n   13: from django.conf import settings\n   14  from django.urls import get_callable\n   15  from django.utils.cache import patch_vary_headers\n   ..\n   39      Returns the view to be used for CSRF rejections\n   40      \"\"\"\n   41:     return get_callable(settings.CSRF_FAILURE_VIEW)\n   42  \n   43  \n   ..\n  166  \n  167          try:\n  168:             cookie_token = request.COOKIES[settings.CSRF_COOKIE_NAME]\n  169          except KeyError:\n  170              csrf_token = None\n  ...\n  229                  # If there isn't a CSRF_COOKIE_DOMAIN, assume we need an exact\n  230                  # match on host:port. If not, obey the cookie rules.\n  231:                 if settings.CSRF_COOKIE_DOMAIN is None:\n  232                      # request.get_host() includes the port.\n  233                      good_referer = request.get_host()\n  234                  else:\n  235:                     good_referer = settings.CSRF_COOKIE_DOMAIN\n  236                      server_port = request.get_port()\n  237                      if server_port not in ('443', '80'):\n  ...\n  241                  # including the current host since that has been validated\n  242                  # upstream.\n  243:                 good_hosts = list(settings.CSRF_TRUSTED_ORIGINS)\n  244                  good_hosts.append(good_referer)\n  245  \n  ...\n  270                  # Fall back to X-CSRFToken, to make things easier for AJAX,\n  271                  # and possible for PUT/DELETE.\n  272:                 request_csrf_token = request.META.get(settings.CSRF_HEADER_NAME, '')\n  273  \n  274              request_csrf_token = _sanitize_token(request_csrf_token)\n  ...\n  288          # Set the CSRF cookie even if it's already set, so we renew\n  289          # the expiry timer.\n  290:         response.set_cookie(settings.CSRF_COOKIE_NAME,\n  291                              request.META[\"CSRF_COOKIE\"],\n  292:                             max_age=settings.CSRF_COOKIE_AGE,\n  293:                             domain=settings.CSRF_COOKIE_DOMAIN,\n  294:                             path=settings.CSRF_COOKIE_PATH,\n  295:                             secure=settings.CSRF_COOKIE_SECURE,\n  296:                             httponly=settings.CSRF_COOKIE_HTTPONLY\n  297                              )\n  298          # Content varies with the CSRF cookie, so set the Vary header.\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/middleware/locale.py:\n    1  \"This is the locale selecting middleware that will look at accept headers\"\n    2  \n    3: from django.conf import settings\n    4  from django.conf.urls.i18n import is_language_prefix_patterns_used\n    5  from django.http import HttpResponseRedirect\n    .\n   21  \n   22      def process_request(self, request):\n   23:         urlconf = getattr(request, 'urlconf', settings.ROOT_URLCONF)\n   24          i18n_patterns_used, prefixed_default_language = is_language_prefix_patterns_used(urlconf)\n   25          language = translation.get_language_from_request(request, check_path=i18n_patterns_used)\n   26          language_from_path = translation.get_language_from_path(request.path_info)\n   27          if not language_from_path and i18n_patterns_used and not prefixed_default_language:\n   28:             language = settings.LANGUAGE_CODE\n   29          translation.activate(language)\n   30          request.LANGUAGE_CODE = translation.get_language()\n   ..\n   33          language = translation.get_language()\n   34          language_from_path = translation.get_language_from_path(request.path_info)\n   35:         urlconf = getattr(request, 'urlconf', settings.ROOT_URLCONF)\n   36          i18n_patterns_used, prefixed_default_language = is_language_prefix_patterns_used(urlconf)\n   37  \n   ..\n   41              path_needs_slash = (\n   42                  not path_valid and (\n   43:                     settings.APPEND_SLASH and not language_path.endswith('/') and\n   44                      is_valid_path('%s/' % language_path, urlconf)\n   45                  )\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/middleware/security.py:\n    1  import re\n    2  \n    3: from django.conf import settings\n    4  from django.http import HttpResponsePermanentRedirect\n    5  from django.utils.deprecation import MiddlewareMixin\n    .\n    8  class SecurityMiddleware(MiddlewareMixin):\n    9      def __init__(self, get_response=None):\n   10:         self.sts_seconds = settings.SECURE_HSTS_SECONDS\n   11:         self.sts_include_subdomains = settings.SECURE_HSTS_INCLUDE_SUBDOMAINS\n   12:         self.content_type_nosniff = settings.SECURE_CONTENT_TYPE_NOSNIFF\n   13:         self.xss_filter = settings.SECURE_BROWSER_XSS_FILTER\n   14:         self.redirect = settings.SECURE_SSL_REDIRECT\n   15:         self.redirect_host = settings.SECURE_SSL_HOST\n   16:         self.redirect_exempt = [re.compile(r) for r in settings.SECURE_REDIRECT_EXEMPT]\n   17          self.get_response = get_response\n   18  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/template/context.py:\n  229  \n  230          self.template = template\n  231:         # Set context processors according to the template engine's settings.\n  232          processors = (template.engine.template_context_processors +\n  233                        self._processors)\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/template/context_processors.py:\n   12  import itertools\n   13  \n   14: from django.conf import settings\n   15  from django.middleware.csrf import get_token\n   16  from django.utils.encoding import smart_text\n   ..\n   41      \"\"\"\n   42      context_extras = {}\n   43:     if settings.DEBUG and request.META.get('REMOTE_ADDR') in settings.INTERNAL_IPS:\n   44          context_extras['debug'] = True\n   45          from django.db import connections\n   ..\n   56      from django.utils import translation\n   57      return {\n   58:         'LANGUAGES': settings.LANGUAGES,\n   59          'LANGUAGE_CODE': translation.get_language(),\n   60          'LANGUAGE_BIDI': translation.get_language_bidi(),\n   ..\n   71      Adds static-related context variables to the context.\n   72      \"\"\"\n   73:     return {'STATIC_URL': settings.STATIC_URL}\n   74  \n   75  \n   ..\n   78      Adds media-related context variables to the context.\n   79      \"\"\"\n   80:     return {'MEDIA_URL': settings.MEDIA_URL}\n   81  \n   82  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/template/defaulttags.py:\n    8  from itertools import cycle as itertools_cycle, groupby\n    9  \n   10: from django.conf import settings\n   11  from django.utils import six, timezone\n   12  from django.utils.encoding import force_text, smart_text\n   ..\n   61              # It's very probable that the token is missing because of\n   62              # misconfiguration, so we raise a warning\n   63:             if settings.DEBUG:\n   64                  warnings.warn(\n   65                      \"A {% csrf_token %} was used in a template, but the context \"\n   ..\n  374  \n  375      def render(self, context):\n  376:         tzinfo = timezone.get_current_timezone() if settings.USE_TZ else None\n  377          formatted = date(datetime.now(tz=tzinfo), self.format_string)\n  378  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/template/utils.py:\n    3  \n    4  from django.apps import apps\n    5: from django.conf import settings\n    6  from django.core.exceptions import ImproperlyConfigured\n    7  from django.utils import lru_cache\n    .\n   19          \"\"\"\n   20          templates is an optional list of template engine definitions\n   21:         (structured like settings.TEMPLATES).\n   22          \"\"\"\n   23          self._templates = templates\n   ..\n   27      def templates(self):\n   28          if self._templates is None:\n   29:             self._templates = settings.TEMPLATES\n   30  \n   31          templates = OrderedDict()\n   ..\n   56              raise ImproperlyConfigured(\n   57                  \"Template engine aliases aren't unique, duplicates: {}. \"\n   58:                 \"Set a unique NAME for each engine in settings.TEMPLATES.\"\n   59                  .format(\", \".join(duplicates)))\n   60  \n   ..\n   70                  raise InvalidTemplateEngineError(\n   71                      \"Could not find config for '{}' \"\n   72:                     \"in settings.TEMPLATES\".format(alias))\n   73  \n   74              # If importing or initializing the backend raises an exception,\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/template/backends/base.py:\n   19          Initializes the template engine.\n   20  \n   21:         Receives the configuration settings as a dict.\n   22          \"\"\"\n   23          params = params.copy()\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/template/backends/django.py:\n    7  \n    8  from django.apps import apps\n    9: from django.conf import settings\n   10  from django.template import TemplateDoesNotExist\n   11  from django.template.context import make_context\n   ..\n   25          options = params.pop('OPTIONS').copy()\n   26          options.setdefault('autoescape', True)\n   27:         options.setdefault('debug', settings.DEBUG)\n   28:         options.setdefault('file_charset', settings.FILE_CHARSET)\n   29          libraries = options.get('libraries', {})\n   30          options['libraries'] = self.get_templatetag_libraries(libraries)\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/template/backends/dummy.py:\n    6  import string\n    7  \n    8: from django.conf import settings\n    9  from django.core.exceptions import ImproperlyConfigured\n   10  from django.template import Origin, TemplateDoesNotExist\n   ..\n   34          for template_file in self.iter_template_filenames(template_name):\n   35              try:\n   36:                 with io.open(template_file, encoding=settings.FILE_CHARSET) as fp:\n   37                      template_code = fp.read()\n   38              except IOError as e:\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/template/backends/jinja2.py:\n    6  import jinja2\n    7  \n    8: from django.conf import settings\n    9  from django.template import TemplateDoesNotExist, TemplateSyntaxError\n   10  from django.utils import six\n   ..\n   30              options['loader'] = jinja2.FileSystemLoader(self.template_dirs)\n   31          options.setdefault('autoescape', True)\n   32:         options.setdefault('auto_reload', settings.DEBUG)\n   33          options.setdefault('undefined',\n   34:                            jinja2.DebugUndefined if settings.DEBUG else jinja2.Undefined)\n   35  \n   36          self.env = environment_cls(**options)\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/templatetags/i18n.py:\n    3  import sys\n    4  \n    5: from django.conf import settings\n    6  from django.template import Library, Node, TemplateSyntaxError, Variable\n    7  from django.template.base import TOKEN_TEXT, TOKEN_VAR, render_value_in_context\n    .\n   18  \n   19      def render(self, context):\n   20:         context[self.variable] = [(k, translation.ugettext(v)) for k, v in settings.LANGUAGES]\n   21          return ''\n   22  \n   ..\n  208  \n  209      This will just pull the LANGUAGES setting from\n  210:     your setting file (or the default settings) and\n  211      put it into the named variable.\n  212      \"\"\"\n  ...\n  244      This will store a list of language information dictionaries for the given\n  245      language codes in a context variable. The language codes can be specified\n  246:     either as a list of strings or a settings.LANGUAGES style list (or any\n  247      sequence of sequences whose first items are language codes).\n  248  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/templatetags/l10n.py:\n   10      \"\"\"\n   11      Forces a value to be rendered as a localized value,\n   12:     regardless of the value of ``settings.USE_L10N``.\n   13      \"\"\"\n   14      return force_text(formats.localize(value, use_l10n=True))\n   ..\n   19      \"\"\"\n   20      Forces a value to be rendered as a non-localized value,\n   21:     regardless of the value of ``settings.USE_L10N``.\n   22      \"\"\"\n   23      return force_text(value)\n   ..\n   44      \"\"\"\n   45      Forces or prevents localization of values, regardless of the value of\n   46:     `settings.USE_L10N`.\n   47  \n   48      Sample usage::\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/templatetags/static.py:\n   38      def handle_simple(cls, name):\n   39          try:\n   40:             from django.conf import settings\n   41          except ImportError:\n   42              prefix = ''\n   43          else:\n   44:             prefix = iri_to_uri(getattr(settings, name, ''))\n   45          return prefix\n   46  \n   ..\n   57      \"\"\"\n   58      Populates a template variable with the static prefix,\n   59:     ``settings.STATIC_URL``.\n   60  \n   61      Usage::\n   ..\n   75      \"\"\"\n   76      Populates a template variable with the media prefix,\n   77:     ``settings.MEDIA_URL``.\n   78  \n   79      Usage::\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/templatetags/tz.py:\n  132      \"\"\"\n  133      Forces or prevents conversion of datetime objects to local time,\n  134:     regardless of the value of ``settings.USE_TZ``.\n  135  \n  136      Sample usage::\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/test/__init__.py:\n    9  )\n   10  from django.test.utils import (\n   11:     ignore_warnings, modify_settings, override_settings,\n   12      override_system_checks, tag,\n   13  )\n   ..\n   17      'SimpleTestCase', 'LiveServerTestCase', 'skipIfDBFeature',\n   18      'skipUnlessAnyDBFeature', 'skipUnlessDBFeature', 'ignore_warnings',\n   19:     'modify_settings', 'override_settings', 'override_system_checks', 'tag',\n   20  ]\n   21  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/test/client.py:\n   10  from io import BytesIO\n   11  \n   12: from django.conf import settings\n   13  from django.core.handlers.base import BaseHandler\n   14  from django.core.handlers.wsgi import ISO_8859_1, UTF_8, WSGIRequest\n   ..\n  125      def __call__(self, environ):\n  126          # Set up middleware if needed. We couldn't do this earlier, because\n  127:         # settings weren't available.\n  128          if self._middleware_chain is None:\n  129              self.load_middleware()\n  ...\n  186  \n  187      def to_bytes(s):\n  188:         return force_bytes(s, settings.DEFAULT_CHARSET)\n  189  \n  190      # Not by any means perfect, but good enough for our purposes.\n  ...\n  226  def encode_file(boundary, key, file):\n  227      def to_bytes(s):\n  228:         return force_bytes(s, settings.DEFAULT_CHARSET)\n  229      filename = os.path.basename(file.name) if hasattr(file, 'name') else ''\n  230      if hasattr(file, 'content_type'):\n  ...\n  309                  charset = match.group(1)\n  310              else:\n  311:                 charset = settings.DEFAULT_CHARSET\n  312              return force_bytes(data, encoding=charset)\n  313  \n  ...\n  386          \"\"\"Constructs an arbitrary HTTP request.\"\"\"\n  387          parsed = urlparse(force_str(path))\n  388:         data = force_bytes(data, settings.DEFAULT_CHARSET)\n  389          r = {\n  390              'PATH_INFO': self._get_path(parsed),\n  ...\n  443          Obtains the current session variables.\n  444          \"\"\"\n  445:         engine = import_module(settings.SESSION_ENGINE)\n  446:         cookie = self.cookies.get(settings.SESSION_COOKIE_NAME)\n  447          if cookie:\n  448              return engine.SessionStore(cookie.value)\n  ...\n  450          session = engine.SessionStore()\n  451          session.save()\n  452:         self.cookies[settings.SESSION_COOKIE_NAME] = session.session_key\n  453          return session\n  454      session = property(_session)\n  ...\n  628      def force_login(self, user, backend=None):\n  629          if backend is None:\n  630:             backend = settings.AUTHENTICATION_BACKENDS[0]\n  631          user.backend = backend\n  632          self._login(user, backend)\n  ...\n  634      def _login(self, user, backend=None):\n  635          from django.contrib.auth import login\n  636:         engine = import_module(settings.SESSION_ENGINE)\n  637  \n  638          # Create a fake request to store login details.\n  ...\n  649  \n  650          # Set the cookie to represent the session.\n  651:         session_cookie = settings.SESSION_COOKIE_NAME\n  652          self.cookies[session_cookie] = request.session.session_key\n  653          cookie_data = {\n  654              'max-age': None,\n  655              'path': '/',\n  656:             'domain': settings.SESSION_COOKIE_DOMAIN,\n  657:             'secure': settings.SESSION_COOKIE_SECURE or None,\n  658              'expires': None,\n  659          }\n  ...\n  669  \n  670          request = HttpRequest()\n  671:         engine = import_module(settings.SESSION_ENGINE)\n  672          if self.session:\n  673              request.session = self.session\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/test/runner.py:\n   10  from importlib import import_module\n   11  \n   12: from django.conf import settings\n   13  from django.core.exceptions import ImproperlyConfigured\n   14  from django.db import DEFAULT_DB_ALIAS, connections\n   ..\n  242      for alias in connections:\n  243          connection = connections[alias]\n  244:         settings_dict = connection.creation.get_test_db_clone_settings(_worker_id)\n  245:         # connection.settings_dict must be updated in place for changes to be\n  246          # reflected in django.db.connections. If the following line assigned\n  247:         # connection.settings_dict = settings_dict, new threads would connect\n  248          # to the default database instead of the appropriate clone.\n  249:         connection.settings_dict.update(settings_dict)\n  250          connection.close()\n  251  \n  ...\n  413      def setup_test_environment(self, **kwargs):\n  414          setup_test_environment()\n  415:         settings.DEBUG = False\n  416          unittest.installHandler()\n  417  \n  ...\n  694      for alias in connections:\n  695          connection = connections[alias]\n  696:         test_settings = connection.settings_dict['TEST']\n  697  \n  698:         if test_settings['MIRROR']:\n  699              # If the database is marked as a test mirror, save the alias.\n  700:             mirrored_aliases[alias] = test_settings['MIRROR']\n  701          else:\n  702              # Store a tuple with DB parameters that uniquely identify it.\n  ...\n  705              item = test_databases.setdefault(\n  706                  connection.creation.test_db_signature(),\n  707:                 (connection.settings_dict['NAME'], set())\n  708              )\n  709              item[1].add(alias)\n  710  \n  711:             if 'DEPENDENCIES' in test_settings:\n  712:                 dependencies[alias] = test_settings['DEPENDENCIES']\n  713              else:\n  714                  if alias != DEFAULT_DB_ALIAS and connection.creation.test_db_signature() != default_sig:\n  715:                     dependencies[alias] = test_settings.get('DEPENDENCIES', [DEFAULT_DB_ALIAS])\n  716  \n  717      test_databases = dependency_ordered(test_databases.items(), dependencies)\n  ...\n  741                      autoclobber=not interactive,\n  742                      keepdb=keepdb,\n  743:                     serialize=connection.settings_dict.get(\"TEST\", {}).get(\"SERIALIZE\", True),\n  744                  )\n  745                  if parallel > 1:\n  ...\n  753              else:\n  754                  connections[alias].creation.set_as_test_mirror(\n  755:                     connections[first_alias].settings_dict)\n  756  \n  757      # Configure the test mirrors.\n  758      for alias, mirror_alias in mirrored_aliases.items():\n  759          connections[alias].creation.set_as_test_mirror(\n  760:             connections[mirror_alias].settings_dict)\n  761  \n  762      if debug_sql:\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/test/signals.py:\n   17  # except for cases where the receiver is related to a contrib app.\n   18  \n   19: # Settings that may not work well when using 'override_settings' (#19031)\n   20: COMPLEX_OVERRIDE_SETTINGS = {'DATABASES'}\n   21  \n   22  \n   ..\n  129  @receiver(setting_changed)\n  130  def complex_setting_changed(**kwargs):\n  131:     if kwargs['enter'] and kwargs['setting'] in COMPLEX_OVERRIDE_SETTINGS:\n  132          # Considering the current implementation of the signals framework,\n  133:         # stacklevel=5 shows the line containing the override_settings call.\n  134          warnings.warn(\"Overriding setting %s can lead to unexpected behavior.\"\n  135                        % kwargs['setting'], stacklevel=5)\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/test/testcases.py:\n   18  \n   19  from django.apps import apps\n   20: from django.conf import settings\n   21  from django.core import mail\n   22  from django.core.exceptions import ImproperlyConfigured, ValidationError\n   ..\n   34  from django.test.signals import setting_changed, template_rendered\n   35  from django.test.utils import (\n   36:     CaptureQueriesContext, ContextList, compare_xml, modify_settings,\n   37:     override_settings,\n   38  )\n   39  from django.utils import six\n   ..\n  158      # Can be overridden in derived classes.\n  159      client_class = Client\n  160:     _overridden_settings = None\n  161:     _modified_settings = None\n  162  \n  163      # Tests shouldn't be allowed to query the database since\n  ...\n  168      def setUpClass(cls):\n  169          super(SimpleTestCase, cls).setUpClass()\n  170:         if cls._overridden_settings:\n  171:             cls._cls_overridden_context = override_settings(**cls._overridden_settings)\n  172              cls._cls_overridden_context.enable()\n  173:         if cls._modified_settings:\n  174:             cls._cls_modified_context = modify_settings(cls._modified_settings)\n  175              cls._cls_modified_context.enable()\n  176          if not cls.allow_database_queries:\n  ...\n  232          pass\n  233  \n  234:     def settings(self, **kwargs):\n  235          \"\"\"\n  236          A context manager that temporarily sets a setting and reverts to the original value when exiting the context.\n  237          \"\"\"\n  238:         return override_settings(**kwargs)\n  239  \n  240:     def modify_settings(self, **kwargs):\n  241          \"\"\"\n  242          A context manager that temporarily applies changes a list setting and\n  243          reverts back to the original value when exiting the context.\n  244          \"\"\"\n  245:         return modify_settings(**kwargs)\n  246  \n  247      def assertRedirects(self, response, expected_url, status_code=302,\n  ...\n  829              apps.set_available_apps(self.available_apps)\n  830              setting_changed.send(\n  831:                 sender=settings._wrapped.__class__,\n  832                  setting='INSTALLED_APPS',\n  833                  value=self.available_apps,\n  ...\n  842                  apps.unset_available_apps()\n  843                  setting_changed.send(\n  844:                     sender=settings._wrapped.__class__,\n  845                      setting='INSTALLED_APPS',\n  846:                     value=settings.INSTALLED_APPS,\n  847                      enter=False,\n  848                  )\n  ...\n  856              return [\n  857                  alias for alias in connections\n  858:                 if include_mirrors or not connections[alias].settings_dict['TEST']['MIRROR']\n  859              ]\n  860          else:\n  ...\n  920              if self.available_apps is not None:\n  921                  apps.unset_available_apps()\n  922:                 setting_changed.send(sender=settings._wrapped.__class__,\n  923                                       setting='INSTALLED_APPS',\n  924:                                      value=settings.INSTALLED_APPS,\n  925                                       enter=False)\n  926  \n  ...\n 1145      \"\"\"\n 1146      WSGI middleware that intercepts calls to a directory, as defined by one of\n 1147:     the *_ROOT settings, and serves those files, publishing them under *_URL.\n 1148      \"\"\"\n 1149      def __init__(self, application):\n ....\n 1200  \n 1201      def get_base_dir(self):\n 1202:         return settings.STATIC_ROOT\n 1203  \n 1204      def get_base_url(self):\n 1205:         return settings.STATIC_URL\n 1206  \n 1207  \n ....\n 1213  \n 1214      def get_base_dir(self):\n 1215:         return settings.MEDIA_ROOT\n 1216  \n 1217      def get_base_url(self):\n 1218:         return settings.MEDIA_URL\n 1219  \n 1220  \n ....\n 1312              # If using in-memory sqlite databases, pass the connections to\n 1313              # the server thread.\n 1314:             if conn.vendor == 'sqlite' and conn.is_in_memory_db(conn.settings_dict['NAME']):\n 1315                  # Explicitly enable thread-shareability for this connection\n 1316                  conn.allow_thread_sharing = True\n ....\n 1373          # Restore sqlite in-memory database connections' non-shareability\n 1374          for conn in connections.all():\n 1375:             if conn.vendor == 'sqlite' and conn.is_in_memory_db(conn.settings_dict['NAME']):\n 1376                  conn.allow_thread_sharing = False\n 1377  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/test/utils.py:\n   11  from django.apps import apps\n   12  from django.apps.registry import Apps\n   13: from django.conf import UserSettingsHolder, settings\n   14  from django.core import mail\n   15  from django.core.signals import request_started\n   ..\n   33  __all__ = (\n   34      'Approximate', 'ContextList', 'isolate_lru_cache', 'get_runner',\n   35:     'modify_settings', 'override_settings',\n   36      'requires_tz_support',\n   37      'setup_test_environment', 'teardown_test_environment',\n   ..\n  103      Template._render = instrumented_test_render\n  104  \n  105:     # Storing previous values in the settings module itself is problematic.\n  106      # Store them in arbitrary (but related) modules instead. See #20636.\n  107  \n  108:     mail._original_email_backend = settings.EMAIL_BACKEND\n  109:     settings.EMAIL_BACKEND = 'django.core.mail.backends.locmem.EmailBackend'\n  110  \n  111:     request._original_allowed_hosts = settings.ALLOWED_HOSTS\n  112:     settings.ALLOWED_HOSTS = ['*']\n  113  \n  114      mail.outbox = []\n  ...\n  125      del Template._original_render\n  126  \n  127:     settings.EMAIL_BACKEND = mail._original_email_backend\n  128      del mail._original_email_backend\n  129  \n  130:     settings.ALLOWED_HOSTS = request._original_allowed_hosts\n  131      del request._original_allowed_hosts\n  132  \n  ...\n  134  \n  135  \n  136: def get_runner(settings, test_runner_class=None):\n  137      if not test_runner_class:\n  138:         test_runner_class = settings.TEST_RUNNER\n  139  \n  140      test_path = test_runner_class.split('.')\n  ...\n  214  \n  215  \n  216: class override_settings(TestContextDecorator):\n  217      \"\"\"\n  218      Acts as either a decorator or a context manager. If it's a decorator it\n  ...\n  223      def __init__(self, **kwargs):\n  224          self.options = kwargs\n  225:         super(override_settings, self).__init__()\n  226  \n  227      def enable(self):\n  228:         # Keep this code at the beginning to leave the settings unchanged\n  229          # in case it raises an exception because INSTALLED_APPS is invalid.\n  230          if 'INSTALLED_APPS' in self.options:\n  ...\n  234                  apps.unset_installed_apps()\n  235                  raise\n  236:         override = UserSettingsHolder(settings._wrapped)\n  237          for key, new_value in self.options.items():\n  238              setattr(override, key, new_value)\n  239:         self.wrapped = settings._wrapped\n  240:         settings._wrapped = override\n  241          for key, new_value in self.options.items():\n  242:             setting_changed.send(sender=settings._wrapped.__class__,\n  243                                   setting=key, value=new_value, enter=True)\n  244  \n  ...\n  246          if 'INSTALLED_APPS' in self.options:\n  247              apps.unset_installed_apps()\n  248:         settings._wrapped = self.wrapped\n  249          del self.wrapped\n  250          for key in self.options:\n  251:             new_value = getattr(settings, key, None)\n  252:             setting_changed.send(sender=settings._wrapped.__class__,\n  253                                   setting=key, value=new_value, enter=False)\n  254  \n  255      def save_options(self, test_func):\n  256:         if test_func._overridden_settings is None:\n  257:             test_func._overridden_settings = self.options\n  258          else:\n  259              # Duplicate dict to prevent subclasses from altering their parent.\n  260:             test_func._overridden_settings = dict(\n  261:                 test_func._overridden_settings, **self.options)\n  262  \n  263      def decorate_class(self, cls):\n  ...\n  266              raise ValueError(\n  267                  \"Only subclasses of Django SimpleTestCase can be decorated \"\n  268:                 \"with override_settings\")\n  269          self.save_options(cls)\n  270          return cls\n  271  \n  272  \n  273: class modify_settings(override_settings):\n  274      \"\"\"\n  275:     Like override_settings, but makes it possible to append, prepend or remove\n  276      items instead of redefining the entire list.\n  277      \"\"\"\n  ...\n  284              assert not args\n  285              self.operations = list(kwargs.items())\n  286:         super(override_settings, self).__init__()\n  287  \n  288      def save_options(self, test_func):\n  289:         if test_func._modified_settings is None:\n  290:             test_func._modified_settings = self.operations\n  291          else:\n  292              # Duplicate list to prevent subclasses from altering their parent.\n  293:             test_func._modified_settings = list(\n  294:                 test_func._modified_settings) + self.operations\n  295  \n  296      def enable(self):\n  ...\n  302                  value = self.options[name]\n  303              except KeyError:\n  304:                 value = list(getattr(settings, name, []))\n  305              for action, items in operations.items():\n  306                  # items my be a single value or an iterable.\n  ...\n  316                      raise ValueError(\"Unsupported action: %s\" % action)\n  317              self.options[name] = value\n  318:         super(modify_settings, self).enable()\n  319  \n  320  \n  ...\n  632      \"\"\"\n  633      test_func = skipIf(jinja2 is None, \"this test requires jinja2\")(test_func)\n  634:     test_func = override_settings(TEMPLATES=[{\n  635          'BACKEND': 'django.template.backends.django.DjangoTemplates',\n  636          'APP_DIRS': True,\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/urls/base.py:\n  131      \"\"\"\n  132      Set the URLconf for the current thread (overriding the default one in\n  133:     settings). If urlconf_name is None, revert back to the default.\n  134      \"\"\"\n  135      if urlconf_name:\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/urls/resolvers.py:\n   13  from importlib import import_module\n   14  \n   15: from django.conf import settings\n   16  from django.core.exceptions import ImproperlyConfigured\n   17  from django.utils import lru_cache, six\n   ..\n   64  def get_resolver(urlconf=None):\n   65      if urlconf is None:\n   66:         from django.conf import settings\n   67:         urlconf = settings.ROOT_URLCONF\n   68      return RegexURLResolver(r'^/', urlconf)\n   69  \n   ..\n  412      @property\n  413      def regex(self):\n  414:         language_code = get_language() or settings.LANGUAGE_CODE\n  415          if language_code not in self._regex_dict:\n  416:             if language_code == settings.LANGUAGE_CODE and not self.prefix_default_language:\n  417                  regex_string = ''\n  418              else:\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/utils/autoreload.py:\n   36  \n   37  from django.apps import apps\n   38: from django.conf import settings\n   39  from django.core.signals import request_finished\n   40  from django.utils import six\n   ..\n  103           if hasattr(filename, '__file__')])\n  104  \n  105:     if not _cached_filenames and settings.USE_I18N:\n  106          # Add the names of the .mo files that can be generated\n  107          # by compilemessages management command to the list of files watched.\n  ...\n  111          for app_config in reversed(list(apps.get_app_configs())):\n  112              basedirs.append(os.path.join(npath(app_config.path), 'locale'))\n  113:         basedirs.extend(settings.LOCALE_PATHS)\n  114          basedirs = [os.path.abspath(basedir) for basedir in basedirs\n  115                      if os.path.isdir(basedir)]\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/utils/cache.py:\n   24  import time\n   25  \n   26: from django.conf import settings\n   27  from django.core.cache import caches\n   28  from django.http import HttpResponse, HttpResponseNotModified\n   ..\n  209      \"\"\"\n  210      if cache_timeout is None:\n  211:         cache_timeout = settings.CACHE_MIDDLEWARE_SECONDS\n  212      if cache_timeout < 0:\n  213          cache_timeout = 0  # Can't have max-age negative\n  214:     if settings.USE_ETAGS and not response.has_header('ETag'):\n  215          if hasattr(response, 'render') and callable(response.render):\n  216              response.add_post_render_callback(set_response_etag)\n  ...\n  265  def _i18n_cache_key_suffix(request, cache_key):\n  266      \"\"\"If necessary, adds the current locale or time zone to the cache key.\"\"\"\n  267:     if settings.USE_I18N or settings.USE_L10N:\n  268          # first check if LocaleMiddleware or another middleware added\n  269          # LANGUAGE_CODE to request, then fall back to the active language\n  270:         # which in turn can also fall back to settings.LANGUAGE_CODE\n  271          cache_key += '.%s' % getattr(request, 'LANGUAGE_CODE', get_language())\n  272:     if settings.USE_TZ:\n  273          # The datetime module doesn't restrict the output of tzname().\n  274          # Windows is known to use non-standard, locale-dependent names.\n  ...\n  312      \"\"\"\n  313      if key_prefix is None:\n  314:         key_prefix = settings.CACHE_MIDDLEWARE_KEY_PREFIX\n  315      cache_key = _generate_cache_header_key(key_prefix, request)\n  316      if cache is None:\n  317:         cache = caches[settings.CACHE_MIDDLEWARE_ALIAS]\n  318      headerlist = cache.get(cache_key)\n  319      if headerlist is not None:\n  ...\n  337      \"\"\"\n  338      if key_prefix is None:\n  339:         key_prefix = settings.CACHE_MIDDLEWARE_KEY_PREFIX\n  340      if cache_timeout is None:\n  341:         cache_timeout = settings.CACHE_MIDDLEWARE_SECONDS\n  342      cache_key = _generate_cache_header_key(key_prefix, request)\n  343      if cache is None:\n  344:         cache = caches[settings.CACHE_MIDDLEWARE_ALIAS]\n  345      if response.has_header('Vary'):\n  346:         is_accept_language_redundant = settings.USE_I18N or settings.USE_L10N\n  347          # If i18n or l10n are used, the generated cache key will be suffixed\n  348          # with the current locale. Adding the raw value of Accept-Language is\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/utils/crypto.py:\n   11  import time\n   12  \n   13: from django.conf import settings\n   14  from django.utils import six\n   15  from django.utils.encoding import force_bytes\n   ..\n   30      \"\"\"\n   31      Returns the HMAC-SHA1 of 'value', using a key generated from key_salt and a\n   32:     secret (which defaults to settings.SECRET_KEY).\n   33  \n   34      A different key_salt should be passed in for every application of HMAC.\n   35      \"\"\"\n   36      if secret is None:\n   37:         secret = settings.SECRET_KEY\n   38  \n   39      key_salt = force_bytes(key_salt)\n   ..\n   73                      random.getstate(),\n   74                      time.time(),\n   75:                     settings.SECRET_KEY)).encode('utf-8')\n   76              ).digest())\n   77      return ''.join(random.choice(allowed_chars) for i in range(length))\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/utils/formats.py:\n    4  from importlib import import_module\n    5  \n    6: from django.conf import settings\n    7  from django.utils import dateformat, datetime_safe, numberformat, six\n    8  from django.utils.encoding import force_str\n    .\n   31  \n   32  \n   33: FORMAT_SETTINGS = frozenset([\n   34      'DECIMAL_SEPARATOR',\n   35      'THOUSAND_SEPARATOR',\n   ..\n   68  \n   69      if format_module_path is None:\n   70:         format_module_path = settings.FORMAT_MODULE_PATH\n   71  \n   72      format_locations = []\n   ..\n   96          lang = get_language()\n   97      if lang not in _format_modules_cache:\n   98:         _format_modules_cache[lang] = list(iter_format_modules(lang, settings.FORMAT_MODULE_PATH))\n   99      modules = _format_modules_cache[lang]\n  100      if reverse:\n  ...\n  106      \"\"\"\n  107      For a specific format type, returns the format for the current\n  108:     language (locale), defaults to the format in the settings.\n  109      format_type is the name of the format, e.g. 'DATE_FORMAT'\n  110  \n  111      If use_l10n is provided and is not None, that will force the value to\n  112:     be localized (or not), overriding the value of settings.USE_L10N.\n  113      \"\"\"\n  114      format_type = force_str(format_type)\n  115:     if use_l10n or (use_l10n is None and settings.USE_L10N):\n  116          if lang is None:\n  117              lang = get_language()\n  ...\n  135                      pass\n  136              _format_cache[cache_key] = None\n  137:     if format_type not in FORMAT_SETTINGS:\n  138          return format_type\n  139      # Return the general setting by default\n  140:     return getattr(settings, format_type)\n  141  \n  142  get_format_lazy = lazy(get_format, six.text_type, list, tuple)\n  ...\n  149  \n  150      If use_l10n is provided and is not None, that will force the value to\n  151:     be localized (or not), overriding the value of settings.USE_L10N.\n  152      \"\"\"\n  153      return dateformat.format(value, get_format(format or 'DATE_FORMAT', use_l10n=use_l10n))\n  ...\n  159  \n  160      If use_l10n is provided and is not None, that will force the value to\n  161:     be localized (or not), overriding the value of settings.USE_L10N.\n  162      \"\"\"\n  163      return dateformat.time_format(value, get_format(format or 'TIME_FORMAT', use_l10n=use_l10n))\n  ...\n  166  def number_format(value, decimal_pos=None, use_l10n=None, force_grouping=False):\n  167      \"\"\"\n  168:     Formats a numeric value using localization settings\n  169  \n  170      If use_l10n is provided and is not None, that will force the value to\n  171:     be localized (or not), overriding the value of settings.USE_L10N.\n  172      \"\"\"\n  173:     if use_l10n or (use_l10n is None and settings.USE_L10N):\n  174          lang = get_language()\n  175      else:\n  ...\n  191  \n  192      If use_l10n is provided and is not None, that will force the value to\n  193:     be localized (or not), overriding the value of settings.USE_L10N.\n  194      \"\"\"\n  195      if isinstance(value, six.string_types):  # Handle strings first for performance reasons.\n  ...\n  238      thousand separator setting. Used with form field input.\n  239      \"\"\"\n  240:     if settings.USE_L10N and isinstance(value, six.string_types):\n  241          parts = []\n  242          decimal_separator = get_format('DECIMAL_SEPARATOR')\n  ...\n  244              value, decimals = value.split(decimal_separator, 1)\n  245              parts.append(decimals)\n  246:         if settings.USE_THOUSAND_SEPARATOR:\n  247              thousand_sep = get_format('THOUSAND_SEPARATOR')\n  248              if thousand_sep == '.' and value.count('.') == 1 and len(value.split('.')[-1]) != 3:\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/utils/http.py:\n  349              raise TooManyFieldsSent(\n  350                  'The number of GET/POST parameters exceeded '\n  351:                 'settings.DATA_UPLOAD_MAX_NUMBER_FIELDS.'\n  352              )\n  353      else:\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/utils/log.py:\n    5  from copy import copy\n    6  \n    7: from django.conf import settings\n    8  from django.core import mail\n    9  from django.core.mail import get_connection\n   ..\n   64  \n   65  \n   66: def configure_logging(logging_config, logging_settings):\n   67      if logging_config:\n   68          # First find the logging configuration function ...\n   ..\n   71          logging.config.dictConfig(DEFAULT_LOGGING)\n   72  \n   73:         # ... then invoke it with the logging settings\n   74:         if logging_settings:\n   75:             logging_config_func(logging_settings)\n   76  \n   77  \n   ..\n   93              subject = '%s (%s IP): %s' % (\n   94                  record.levelname,\n   95:                 ('internal' if request.META.get('REMOTE_ADDR') in settings.INTERNAL_IPS\n   96                   else 'EXTERNAL'),\n   97                  record.getMessage()\n   ..\n  151  class RequireDebugFalse(logging.Filter):\n  152      def filter(self, record):\n  153:         return not settings.DEBUG\n  154  \n  155  \n  156  class RequireDebugTrue(logging.Filter):\n  157      def filter(self, record):\n  158:         return settings.DEBUG\n  159  \n  160  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/utils/numberformat.py:\n    3  from decimal import Decimal\n    4  \n    5: from django.conf import settings\n    6  from django.utils import six\n    7  from django.utils.safestring import mark_safe\n    .\n   19      * thousand_sep: Thousand separator symbol (for example \",\")\n   20      \"\"\"\n   21:     use_grouping = settings.USE_L10N and settings.USE_THOUSAND_SEPARATOR\n   22      use_grouping = use_grouping or force_grouping\n   23      use_grouping = use_grouping and grouping > 0\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/utils/timezone.py:\n   10  from threading import local\n   11  \n   12: from django.conf import settings\n   13  from django.utils import lru_cache, six\n   14  from django.utils.decorators import ContextDecorator\n   ..\n  167  \n  168  \n  169: # In order to avoid accessing settings at compile time,\n  170  # wrap the logic in a function and cache the result.\n  171  @lru_cache.lru_cache()\n  ...\n  174      Returns the default time zone as a tzinfo instance.\n  175  \n  176:     This is the time zone defined by settings.TIME_ZONE.\n  177      \"\"\"\n  178:     if isinstance(settings.TIME_ZONE, six.string_types) and pytz is not None:\n  179:         return pytz.timezone(settings.TIME_ZONE)\n  180      else:\n  181:         # This relies on os.environ['TZ'] being set to settings.TIME_ZONE.\n  182          return LocalTimezone()\n  183  \n  ...\n  243      Unsets the time zone for the current thread.\n  244  \n  245:     Django will then use the time zone defined by settings.TIME_ZONE.\n  246      \"\"\"\n  247      if hasattr(_active, \"value\"):\n  ...\n  285  \n  286      If use_tz is provided and is not None, that will force the value to\n  287:     be converted (or not), overriding the value of settings.USE_TZ.\n  288  \n  289      This function is designed for use by the template engine.\n  ...\n  291      should_convert = (\n  292          isinstance(value, datetime) and\n  293:         (settings.USE_TZ if use_tz is None else use_tz) and\n  294          not is_naive(value) and\n  295          getattr(value, 'convert_to_local_time', True)\n  ...\n  320  def now():\n  321      \"\"\"\n  322:     Returns an aware or naive datetime.datetime, depending on settings.USE_TZ.\n  323      \"\"\"\n  324:     if settings.USE_TZ:\n  325          # timeit shows that datetime.now(tz=utc) is 24% slower\n  326          return datetime.utcnow().replace(tzinfo=utc)\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/utils/translation/__init__.py:\n   33  \n   34  # Here be dragons, so a short explanation of the logic won't hurt:\n   35: # We are trying to solve two problems: (1) access settings, in particular\n   36: # settings.USE_I18N, as late as possible, so that modules can be imported\n   37  # without having to first configure Django, and (2) if some other code creates\n   38  # a reference to one of these functions, don't break that reference when we\n   39  # replace the functions with their real counterparts (once we do access the\n   40: # settings).\n   41  \n   42  class Trans(object):\n   ..\n   54  \n   55      def __getattr__(self, real_name):\n   56:         from django.conf import settings\n   57:         if settings.USE_I18N:\n   58              from django.utils.translation import trans_real as trans\n   59          else:\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/utils/translation/trans_null.py:\n    1  # These are versions of the functions in django.utils.translation.trans_real\n    2  # that don't actually do anything. This is purely for performance, so that\n    3: # settings.USE_I18N = False can use this module rather than trans_real.py.\n    4  \n    5: from django.conf import settings\n    6  from django.utils.encoding import force_text\n    7  \n    .\n   38  \n   39  def get_language():\n   40:     return settings.LANGUAGE_CODE\n   41  \n   42  \n   43  def get_language_bidi():\n   44:     return settings.LANGUAGE_CODE in settings.LANGUAGES_BIDI\n   45  \n   46  \n   ..\n   68  \n   69  def get_language_from_request(request, check_path=False):\n   70:     return settings.LANGUAGE_CODE\n   71  \n   72  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/utils/translation/trans_real.py:\n   11  \n   12  from django.apps import apps\n   13: from django.conf import settings\n   14  from django.conf.locale import LANG_INFO\n   15  from django.core.exceptions import AppRegistryNotReady\n   ..\n   30  _active = local()\n   31  \n   32: # The default translation is based on the settings file.\n   33  _default = None\n   34  \n   ..\n  130  \n  131          self._add_local_translations()\n  132:         if self.__language == settings.LANGUAGE_CODE and self.domain == 'django' and self._catalog is None:\n  133              # default lang should have at least one translation file available.\n  134:             raise IOError(\"No translation files found for default language %s.\" % settings.LANGUAGE_CODE)\n  135          self._add_fallback(localedirs)\n  136          if self._catalog is None:\n  ...\n  158      def _init_translation_catalog(self):\n  159          \"\"\"Creates a base catalog using global django translations.\"\"\"\n  160:         settingsfile = upath(sys.modules[settings.__module__].__file__)\n  161:         localedir = os.path.join(os.path.dirname(settingsfile), 'locale')\n  162          translation = self._new_gnu_trans(localedir)\n  163          self.merge(translation)\n  ...\n  179      def _add_local_translations(self):\n  180          \"\"\"Merges translations defined in LOCALE_PATHS.\"\"\"\n  181:         for localedir in reversed(settings.LOCALE_PATHS):\n  182              translation = self._new_gnu_trans(localedir)\n  183              self.merge(translation)\n  ...\n  187          # Don't set a fallback for the default language or any English variant\n  188          # (as it's empty, so it'll ALWAYS fall back to the default language)\n  189:         if self.__language == settings.LANGUAGE_CODE or self.__language.startswith('en'):\n  190              return\n  191          if self.domain == 'django':\n  192              # Get from cache\n  193:             default_translation = translation(settings.LANGUAGE_CODE)\n  194          else:\n  195              default_translation = DjangoTranslation(\n  196:                 settings.LANGUAGE_CODE, domain=self.domain, localedirs=localedirs\n  197              )\n  198          self.add_fallback(default_translation)\n  ...\n  267              pass\n  268      # If we don't have a real translation object, assume it's the default language.\n  269:     return settings.LANGUAGE_CODE\n  270  \n  271  \n  ...\n  282      else:\n  283          base_lang = get_language().split('-')[0]\n  284:         return base_lang in settings.LANGUAGES_BIDI\n  285  \n  286  \n  ...\n  297          return t\n  298      if _default is None:\n  299:         _default = translation(settings.LANGUAGE_CODE)\n  300      return _default\n  301  \n  ...\n  318          result = type(message)(\"\")\n  319      else:\n  320:         _default = _default or translation(settings.LANGUAGE_CODE)\n  321          translation_object = getattr(_active, \"value\", _default)\n  322  \n  ...\n  371          return getattr(t, translation_function)(singular, plural, number)\n  372      if _default is None:\n  373:         _default = translation(settings.LANGUAGE_CODE)\n  374      return getattr(_default, translation_function)(singular, plural, number)\n  375  \n  ...\n  411      \"\"\"\n  412      globalpath = os.path.join(\n  413:         os.path.dirname(upath(sys.modules[settings.__module__].__file__)), 'locale')\n  414:     return [globalpath] + list(settings.LOCALE_PATHS)\n  415  \n  416  \n  ...\n  438  def get_languages():\n  439      \"\"\"\n  440:     Cache of settings.LANGUAGES in an OrderedDict for easy lookups by key.\n  441      \"\"\"\n  442:     return OrderedDict(settings.LANGUAGES)\n  443  \n  444  \n  ...\n  499      \"\"\"\n  500      Analyzes the request to find what language the user wants the system to\n  501:     show. Only languages listed in settings.LANGUAGES are taken into account.\n  502      If the user requests a sublanguage where we have a main language, we send\n  503      out the main language.\n  ...\n  518              return lang_code\n  519  \n  520:     lang_code = request.COOKIES.get(settings.LANGUAGE_COOKIE_NAME)\n  521  \n  522      try:\n  ...\n  539  \n  540      try:\n  541:         return get_supported_language_variant(settings.LANGUAGE_CODE)\n  542      except LookupError:\n  543:         return settings.LANGUAGE_CODE\n  544  \n  545  dot_re = re.compile(r'\\S')\n  ...\n  579          TRANSLATOR_COMMENT_MARK,\n  580      )\n  581:     src = force_text(src, settings.FILE_CHARSET)\n  582      out = StringIO('')\n  583      message_context = None\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/views/csrf.py:\n    1: from django.conf import settings\n    2  from django.http import HttpResponseForbidden\n    3  from django.template import Context, Engine, TemplateDoesNotExist, loader\n    .\n    7  # We include the template inline since we need to be able to reliably display\n    8  # this error message, especially for the sake of developers, and there isn't any\n    9: # other way of making it available independent of what is in the settings file.\n   10  \n   11  # Only the text appearing with DEBUG=False is translated. Normal translation\n   ..\n   85  \n   86    <p>You're seeing the help section of this page because you have <code>DEBUG =\n   87:   True</code> in your Django settings file. Change that to <code>False</code>,\n   88    and only the initial error message will be displayed.  </p>\n   89  \n   ..\n  130              \"re-enable them, at least for this site, or for 'same-origin' \"\n  131              \"requests.\"),\n  132:         'DEBUG': settings.DEBUG,\n  133          'docs_version': get_docs_version(),\n  134          'more': _(\"More information is available with DEBUG=True.\"),\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/views/debug.py:\n    5  import types\n    6  \n    7: from django.conf import settings\n    8  from django.http import HttpResponse, HttpResponseNotFound\n    9  from django.template import Context, Engine, TemplateDoesNotExist\n   ..\n   20  DEBUG_ENGINE = Engine(debug=True)\n   21  \n   22: HIDDEN_SETTINGS = re.compile('API|TOKEN|KEY|SECRET|PASS|SIGNATURE', flags=re.IGNORECASE)\n   23  \n   24  CLEANSED_SUBSTITUTE = '********************'\n   ..\n   26  \n   27  class CallableSettingWrapper(object):\n   28:     \"\"\" Object to wrap callable appearing in settings\n   29  \n   30      * Not to call in the debug page (#21345).\n   ..\n   45      \"\"\"\n   46      try:\n   47:         if HIDDEN_SETTINGS.search(key):\n   48              cleansed = CLEANSED_SUBSTITUTE\n   49          else:\n   ..\n   63  \n   64  \n   65: def get_safe_settings():\n   66:     \"Returns a dictionary of the settings module, with sensitive settings blurred out.\"\n   67:     settings_dict = {}\n   68:     for k in dir(settings):\n   69          if k.isupper():\n   70:             settings_dict[k] = cleanse_setting(k, getattr(settings, k))\n   71:     return settings_dict\n   72  \n   73  \n   ..\n   89  def get_default_exception_reporter_filter():\n   90      # Instantiate the default filter for the first time and cache it.\n   91:     return import_string(settings.DEFAULT_EXCEPTION_REPORTER_FILTER)()\n   92  \n   93  \n   ..\n  126          deactivate the filter on a per request basis.\n  127          \"\"\"\n  128:         return settings.DEBUG is False\n  129  \n  130      def get_cleansed_multivaluedict(self, request, multivaluedict):\n  ...\n  292              'request': self.request,\n  293              'filtered_POST': self.filter.get_post_parameters(self.request),\n  294:             'settings': get_safe_settings(),\n  295              'sys_executable': sys.executable,\n  296              'sys_version_info': '%d.%d.%d' % sys.version_info[0:3],\n  ...\n  468              return default_urlconf(request)\n  469  \n  470:     urlconf = getattr(request, 'urlconf', settings.ROOT_URLCONF)\n  471      if isinstance(urlconf, types.ModuleType):\n  472          urlconf = urlconf.__name__\n  ...\n  492      c = Context({\n  493          'urlconf': urlconf,\n  494:         'root_urlconf': settings.ROOT_URLCONF,\n  495          'request_path': error_url,\n  496          'urlpatterns': tried,\n  497          'reason': force_bytes(exception, errors='replace'),\n  498          'request': request,\n  499:         'settings': get_safe_settings(),\n  500          'raising_view_name': caller,\n  501      })\n  ...\n  516          \"explanation\": _(\n  517              \"You're seeing this message because you have <code>DEBUG = True</code> in your \"\n  518:             \"Django settings file and you haven't configured any URLs. Get to work!\"\n  519          ),\n  520      })\n  ...\n  850  Python Version: {{ sys_version_info }}\n  851  Installed Applications:\n  852: {{ settings.INSTALLED_APPS|pprint }}\n  853  Installed Middleware:\n  854: {% if settings.MIDDLEWARE is not None %}{{ settings.MIDDLEWARE|pprint }}\"\"\"\n  855: \"\"\"{% else %}{{ settings.MIDDLEWARE_CLASSES|pprint }}{% endif %}\n  856  \n  857  {% if template_does_not_exist %}Template loader postmortem\n  ...\n 1013  {% endif %}\n 1014  \n 1015:   <h3 id=\"settings-info\">Settings</h3>\n 1016:   <h4>Using settings module <code>{{ settings.SETTINGS_MODULE }}</code></h4>\n 1017    <table class=\"req\">\n 1018      <thead>\n ....\n 1023      </thead>\n 1024      <tbody>\n 1025:       {% for var in settings.items|dictsort:0 %}\n 1026          <tr>\n 1027            <td>{{ var.0 }}</td>\n ....\n 1037      <p>\n 1038        You're seeing this error because you have <code>DEBUG = True</code> in your\n 1039:       Django settings file. Change that to <code>False</code>, and Django will\n 1040        display a standard page generated by the handler for this status code.\n 1041      </p>\n ....\n 1058  Server time: {{server_time|date:\"r\"}}\n 1059  Installed Applications:\n 1060: {{ settings.INSTALLED_APPS|pprint }}\n 1061  Installed Middleware:\n 1062: {% if settings.MIDDLEWARE is not None %}{{ settings.MIDDLEWARE|pprint }}\"\"\"\n 1063: \"\"\"{% else %}{{ settings.MIDDLEWARE_CLASSES|pprint }}{% endif %}\n 1064  {% if template_does_not_exist %}Template loader postmortem\n 1065  {% if postmortem %}Django tried loading these templates, in this order:\n ....\n 1118  {% else %}Request data not supplied\n 1119  {% endif %}\n 1120: Settings:\n 1121: Using settings module {{ settings.SETTINGS_MODULE }}{% for k, v in settings.items|dictsort:0 %}\n 1122  {{ k }} = {{ v|stringformat:\"r\" }}{% endfor %}\n 1123  \n 1124  {% if not is_email %}\n 1125  You're seeing this error because you have DEBUG = True in your\n 1126: Django settings file. Change that to False, and Django will\n 1127  display a standard page generated by the handler for this status code.\n 1128  {% endif %}\n ....\n 1199      <p>\n 1200        You're seeing this error because you have <code>DEBUG = True</code> in\n 1201:       your Django settings file. Change that to <code>False</code>, and Django\n 1202        will display a standard 404 page.\n 1203      </p>\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/views/i18n.py:\n    7  from django import http\n    8  from django.apps import apps\n    9: from django.conf import settings\n   10  from django.template import Context, Engine\n   11  from django.urls import translate_url\n   ..\n   56              else:\n   57                  response.set_cookie(\n   58:                     settings.LANGUAGE_COOKIE_NAME, lang_code,\n   59:                     max_age=settings.LANGUAGE_COOKIE_AGE,\n   60:                     path=settings.LANGUAGE_COOKIE_PATH,\n   61:                     domain=settings.LANGUAGE_COOKIE_DOMAIN,\n   62                  )\n   63      return response\n   ..\n   68      Returns all formats strings required for i18n to work\n   69      \"\"\"\n   70:     FORMAT_SETTINGS = (\n   71          'DATE_FORMAT', 'DATETIME_FORMAT', 'TIME_FORMAT',\n   72          'YEAR_MONTH_FORMAT', 'MONTH_DAY_FORMAT', 'SHORT_DATE_FORMAT',\n   ..\n   76      )\n   77      result = {}\n   78:     for attr in FORMAT_SETTINGS:\n   79          result[attr] = get_format(attr)\n   80      formats = {}\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/django/views/generic/dates.py:\n    3  import datetime\n    4  \n    5: from django.conf import settings\n    6  from django.core.exceptions import ImproperlyConfigured\n    7  from django.db import models\n    .\n  305          if self.uses_datetime_field:\n  306              value = datetime.datetime.combine(value, datetime.time.min)\n  307:             if settings.USE_TZ:\n  308                  value = timezone.make_aware(value, timezone.get_current_timezone())\n  309          return value\n  ...\n  780          # Convert datetimes to dates in the current time zone.\n  781          if generic_view.uses_datetime_field:\n  782:             if settings.USE_TZ:\n  783                  result = timezone.localtime(result)\n  784              result = result.date()\n  ...\n  792      Return the current date in the current time zone.\n  793      \"\"\"\n  794:     if settings.USE_TZ:\n  795          return timezone.localtime(timezone.now()).date()\n  796      else:\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/Django-1.10.3.dist-info/RECORD:\n   16  django/bin/django-admin.py,sha256=FWxg_nmLPNGqXwSMw0QvZsKNQsiVBHrSsNfgALIXqQ0,128\n   17  django/conf/__init__.py,sha256=e_l5zd8n_AHqrTgZm7ZcaBSLtBR3TsI8xMsW70DNe8Q,6888\n   18: django/conf/global_settings.py,sha256=cVSPwed2ntnnvO-vhedQT6rOMV-OIh2YgN0hV91UitA,21818\n   19  django/conf/app_template/__init__.py-tpl,sha256=47DEQpj8HBSa-_TImW-5JCeuQeRkm5NMpJWZG3hSuFU,0\n   20  django/conf/app_template/admin.py-tpl,sha256=suMo4x8I3JBxAFBVIdE-5qnqZ6JAZV0FESABHOSc-vg,63\n   ..\n  341  django/conf/project_template/manage.py-tpl,sha256=wtAF-7_yk_DwcMOyUbj9WZu7m1Vo2y_LUXFCJMmuJXE,816\n  342  django/conf/project_template/project_name/__init__.py-tpl,sha256=47DEQpj8HBSa-_TImW-5JCeuQeRkm5NMpJWZG3hSuFU,0\n  343: django/conf/project_template/project_name/settings.py-tpl,sha256=4JwYHW6nbDUufEkQOQjOY08slnLMETQAJ9dqr4PjsmU,3210\n  344  django/conf/project_template/project_name/urls.py-tpl,sha256=GRf6MbCtMhm4m-6yIHjoFqGF4kKqIDduOy3MhARi7tQ,789\n  345  django/conf/project_template/project_name/wsgi.py-tpl,sha256=YlvOJDVlRT5GdECwWEpeK8i6gRsliG3sLQog8cYPsC8,428\n  ...\n 2897  django/core/management/commands/createcachetable.py,sha256=3lw5YHUx0CHYYU8hzxx1AstpdCwKXIpsO3JU5m0igbU,4433\n 2898  django/core/management/commands/dbshell.py,sha256=OeexBQJXEUArOKWGKpBSsaA043X1UokzNWc_EDbJi5M,1240\n 2899: django/core/management/commands/diffsettings.py,sha256=lk5RXv8C21IkBE9uEtAKnKh1kSjRdIQYK1Pb_Ka8CWg,1573\n 2900  django/core/management/commands/dumpdata.py,sha256=AzfKDBtVKGu1qfnmG0i6CIWv6Jn97PrS1NdVuODtDgk,9116\n 2901  django/core/management/commands/flush.py,sha256=ZX5dqp2FMFFlRtOIcQtmHaPS4e8kXVhH_B84jeq_2jM,3938\n ....\n 3193  django/bin/__pycache__/django-admin.cpython-36.pyc,,\n 3194  django/conf/__pycache__/__init__.cpython-36.pyc,,\n 3195: django/conf/__pycache__/global_settings.cpython-36.pyc,,\n 3196  django/conf/locale/__pycache__/__init__.cpython-36.pyc,,\n 3197  django/conf/locale/ar/__pycache__/__init__.cpython-36.pyc,,\n ....\n 3749  django/core/management/commands/__pycache__/createcachetable.cpython-36.pyc,,\n 3750  django/core/management/commands/__pycache__/dbshell.cpython-36.pyc,,\n 3751: django/core/management/commands/__pycache__/diffsettings.cpython-36.pyc,,\n 3752  django/core/management/commands/__pycache__/dumpdata.cpython-36.pyc,,\n 3753  django/core/management/commands/__pycache__/flush.cpython-36.pyc,,\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/pip/_vendor/appdirs.py:\n   67          macOS:                  ~/Library/Application Support/<AppName>\n   68          Unix:                   ~/.local/share/<AppName>    # or in $XDG_DATA_HOME, if defined\n   69:         Win XP (not roaming):   C:\\Documents and Settings\\<username>\\Application Data\\<AppAuthor>\\<AppName>\n   70:         Win XP (roaming):       C:\\Documents and Settings\\<username>\\Local Settings\\Application Data\\<AppAuthor>\\<AppName>\n   71          Win 7  (not roaming):   C:\\Users\\<username>\\AppData\\Local\\<AppAuthor>\\<AppName>\n   72          Win 7  (roaming):       C:\\Users\\<username>\\AppData\\Roaming\\<AppAuthor>\\<AppName>\n   ..\n  121          macOS:      /Library/Application Support/<AppName>\n  122          Unix:       /usr/local/share/<AppName> or /usr/share/<AppName>\n  123:         Win XP:     C:\\Documents and Settings\\All Users\\Application Data\\<AppAuthor>\\<AppName>\n  124          Vista:      (Fail! \"C:\\ProgramData\" is a hidden *system* directory on Vista.)\n  125          Win 7:      C:\\ProgramData\\<AppAuthor>\\<AppName>   # Hidden, but writeable on Win 7.\n  ...\n  276          macOS:      ~/Library/Caches/<AppName>\n  277          Unix:       ~/.cache/<AppName> (XDG default)\n  278:         Win XP:     C:\\Documents and Settings\\<username>\\Local Settings\\Application Data\\<AppAuthor>\\<AppName>\\Cache\n  279          Vista:      C:\\Users\\<username>\\AppData\\Local\\<AppAuthor>\\<AppName>\\Cache\n  280  \n  281:     On Windows the only suggestion in the MSDN docs is that local settings go in\n  282      the `CSIDL_LOCAL_APPDATA` directory. This is identical to the non-roaming\n  283      app data dir (the default returned by `user_data_dir` above). Apps typically\n  ...\n  333          macOS:      ~/Library/Logs/<AppName>\n  334          Unix:       ~/.cache/<AppName>/log  # or under $XDG_CACHE_HOME if defined\n  335:         Win XP:     C:\\Documents and Settings\\<username>\\Local Settings\\Application Data\\<AppAuthor>\\<AppName>\\Logs\n  336          Vista:      C:\\Users\\<username>\\AppData\\Local\\<AppAuthor>\\<AppName>\\Logs\n  337  \n  338:     On Windows the only suggestion in the MSDN docs is that local settings\n  339      go in the `CSIDL_LOCAL_APPDATA` directory. (Note: I'm interested in\n  340      examples of what some windows apps use for a logs dir.)\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/pip/_vendor/requests/sessions.py:\n    5  ~~~~~~~~~~~~~~~~\n    6  \n    7: This module provides a Session object to manage and persist settings across\n    8  requests (cookies, auth, proxies).\n    9  \"\"\"\n   ..\n  332          self.max_redirects = DEFAULT_REDIRECT_LIMIT\n  333  \n  334:         #: Trust environment settings for proxy configuration, default\n  335          #: authentication and similar.\n  336          self.trust_env = True\n  ...\n  358      def prepare_request(self, request):\n  359          \"\"\"Constructs a :class:`PreparedRequest <PreparedRequest>` for\n  360:         transmission and returns it. The :class:`PreparedRequest` has settings\n  361          merged from the :class:`Request <Request>` instance and those of the\n  362          :class:`Session`.\n  363  \n  364          :param request: :class:`Request` instance to prepare with this\n  365:             session's settings.\n  366          :rtype: requests.PreparedRequest\n  367          \"\"\"\n  ...\n  463          proxies = proxies or {}\n  464  \n  465:         settings = self.merge_environment_settings(\n  466              prep.url, proxies, stream, verify, cert\n  467          )\n  ...\n  472              'allow_redirects': allow_redirects,\n  473          }\n  474:         send_kwargs.update(settings)\n  475          resp = self.send(prep, **send_kwargs)\n  476  \n  ...\n  630          return r\n  631  \n  632:     def merge_environment_settings(self, url, proxies, stream, verify, cert):\n  633          \"\"\"\n  634:         Check the environment and merge it with some settings.\n  635  \n  636          :rtype: dict\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/pip/_vendor/requests/utils.py:\n  580                      return True\n  581  \n  582:     # If the system proxy settings indicate that this URL should be bypassed,\n  583      # don't proxy.\n  584      # The proxy_bypass function is incredibly buggy on macOS in early versions\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/pip/_vendor/requests/packages/urllib3/connection.py:\n  127  \n  128      def _new_conn(self):\n  129:         \"\"\" Establish a socket connection and set nodelay settings on it.\n  130  \n  131          :return: New socket connection.\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/pip/_vendor/requests/packages/urllib3/contrib/appengine.py:\n  188              if timeout._read is not timeout._connect:\n  189                  warnings.warn(\n  190:                     \"URLFetch does not support granular timeout settings, \"\n  191                      \"reverting to total timeout.\", AppEnginePlatformWarning)\n  192              return timeout.total\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/pip/utils/appdirs.py:\n   23          Windows:    C:\\Users\\<username>\\AppData\\Local\\<AppName>\\Cache\n   24  \n   25:     On Windows the only suggestion in the MSDN docs is that local settings go\n   26      in the `CSIDL_LOCAL_APPDATA` directory. This is identical to the\n   27      non-roaming app data dir (the default returned by `user_data_dir`). Apps\n   ..\n   77          Unix:                   ~/.local/share/<AppName>    # or in\n   78                                  $XDG_DATA_HOME, if defined\n   79:         Win XP (not roaming):   C:\\Documents and Settings\\<username>\\ ...\n   80                                  ...Application Data\\<AppName>\n   81:         Win XP (roaming):       C:\\Documents and Settings\\<username>\\Local ...\n   82:                                 ...Settings\\Application Data\\<AppName>\n   83          Win 7  (not roaming):   C:\\\\Users\\<username>\\AppData\\Local\\<AppName>\n   84          Win 7  (roaming):       C:\\\\Users\\<username>\\AppData\\Roaming\\<AppName>\n   ..\n  146          Unix:       /etc or $XDG_CONFIG_DIRS[i]/<AppName>/ for each value in\n  147                      $XDG_CONFIG_DIRS\n  148:         Win XP:     C:\\Documents and Settings\\All Users\\Application ...\n  149                      ...Data\\<AppName>\\\n  150          Vista:      (Fail! \"C:\\ProgramData\" is a hidden *system* directory\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/pkg_resources/_vendor/appdirs.py:\n   67          Mac OS X:               ~/Library/Application Support/<AppName>\n   68          Unix:                   ~/.local/share/<AppName>    # or in $XDG_DATA_HOME, if defined\n   69:         Win XP (not roaming):   C:\\Documents and Settings\\<username>\\Application Data\\<AppAuthor>\\<AppName>\n   70:         Win XP (roaming):       C:\\Documents and Settings\\<username>\\Local Settings\\Application Data\\<AppAuthor>\\<AppName>\n   71          Win 7  (not roaming):   C:\\Users\\<username>\\AppData\\Local\\<AppAuthor>\\<AppName>\n   72          Win 7  (roaming):       C:\\Users\\<username>\\AppData\\Roaming\\<AppAuthor>\\<AppName>\n   ..\n  121          Mac OS X:   /Library/Application Support/<AppName>\n  122          Unix:       /usr/local/share/<AppName> or /usr/share/<AppName>\n  123:         Win XP:     C:\\Documents and Settings\\All Users\\Application Data\\<AppAuthor>\\<AppName>\n  124          Vista:      (Fail! \"C:\\ProgramData\" is a hidden *system* directory on Vista.)\n  125          Win 7:      C:\\ProgramData\\<AppAuthor>\\<AppName>   # Hidden, but writeable on Win 7.\n  ...\n  276          Mac OS X:   ~/Library/Caches/<AppName>\n  277          Unix:       ~/.cache/<AppName> (XDG default)\n  278:         Win XP:     C:\\Documents and Settings\\<username>\\Local Settings\\Application Data\\<AppAuthor>\\<AppName>\\Cache\n  279          Vista:      C:\\Users\\<username>\\AppData\\Local\\<AppAuthor>\\<AppName>\\Cache\n  280  \n  281:     On Windows the only suggestion in the MSDN docs is that local settings go in\n  282      the `CSIDL_LOCAL_APPDATA` directory. This is identical to the non-roaming\n  283      app data dir (the default returned by `user_data_dir` above). Apps typically\n  ...\n  333          Mac OS X:   ~/Library/Logs/<AppName>\n  334          Unix:       ~/.cache/<AppName>/log  # or under $XDG_CACHE_HOME if defined\n  335:         Win XP:     C:\\Documents and Settings\\<username>\\Local Settings\\Application Data\\<AppAuthor>\\<AppName>\\Logs\n  336          Vista:      C:\\Users\\<username>\\AppData\\Local\\<AppAuthor>\\<AppName>\\Logs\n  337  \n  338:     On Windows the only suggestion in the MSDN docs is that local settings\n  339      go in the `CSIDL_LOCAL_APPDATA` directory. (Note: I'm interested in\n  340      examples of what some windows apps use for a logs dir.)\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/setuptools/build_meta.py:\n   73  \n   74  \n   75: def _fix_config(config_settings):\n   76:     config_settings = config_settings or {}\n   77:     config_settings.setdefault('--global-option', [])\n   78:     return config_settings\n   79  \n   80  \n   81: def _get_build_requires(config_settings):\n   82:     config_settings = _fix_config(config_settings)\n   83      requirements = ['setuptools', 'wheel']\n   84  \n   85      sys.argv = sys.argv[:1] + ['egg_info'] + \\\n   86:         config_settings[\"--global-option\"]\n   87      try:\n   88          with Distribution.patch():\n   ..\n   99  \n  100  \n  101: def get_requires_for_build_wheel(config_settings=None):\n  102:     config_settings = _fix_config(config_settings)\n  103:     return _get_build_requires(config_settings)\n  104  \n  105  \n  106: def get_requires_for_build_sdist(config_settings=None):\n  107:     config_settings = _fix_config(config_settings)\n  108:     return _get_build_requires(config_settings)\n  109  \n  110  \n  111: def prepare_metadata_for_build_wheel(metadata_directory, config_settings=None):\n  112      sys.argv = sys.argv[:1] + ['dist_info', '--egg-base', metadata_directory]\n  113      _run_setup()\n  ...\n  138  \n  139  \n  140: def build_wheel(wheel_directory, config_settings=None,\n  141                  metadata_directory=None):\n  142:     config_settings = _fix_config(config_settings)\n  143      wheel_directory = os.path.abspath(wheel_directory)\n  144      sys.argv = sys.argv[:1] + ['bdist_wheel'] + \\\n  145:         config_settings[\"--global-option\"]\n  146      _run_setup()\n  147      if wheel_directory != 'dist':\n  ...\n  156  \n  157  \n  158: def build_sdist(sdist_directory, config_settings=None):\n  159:     config_settings = _fix_config(config_settings)\n  160      sdist_directory = os.path.abspath(sdist_directory)\n  161      sys.argv = sys.argv[:1] + ['sdist'] + \\\n  162:         config_settings[\"--global-option\"]\n  163      _run_setup()\n  164      if sdist_directory != 'dist':\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/setuptools/dist.py:\n  503              for k, v in self.get_option_dict('easy_install').items()\n  504              if k in (\n  505:                 # don't use any other settings\n  506                  'find_links', 'site_dirs', 'index_url',\n  507                  'optimize', 'site_dirs', 'allow_hosts',\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/setuptools/command/easy_install.py:\n 1181                  continue\n 1182              fetch_options[key.replace('_', '-')] = val[1]\n 1183:         # create a settings dictionary suitable for `edit_config`\n 1184:         settings = dict(easy_install=fetch_options)\n 1185          cfg_filename = os.path.join(base, 'setup.cfg')\n 1186:         setopt.edit_config(cfg_filename, settings)\n 1187  \n 1188      def update_pth(self, dist):\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/setuptools/command/saveopts.py:\n    9      def run(self):\n   10          dist = self.distribution\n   11:         settings = {}\n   12  \n   13          for cmd in dist.command_options:\n   ..\n   18              for opt, (src, val) in dist.get_option_dict(cmd).items():\n   19                  if src == \"command line\":\n   20:                     settings.setdefault(cmd, {})[opt] = val\n   21  \n   22:         edit_config(self.filename, settings, self.dry_run)\n   23  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/lib/python3.6/site-packages/setuptools/command/setopt.py:\n   31  \n   32  \n   33: def edit_config(filename, settings, dry_run=False):\n   34:     \"\"\"Edit a configuration file to include `settings`\n   35  \n   36:     `settings` is a dictionary of dictionaries or ``None`` values, keyed by\n   37      command/section name.  A ``None`` value means to delete the entire section,\n   38:     while a dictionary lists settings to be changed or deleted in that section.\n   39      A setting of ``None`` means to delete that setting.\n   40      \"\"\"\n   ..\n   42      opts = configparser.RawConfigParser()\n   43      opts.read([filename])\n   44:     for section, options in settings.items():\n   45          if options is None:\n   46              log.info(\"Deleting section [%s] from %s\", section, filename)\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/src/manage.py:\n    4  \n    5  if __name__ == \"__main__\":\n    6:     os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"tweetme.settings\")\n    7      try:\n    8          from django.core.management import execute_from_command_line\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/src/accounts/models.py:\n    4  from django.db.models import signals\n    5  from django.db.models.signals import post_save\n    6: from django.conf import settings\n    7  from django.db import models\n    8  \n    .\n   47  \n   48  class UserProfile(models.Model):\n   49: \tuser = models.OneToOneField(settings.AUTH_USER_MODEL, related_name='profile')\n   50: \tfollowing = models.ManyToManyField(settings.AUTH_USER_MODEL, blank=True,related_name='followed_by')\n   51  \n   52  \tobjects  =  UserProfileManager()\n   ..\n   73  \n   74  \n   75: post_save.connect(post_save_user_recevier, sender=settings.AUTH_USER_MODEL)\n   76  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/src/accounts/migrations/0001_initial.py:\n    3  from __future__ import unicode_literals\n    4  \n    5: from django.conf import settings\n    6  from django.db import migrations, models\n    7  import django.db.models.deletion\n    .\n   13  \n   14      dependencies = [\n   15:         migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n   16      ]\n   17  \n   ..\n   21              fields=[\n   22                  ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n   23:                 ('following', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='followed_by', to=settings.AUTH_USER_MODEL)),\n   24:                 ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),\n   25              ],\n   26          ),\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/src/accounts/migrations/0002_auto_20171228_1307.py:\n    3  from __future__ import unicode_literals\n    4  \n    5: from django.conf import settings\n    6  from django.db import migrations, models\n    7  import django.db.models.deletion\n    .\n   18              model_name='userprofile',\n   19              name='following',\n   20:             field=models.OneToOneField(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='followed_by', to=settings.AUTH_USER_MODEL),\n   21          ),\n   22      ]\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/src/accounts/migrations/0003_auto_20171229_0401.py:\n    3  from __future__ import unicode_literals\n    4  \n    5: from django.conf import settings\n    6  from django.db import migrations, models\n    7  \n    .\n   10  \n   11      dependencies = [\n   12:         migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n   13          ('accounts', '0002_auto_20171228_1307'),\n   14      ]\n   ..\n   22              model_name='userprofile',\n   23              name='following',\n   24:             field=models.ManyToManyField(blank=True, related_name='followed_by', to=settings.AUTH_USER_MODEL),\n   25          ),\n   26      ]\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/src/accounts/migrations/0004_auto_20171229_0653.py:\n    3  from __future__ import unicode_literals\n    4  \n    5: from django.conf import settings\n    6  from django.db import migrations, models\n    7  \n    .\n   17              model_name='userprofile',\n   18              name='following',\n   19:             field=models.ManyToManyField(related_name='followed_by', to=settings.AUTH_USER_MODEL),\n   20          ),\n   21      ]\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/src/accounts/migrations/0005_auto_20171229_0654.py:\n    3  from __future__ import unicode_literals\n    4  \n    5: from django.conf import settings\n    6  from django.db import migrations, models\n    7  \n    .\n   17              model_name='userprofile',\n   18              name='following',\n   19:             field=models.ManyToManyField(blank=True, related_name='followed_by', to=settings.AUTH_USER_MODEL),\n   20          ),\n   21      ]\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/src/accounts/migrations/0006_auto_20171229_0657.py:\n    3  from __future__ import unicode_literals\n    4  \n    5: from django.conf import settings\n    6  from django.db import migrations, models\n    7  \n    .\n   17              model_name='userprofile',\n   18              name='following',\n   19:             field=models.ManyToManyField(related_name='followed_by', to=settings.AUTH_USER_MODEL),\n   20          ),\n   21      ]\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/src/accounts/migrations/0007_auto_20171229_0658.py:\n    3  from __future__ import unicode_literals\n    4  \n    5: from django.conf import settings\n    6  from django.db import migrations, models\n    7  \n    .\n   17              model_name='userprofile',\n   18              name='following',\n   19:             field=models.ManyToManyField(blank=True, related_name='followed_by', to=settings.AUTH_USER_MODEL),\n   20          ),\n   21      ]\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/src/tweetme/urls.py:\n   19  \n   20  from hashtags.views import HashTagView\n   21: from django.conf import settings\n   22  from django.conf.urls.static import static\n   23  from tweets.api.views import SearchTweetAPIView\n   ..\n   39  ]\n   40  \n   41: if settings.DEBUG:\n   42:  urlpatterns += (static(settings.STATIC_URL, document_root=settings.STATIC_ROOT))\n   43  \n   44  \n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/src/tweetme/wsgi.py:\n   12  from django.core.wsgi import get_wsgi_application\n   13  \n   14: os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"tweetme.settings\")\n   15  \n   16  application = get_wsgi_application()\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/src/tweetme/settings/base.py:\n    1  \"\"\"\n    2: Django settings for tweetme project.\n    3  \n    4  Generated by 'django-admin startproject' using Django 1.10.3.\n    5  \n    6  For more information on this file, see\n    7: https://docs.djangoproject.com/en/1.10/topics/settings/\n    8  \n    9: For the full list of settings and their values, see\n   10: https://docs.djangoproject.com/en/1.10/ref/settings/\n   11  \"\"\"\n   12  \n   ..\n   17  \n   18  \n   19: # Quick-start development settings - unsuitable for production\n   20  # See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/\n   21  \n   ..\n   77  \n   78  # Database\n   79: # https://docs.djangoproject.com/en/1.10/ref/settings/#databases\n   80  \n   81  DATABASES = {\n   ..\n   88  \n   89  # Password validation\n   90: # https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators\n   91  \n   92  AUTH_PASSWORD_VALIDATORS = [\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/src/tweetme/settings/local.py:\n    1  \"\"\"\n    2: Django settings for tweetme project.\n    3  \n    4  Generated by 'django-admin startproject' using Django 1.10.3.\n    5  \n    6  For more information on this file, see\n    7: https://docs.djangoproject.com/en/1.10/topics/settings/\n    8  \n    9: For the full list of settings and their values, see\n   10: https://docs.djangoproject.com/en/1.10/ref/settings/\n   11  \"\"\"\n   12  \n   ..\n   17  \n   18  \n   19: # Quick-start development settings - unsuitable for production\n   20  # See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/\n   21  \n   ..\n   77  \n   78  # Database\n   79: # https://docs.djangoproject.com/en/1.10/ref/settings/#databases\n   80  \n   81  DATABASES = {\n   ..\n   88  \n   89  # Password validation\n   90: # https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators\n   91  \n   92  AUTH_PASSWORD_VALIDATORS = [\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/src/tweetme/settings/production.py:\n    1  \"\"\"\n    2: Django settings for tweetme project.\n    3  \n    4  Generated by 'django-admin startproject' using Django 1.10.3.\n    5  \n    6  For more information on this file, see\n    7: https://docs.djangoproject.com/en/1.10/topics/settings/\n    8  \n    9: For the full list of settings and their values, see\n   10: https://docs.djangoproject.com/en/1.10/ref/settings/\n   11  \"\"\"\n   12  \n   ..\n   17  \n   18  \n   19: # Quick-start development settings - unsuitable for production\n   20  # See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/\n   21  \n   ..\n   77  \n   78  # Database\n   79: # https://docs.djangoproject.com/en/1.10/ref/settings/#databases\n   80  \n   81  DATABASES = {\n   ..\n   88  \n   89  # Password validation\n   90: # https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators\n   91  \n   92  AUTH_PASSWORD_VALIDATORS = [\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/src/tweets/models.py:\n    2  \n    3  from django.db.models.signals import post_save\n    4: from django.conf import settings\n    5  from django.urls import reverse\n    6  from django.core.exceptions import ValidationError\n    .\n   49  class Tweet(models.Model):\n   50  \tparent    = models.ForeignKey(\"self\", blank=True, null=True)\n   51: \tuser      = models.ForeignKey(settings.AUTH_USER_MODEL)\n   52  \tcontent   = models.CharField(max_length=140, validators=[validate_content])\n   53: \tliked     = models.ManyToManyField(settings.AUTH_USER_MODEL, blank=True, related_name='liked')\n   54  \treply     = models.BooleanField(verbose_name='Is a reply?',default=False)\n   55  \tupdated   = models.DateTimeField(auto_now=True)\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/src/tweets/migrations/0004_tweet_user.py:\n    3  from __future__ import unicode_literals\n    4  \n    5: from django.conf import settings\n    6  from django.db import migrations, models\n    7  import django.db.models.deletion\n    .\n   11  \n   12      dependencies = [\n   13:         migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n   14          ('tweets', '0003_auto_20171226_0751'),\n   15      ]\n   ..\n   19              model_name='tweet',\n   20              name='user',\n   21:             field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),\n   22          ),\n   23      ]\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/src/tweets/migrations/0005_auto_20171227_0220.py:\n    3  from __future__ import unicode_literals\n    4  \n    5: from django.conf import settings\n    6  from django.db import migrations, models\n    7  import django.db.models.deletion\n    .\n   18              model_name='tweet',\n   19              name='user',\n   20:             field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),\n   21          ),\n   22      ]\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/src/tweets/migrations/0009_tweet_liked.py:\n    3  from __future__ import unicode_literals\n    4  \n    5: from django.conf import settings\n    6  from django.db import migrations, models\n    7  \n    .\n   10  \n   11      dependencies = [\n   12:         migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n   13          ('tweets', '0008_tweet_parent'),\n   14      ]\n   ..\n   18              model_name='tweet',\n   19              name='liked',\n   20:             field=models.ManyToManyField(blank=True, related_name='liked', to=settings.AUTH_USER_MODEL),\n   21          ),\n   22      ]\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/static-serve/admin/js/vendor/jquery/jquery.js:\n 8116  function ajaxExtend( target, src ) {\n 8117  \tvar key, deep,\n 8118: \t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n 8119  \n 8120  \tfor ( key in src ) {\n ....\n 8297  \tetag: {},\n 8298  \n 8299: \tajaxSettings: {\n 8300  \t\turl: location.href,\n 8301  \t\ttype: \"GET\",\n ....\n 8364  \t},\n 8365  \n 8366: \t// Creates a full fledged settings object into target\n 8367: \t// with both ajaxSettings and settings fields.\n 8368: \t// If target is omitted, writes into ajaxSettings.\n 8369: \tajaxSetup: function( target, settings ) {\n 8370: \t\treturn settings ?\n 8371  \n 8372: \t\t\t// Building a settings object\n 8373: \t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n 8374  \n 8375: \t\t\t// Extending ajaxSettings\n 8376: \t\t\tajaxExtend( jQuery.ajaxSettings, target );\n 8377  \t},\n 8378  \n ....\n 8521  \t\t// Remove hash character (#7531: and string promotion)\n 8522  \t\t// Add protocol if not provided (prefilters might expect it)\n 8523: \t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\n 8524  \t\t// We also use the url parameter if available\n 8525  \t\ts.url = ( ( url || s.url || location.href ) + \"\" ).replace( rhash, \"\" )\n ....\n 9002  \t// Set traditional to true for jQuery <= 1.3.2 behavior.\n 9003  \tif ( traditional === undefined ) {\n 9004: \t\ttraditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;\n 9005  \t}\n 9006  \n ....\n 9060  \n 9061  \n 9062: jQuery.ajaxSettings.xhr = function() {\n 9063  \ttry {\n 9064  \t\treturn new window.XMLHttpRequest();\n ....\n 9075  \t\t1223: 204\n 9076  \t},\n 9077: \txhrSupported = jQuery.ajaxSettings.xhr();\n 9078  \n 9079  support.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\n ....\n 9290  \trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n 9291  \n 9292: // Default jsonp settings\n 9293  jQuery.ajaxSetup( {\n 9294  \tjsonp: \"callback\",\n ....\n 9301  \n 9302  // Detect, normalize options and install callbacks for jsonp requests\n 9303: jQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n 9304  \n 9305  \tvar callbackName, overwritten, responseContainer,\n ....\n 9360  \n 9361  \t\t\t\t// Make sure that re-using the options doesn't screw things around\n 9362: \t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n 9363  \n 9364  \t\t\t\t// Save the callback name for future use\n\n/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/static-serve/admin/js/vendor/jquery/jquery.min.js:\n    2  !function(a,b){\"object\"==typeof module&&\"object\"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error(\"jQuery requires a window with a document\");return b(a)}:b(a)}(\"undefined\"!=typeof window?window:this,function(a,b){var c=[],d=a.document,e=c.slice,f=c.concat,g=c.push,h=c.indexOf,i={},j=i.toString,k=i.hasOwnProperty,l={},m=\"2.2.3\",n=function(a,b){return new n.fn.init(a,b)},o=/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,p=/^-ms-/,q=/-([\\da-z])/gi,r=function(a,b){return b.toUpperCase()};n.fn=n.prototype={jquery:m,constructor:n,selector:\"\",length:0,toArray:function(){return e.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:e.call(this)},pushStack:function(a){var b=n.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a){return n.each(this,a)},map:function(a){return this.pushStack(n.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(e.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor()},push:g,sort:c.sort,splice:c.splice},n.extend=n.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for(\"boolean\"==typeof g&&(j=g,g=arguments[h]||{},h++),\"object\"==typeof g||n.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(a=arguments[h]))for(b in a)c=g[b],d=a[b],g!==d&&(j&&d&&(n.isPlainObject(d)||(e=n.isArray(d)))?(e?(e=!1,f=c&&n.isArray(c)?c:[]):f=c&&n.isPlainObject(c)?c:{},g[b]=n.extend(j,f,d)):void 0!==d&&(g[b]=d));return g},n.extend({expando:\"jQuery\"+(m+Math.random()).replace(/\\D/g,\"\"),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return\"function\"===n.type(a)},isArray:Array.isArray,isWindow:function(a){return null!=a&&a===a.window},isNumeric:function(a){var b=a&&a.toString();return!n.isArray(a)&&b-parseFloat(b)+1>=0},isPlainObject:function(a){var b;if(\"object\"!==n.type(a)||a.nodeType||n.isWindow(a))return!1;if(a.constructor&&!k.call(a,\"constructor\")&&!k.call(a.constructor.prototype||{},\"isPrototypeOf\"))return!1;for(b in a);return void 0===b||k.call(a,b)},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},type:function(a){return null==a?a+\"\":\"object\"==typeof a||\"function\"==typeof a?i[j.call(a)]||\"object\":typeof a},globalEval:function(a){var b,c=eval;a=n.trim(a),a&&(1===a.indexOf(\"use strict\")?(b=d.createElement(\"script\"),b.text=a,d.head.appendChild(b).parentNode.removeChild(b)):c(a))},camelCase:function(a){return a.replace(p,\"ms-\").replace(q,r)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b){var c,d=0;if(s(a)){for(c=a.length;c>d;d++)if(b.call(a[d],d,a[d])===!1)break}else for(d in a)if(b.call(a[d],d,a[d])===!1)break;return a},trim:function(a){return null==a?\"\":(a+\"\").replace(o,\"\")},makeArray:function(a,b){var c=b||[];return null!=a&&(s(Object(a))?n.merge(c,\"string\"==typeof a?[a]:a):g.call(c,a)),c},inArray:function(a,b,c){return null==b?-1:h.call(b,a,c)},merge:function(a,b){for(var c=+b.length,d=0,e=a.length;c>d;d++)a[e++]=b[d];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,e,g=0,h=[];if(s(a))for(d=a.length;d>g;g++)e=b(a[g],g,c),null!=e&&h.push(e);else for(g in a)e=b(a[g],g,c),null!=e&&h.push(e);return f.apply([],h)},guid:1,proxy:function(a,b){var c,d,f;return\"string\"==typeof b&&(c=a[b],b=a,a=c),n.isFunction(a)?(d=e.call(arguments,2),f=function(){return a.apply(b||this,d.concat(e.call(arguments)))},f.guid=a.guid=a.guid||n.guid++,f):void 0},now:Date.now,support:l}),\"function\"==typeof Symbol&&(n.fn[Symbol.iterator]=c[Symbol.iterator]),n.each(\"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\" \"),function(a,b){i[\"[object \"+b+\"]\"]=b.toLowerCase()});function s(a){var b=!!a&&\"length\"in a&&a.length,c=n.type(a);return\"function\"===c||n.isWindow(a)?!1:\"array\"===c||0===b||\"number\"==typeof b&&b>0&&b-1 in a}var t=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u=\"sizzle\"+1*new Date,v=a.document,w=0,x=0,y=ga(),z=ga(),A=ga(),B=function(a,b){return a===b&&(l=!0),0},C=1<<31,D={}.hasOwnProperty,E=[],F=E.pop,G=E.push,H=E.push,I=E.slice,J=function(a,b){for(var c=0,d=a.length;d>c;c++)if(a[c]===b)return c;return-1},K=\"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",L=\"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",M=\"(?:\\\\\\\\.|[\\\\w-]|[^\\\\x00-\\\\xa0])+\",N=\"\\\\[\"+L+\"*(\"+M+\")(?:\"+L+\"*([*^$|!~]?=)\"+L+\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\"+M+\"))|)\"+L+\"*\\\\]\",O=\":(\"+M+\")(?:\\\\((('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\"+N+\")*)|.*)\\\\)|)\",P=new RegExp(L+\"+\",\"g\"),Q=new RegExp(\"^\"+L+\"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\"+L+\"+$\",\"g\"),R=new RegExp(\"^\"+L+\"*,\"+L+\"*\"),S=new RegExp(\"^\"+L+\"*([>+~]|\"+L+\")\"+L+\"*\"),T=new RegExp(\"=\"+L+\"*([^\\\\]'\\\"]*?)\"+L+\"*\\\\]\",\"g\"),U=new RegExp(O),V=new RegExp(\"^\"+M+\"$\"),W={ID:new RegExp(\"^#(\"+M+\")\"),CLASS:new RegExp(\"^\\\\.(\"+M+\")\"),TAG:new RegExp(\"^(\"+M+\"|[*])\"),ATTR:new RegExp(\"^\"+N),PSEUDO:new RegExp(\"^\"+O),CHILD:new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\"+L+\"*(even|odd|(([+-]|)(\\\\d*)n|)\"+L+\"*(?:([+-]|)\"+L+\"*(\\\\d+)|))\"+L+\"*\\\\)|)\",\"i\"),bool:new RegExp(\"^(?:\"+K+\")$\",\"i\"),needsContext:new RegExp(\"^\"+L+\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\"+L+\"*((?:-\\\\d)?\\\\d*)\"+L+\"*\\\\)|)(?=[^-]|$)\",\"i\")},X=/^(?:input|select|textarea|button)$/i,Y=/^h\\d$/i,Z=/^[^{]+\\{\\s*\\[native \\w/,$=/^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,_=/[+~]/,aa=/'|\\\\/g,ba=new RegExp(\"\\\\\\\\([\\\\da-f]{1,6}\"+L+\"?|(\"+L+\")|.)\",\"ig\"),ca=function(a,b,c){var d=\"0x\"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},da=function(){m()};try{H.apply(E=I.call(v.childNodes),v.childNodes),E[v.childNodes.length].nodeType}catch(ea){H={apply:E.length?function(a,b){G.apply(a,I.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function fa(a,b,d,e){var f,h,j,k,l,o,r,s,w=b&&b.ownerDocument,x=b?b.nodeType:9;if(d=d||[],\"string\"!=typeof a||!a||1!==x&&9!==x&&11!==x)return d;if(!e&&((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,p)){if(11!==x&&(o=$.exec(a)))if(f=o[1]){if(9===x){if(!(j=b.getElementById(f)))return d;if(j.id===f)return d.push(j),d}else if(w&&(j=w.getElementById(f))&&t(b,j)&&j.id===f)return d.push(j),d}else{if(o[2])return H.apply(d,b.getElementsByTagName(a)),d;if((f=o[3])&&c.getElementsByClassName&&b.getElementsByClassName)return H.apply(d,b.getElementsByClassName(f)),d}if(c.qsa&&!A[a+\" \"]&&(!q||!q.test(a))){if(1!==x)w=b,s=a;else if(\"object\"!==b.nodeName.toLowerCase()){(k=b.getAttribute(\"id\"))?k=k.replace(aa,\"\\\\$&\"):b.setAttribute(\"id\",k=u),r=g(a),h=r.length,l=V.test(k)?\"#\"+k:\"[id='\"+k+\"']\";while(h--)r[h]=l+\" \"+qa(r[h]);s=r.join(\",\"),w=_.test(a)&&oa(b.parentNode)||b}if(s)try{return H.apply(d,w.querySelectorAll(s)),d}catch(y){}finally{k===u&&b.removeAttribute(\"id\")}}}return i(a.replace(Q,\"$1\"),b,d,e)}function ga(){var a=[];function b(c,e){return a.push(c+\" \")>d.cacheLength&&delete b[a.shift()],b[c+\" \"]=e}return b}function ha(a){return a[u]=!0,a}function ia(a){var b=n.createElement(\"div\");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function ja(a,b){var c=a.split(\"|\"),e=c.length;while(e--)d.attrHandle[c[e]]=b}function ka(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||C)-(~a.sourceIndex||C);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function la(a){return function(b){var c=b.nodeName.toLowerCase();return\"input\"===c&&b.type===a}}function ma(a){return function(b){var c=b.nodeName.toLowerCase();return(\"input\"===c||\"button\"===c)&&b.type===a}}function na(a){return ha(function(b){return b=+b,ha(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function oa(a){return a&&\"undefined\"!=typeof a.getElementsByTagName&&a}c=fa.support={},f=fa.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?\"HTML\"!==b.nodeName:!1},m=fa.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=n.documentElement,p=!f(n),(e=n.defaultView)&&e.top!==e&&(e.addEventListener?e.addEventListener(\"unload\",da,!1):e.attachEvent&&e.attachEvent(\"onunload\",da)),c.attributes=ia(function(a){return a.className=\"i\",!a.getAttribute(\"className\")}),c.getElementsByTagName=ia(function(a){return a.appendChild(n.createComment(\"\")),!a.getElementsByTagName(\"*\").length}),c.getElementsByClassName=Z.test(n.getElementsByClassName),c.getById=ia(function(a){return o.appendChild(a).id=u,!n.getElementsByName||!n.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if(\"undefined\"!=typeof b.getElementById&&p){var c=b.getElementById(a);return c?[c]:[]}},d.filter.ID=function(a){var b=a.replace(ba,ca);return function(a){return a.getAttribute(\"id\")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(ba,ca);return function(a){var c=\"undefined\"!=typeof a.getAttributeNode&&a.getAttributeNode(\"id\");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return\"undefined\"!=typeof b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if(\"*\"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return\"undefined\"!=typeof b.getElementsByClassName&&p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=Z.test(n.querySelectorAll))&&(ia(function(a){o.appendChild(a).innerHTML=\"<a id='\"+u+\"'></a><select id='\"+u+\"-\\r\\\\' msallowcapture=''><option selected=''></option></select>\",a.querySelectorAll(\"[msallowcapture^='']\").length&&q.push(\"[*^$]=\"+L+\"*(?:''|\\\"\\\")\"),a.querySelectorAll(\"[selected]\").length||q.push(\"\\\\[\"+L+\"*(?:value|\"+K+\")\"),a.querySelectorAll(\"[id~=\"+u+\"-]\").length||q.push(\"~=\"),a.querySelectorAll(\":checked\").length||q.push(\":checked\"),a.querySelectorAll(\"a#\"+u+\"+*\").length||q.push(\".#.+[+~]\")}),ia(function(a){var b=n.createElement(\"input\");b.setAttribute(\"type\",\"hidden\"),a.appendChild(b).setAttribute(\"name\",\"D\"),a.querySelectorAll(\"[name=d]\").length&&q.push(\"name\"+L+\"*[*^$|!~]?=\"),a.querySelectorAll(\":enabled\").length||q.push(\":enabled\",\":disabled\"),a.querySelectorAll(\"*,:x\"),q.push(\",.*:\")})),(c.matchesSelector=Z.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ia(function(a){c.disconnectedMatch=s.call(a,\"div\"),s.call(a,\"[s!='']:x\"),r.push(\"!=\",O)}),q=q.length&&new RegExp(q.join(\"|\")),r=r.length&&new RegExp(r.join(\"|\")),b=Z.test(o.compareDocumentPosition),t=b||Z.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===n||a.ownerDocument===v&&t(v,a)?-1:b===n||b.ownerDocument===v&&t(v,b)?1:k?J(k,a)-J(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,g=[a],h=[b];if(!e||!f)return a===n?-1:b===n?1:e?-1:f?1:k?J(k,a)-J(k,b):0;if(e===f)return ka(a,b);c=a;while(c=c.parentNode)g.unshift(c);c=b;while(c=c.parentNode)h.unshift(c);while(g[d]===h[d])d++;return d?ka(g[d],h[d]):g[d]===v?-1:h[d]===v?1:0},n):n},fa.matches=function(a,b){return fa(a,null,null,b)},fa.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(T,\"='$1']\"),c.matchesSelector&&p&&!A[b+\" \"]&&(!r||!r.test(b))&&(!q||!q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return fa(b,n,null,[a]).length>0},fa.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},fa.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&D.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},fa.error=function(a){throw new Error(\"Syntax error, unrecognized expression: \"+a)},fa.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=fa.getText=function(a){var b,c=\"\",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if(\"string\"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=fa.selectors={cacheLength:50,createPseudo:ha,match:W,attrHandle:{},find:{},relative:{\">\":{dir:\"parentNode\",first:!0},\" \":{dir:\"parentNode\"},\"+\":{dir:\"previousSibling\",first:!0},\"~\":{dir:\"previousSibling\"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(ba,ca),a[3]=(a[3]||a[4]||a[5]||\"\").replace(ba,ca),\"~=\"===a[2]&&(a[3]=\" \"+a[3]+\" \"),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),\"nth\"===a[1].slice(0,3)?(a[3]||fa.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*(\"even\"===a[3]||\"odd\"===a[3])),a[5]=+(a[7]+a[8]||\"odd\"===a[3])):a[3]&&fa.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return W.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||\"\":c&&U.test(c)&&(b=g(c,!0))&&(b=c.indexOf(\")\",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(ba,ca).toLowerCase();return\"*\"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+\" \"];return b||(b=new RegExp(\"(^|\"+L+\")\"+a+\"(\"+L+\"|$)\"))&&y(a,function(a){return b.test(\"string\"==typeof a.className&&a.className||\"undefined\"!=typeof a.getAttribute&&a.getAttribute(\"class\")||\"\")})},ATTR:function(a,b,c){return function(d){var e=fa.attr(d,a);return null==e?\"!=\"===b:b?(e+=\"\",\"=\"===b?e===c:\"!=\"===b?e!==c:\"^=\"===b?c&&0===e.indexOf(c):\"*=\"===b?c&&e.indexOf(c)>-1:\"$=\"===b?c&&e.slice(-c.length)===c:\"~=\"===b?(\" \"+e.replace(P,\" \")+\" \").indexOf(c)>-1:\"|=\"===b?e===c||e.slice(0,c.length+1)===c+\"-\":!1):!0}},CHILD:function(a,b,c,d,e){var f=\"nth\"!==a.slice(0,3),g=\"last\"!==a.slice(-4),h=\"of-type\"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?\"nextSibling\":\"previousSibling\",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h,t=!1;if(q){if(f){while(p){m=b;while(m=m[p])if(h?m.nodeName.toLowerCase()===r:1===m.nodeType)return!1;o=p=\"only\"===a&&!o&&\"nextSibling\"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){m=q,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n&&j[2],m=n&&q.childNodes[n];while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if(1===m.nodeType&&++t&&m===b){k[a]=[w,n,t];break}}else if(s&&(m=b,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n),t===!1)while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if((h?m.nodeName.toLowerCase()===r:1===m.nodeType)&&++t&&(s&&(l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),k[a]=[w,t]),m===b))break;return t-=e,t===d||t%d===0&&t/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||fa.error(\"unsupported pseudo: \"+a);return e[u]?e(b):e.length>1?(c=[a,a,\"\",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ha(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=J(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ha(function(a){var b=[],c=[],d=h(a.replace(Q,\"$1\"));return d[u]?ha(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ha(function(a){return function(b){return fa(a,b).length>0}}),contains:ha(function(a){return a=a.replace(ba,ca),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ha(function(a){return V.test(a||\"\")||fa.error(\"unsupported lang: \"+a),a=a.replace(ba,ca).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute(\"xml:lang\")||b.getAttribute(\"lang\"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+\"-\");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return\"input\"===b&&!!a.checked||\"option\"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Y.test(a.nodeName)},input:function(a){return X.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return\"input\"===b&&\"button\"===a.type||\"button\"===b},text:function(a){var b;return\"input\"===a.nodeName.toLowerCase()&&\"text\"===a.type&&(null==(b=a.getAttribute(\"type\"))||\"text\"===b.toLowerCase())},first:na(function(){return[0]}),last:na(function(a,b){return[b-1]}),eq:na(function(a,b,c){return[0>c?c+b:c]}),even:na(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:na(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:na(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:na(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=la(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=ma(b);function pa(){}pa.prototype=d.filters=d.pseudos,d.setFilters=new pa,g=fa.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+\" \"];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){c&&!(e=R.exec(h))||(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=S.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(Q,\" \")}),h=h.slice(c.length));for(g in d.filter)!(e=W[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?fa.error(a):z(a,i).slice(0)};function qa(a){for(var b=0,c=a.length,d=\"\";c>b;b++)d+=a[b].value;return d}function ra(a,b,c){var d=b.dir,e=c&&\"parentNode\"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j,k=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(j=b[u]||(b[u]={}),i=j[b.uniqueID]||(j[b.uniqueID]={}),(h=i[d])&&h[0]===w&&h[1]===f)return k[2]=h[2];if(i[d]=k,k[2]=a(b,c,g))return!0}}}function sa(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function ta(a,b,c){for(var d=0,e=b.length;e>d;d++)fa(a,b[d],c);return c}function ua(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(c&&!c(f,d,e)||(g.push(f),j&&b.push(h)));return g}function va(a,b,c,d,e,f){return d&&!d[u]&&(d=va(d)),e&&!e[u]&&(e=va(e,f)),ha(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||ta(b||\"*\",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:ua(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=ua(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?J(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=ua(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):H.apply(g,r)})}function wa(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[\" \"],i=g?1:0,k=ra(function(a){return a===b},h,!0),l=ra(function(a){return J(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];f>i;i++)if(c=d.relative[a[i].type])m=[ra(sa(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return va(i>1&&sa(m),i>1&&qa(a.slice(0,i-1).concat({value:\" \"===a[i-2].type?\"*\":\"\"})).replace(Q,\"$1\"),c,e>i&&wa(a.slice(i,e)),f>e&&wa(a=a.slice(e)),f>e&&qa(a))}m.push(c)}return sa(m)}function xa(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,o,q,r=0,s=\"0\",t=f&&[],u=[],v=j,x=f||e&&d.find.TAG(\"*\",k),y=w+=null==v?1:Math.random()||.1,z=x.length;for(k&&(j=g===n||g||k);s!==z&&null!=(l=x[s]);s++){if(e&&l){o=0,g||l.ownerDocument===n||(m(l),h=!p);while(q=a[o++])if(q(l,g||n,h)){i.push(l);break}k&&(w=y)}c&&((l=!q&&l)&&r--,f&&t.push(l))}if(r+=s,c&&s!==r){o=0;while(q=b[o++])q(t,u,g,h);if(f){if(r>0)while(s--)t[s]||u[s]||(u[s]=F.call(i));u=ua(u)}H.apply(i,u),k&&!f&&u.length>0&&r+b.length>1&&fa.uniqueSort(i)}return k&&(w=y,j=v),t};return c?ha(f):f}return h=fa.compile=function(a,b){var c,d=[],e=[],f=A[a+\" \"];if(!f){b||(b=g(a)),c=b.length;while(c--)f=wa(b[c]),f[u]?d.push(f):e.push(f);f=A(a,xa(e,d)),f.selector=a}return f},i=fa.select=function(a,b,e,f){var i,j,k,l,m,n=\"function\"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&\"ID\"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(ba,ca),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=W.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(ba,ca),_.test(j[0].type)&&oa(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&qa(j),!a)return H.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,!b||_.test(a)&&oa(b.parentNode)||b),e},c.sortStable=u.split(\"\").sort(B).join(\"\")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ia(function(a){return 1&a.compareDocumentPosition(n.createElement(\"div\"))}),ia(function(a){return a.innerHTML=\"<a href='#'></a>\",\"#\"===a.firstChild.getAttribute(\"href\")})||ja(\"type|href|height|width\",function(a,b,c){return c?void 0:a.getAttribute(b,\"type\"===b.toLowerCase()?1:2)}),c.attributes&&ia(function(a){return a.innerHTML=\"<input/>\",a.firstChild.setAttribute(\"value\",\"\"),\"\"===a.firstChild.getAttribute(\"value\")})||ja(\"value\",function(a,b,c){return c||\"input\"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ia(function(a){return null==a.getAttribute(\"disabled\")})||ja(K,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),fa}(a);n.find=t,n.expr=t.selectors,n.expr[\":\"]=n.expr.pseudos,n.uniqueSort=n.unique=t.uniqueSort,n.text=t.getText,n.isXMLDoc=t.isXML,n.contains=t.contains;var u=function(a,b,c){var d=[],e=void 0!==c;while((a=a[b])&&9!==a.nodeType)if(1===a.nodeType){if(e&&n(a).is(c))break;d.push(a)}return d},v=function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c},w=n.expr.match.needsContext,x=/^<([\\w-]+)\\s*\\/?>(?:<\\/\\1>|)$/,y=/^.[^:#\\[\\.,]*$/;function z(a,b,c){if(n.isFunction(b))return n.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return n.grep(a,function(a){return a===b!==c});if(\"string\"==typeof b){if(y.test(b))return n.filter(b,a,c);b=n.filter(b,a)}return n.grep(a,function(a){return h.call(b,a)>-1!==c})}n.filter=function(a,b,c){var d=b[0];return c&&(a=\":not(\"+a+\")\"),1===b.length&&1===d.nodeType?n.find.matchesSelector(d,a)?[d]:[]:n.find.matches(a,n.grep(b,function(a){return 1===a.nodeType}))},n.fn.extend({find:function(a){var b,c=this.length,d=[],e=this;if(\"string\"!=typeof a)return this.pushStack(n(a).filter(function(){for(b=0;c>b;b++)if(n.contains(e[b],this))return!0}));for(b=0;c>b;b++)n.find(a,e[b],d);return d=this.pushStack(c>1?n.unique(d):d),d.selector=this.selector?this.selector+\" \"+a:a,d},filter:function(a){return this.pushStack(z(this,a||[],!1))},not:function(a){return this.pushStack(z(this,a||[],!0))},is:function(a){return!!z(this,\"string\"==typeof a&&w.test(a)?n(a):a||[],!1).length}});var A,B=/^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/,C=n.fn.init=function(a,b,c){var e,f;if(!a)return this;if(c=c||A,\"string\"==typeof a){if(e=\"<\"===a[0]&&\">\"===a[a.length-1]&&a.length>=3?[null,a,null]:B.exec(a),!e||!e[1]&&b)return!b||b.jquery?(b||c).find(a):this.constructor(b).find(a);if(e[1]){if(b=b instanceof n?b[0]:b,n.merge(this,n.parseHTML(e[1],b&&b.nodeType?b.ownerDocument||b:d,!0)),x.test(e[1])&&n.isPlainObject(b))for(e in b)n.isFunction(this[e])?this[e](b[e]):this.attr(e,b[e]);return this}return f=d.getElementById(e[2]),f&&f.parentNode&&(this.length=1,this[0]=f),this.context=d,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):n.isFunction(a)?void 0!==c.ready?c.ready(a):a(n):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),n.makeArray(a,this))};C.prototype=n.fn,A=n(d);var D=/^(?:parents|prev(?:Until|All))/,E={children:!0,contents:!0,next:!0,prev:!0};n.fn.extend({has:function(a){var b=n(a,this),c=b.length;return this.filter(function(){for(var a=0;c>a;a++)if(n.contains(this,b[a]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=w.test(a)||\"string\"!=typeof a?n(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&n.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?n.uniqueSort(f):f)},index:function(a){return a?\"string\"==typeof a?h.call(n(a),this[0]):h.call(this,a.jquery?a[0]:a):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(n.uniqueSort(n.merge(this.get(),n(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function F(a,b){while((a=a[b])&&1!==a.nodeType);return a}n.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return u(a,\"parentNode\")},parentsUntil:function(a,b,c){return u(a,\"parentNode\",c)},next:function(a){return F(a,\"nextSibling\")},prev:function(a){return F(a,\"previousSibling\")},nextAll:function(a){return u(a,\"nextSibling\")},prevAll:function(a){return u(a,\"previousSibling\")},nextUntil:function(a,b,c){return u(a,\"nextSibling\",c)},prevUntil:function(a,b,c){return u(a,\"previousSibling\",c)},siblings:function(a){return v((a.parentNode||{}).firstChild,a)},children:function(a){return v(a.firstChild)},contents:function(a){return a.contentDocument||n.merge([],a.childNodes)}},function(a,b){n.fn[a]=function(c,d){var e=n.map(this,b,c);return\"Until\"!==a.slice(-5)&&(d=c),d&&\"string\"==typeof d&&(e=n.filter(d,e)),this.length>1&&(E[a]||n.uniqueSort(e),D.test(a)&&e.reverse()),this.pushStack(e)}});var G=/\\S+/g;function H(a){var b={};return n.each(a.match(G)||[],function(a,c){b[c]=!0}),b}n.Callbacks=function(a){a=\"string\"==typeof a?H(a):n.extend({},a);var b,c,d,e,f=[],g=[],h=-1,i=function(){for(e=a.once,d=b=!0;g.length;h=-1){c=g.shift();while(++h<f.length)f[h].apply(c[0],c[1])===!1&&a.stopOnFalse&&(h=f.length,c=!1)}a.memory||(c=!1),b=!1,e&&(f=c?[]:\"\")},j={add:function(){return f&&(c&&!b&&(h=f.length-1,g.push(c)),function d(b){n.each(b,function(b,c){n.isFunction(c)?a.unique&&j.has(c)||f.push(c):c&&c.length&&\"string\"!==n.type(c)&&d(c)})}(arguments),c&&!b&&i()),this},remove:function(){return n.each(arguments,function(a,b){var c;while((c=n.inArray(b,f,c))>-1)f.splice(c,1),h>=c&&h--}),this},has:function(a){return a?n.inArray(a,f)>-1:f.length>0},empty:function(){return f&&(f=[]),this},disable:function(){return e=g=[],f=c=\"\",this},disabled:function(){return!f},lock:function(){return e=g=[],c||(f=c=\"\"),this},locked:function(){return!!e},fireWith:function(a,c){return e||(c=c||[],c=[a,c.slice?c.slice():c],g.push(c),b||i()),this},fire:function(){return j.fireWith(this,arguments),this},fired:function(){return!!d}};return j},n.extend({Deferred:function(a){var b=[[\"resolve\",\"done\",n.Callbacks(\"once memory\"),\"resolved\"],[\"reject\",\"fail\",n.Callbacks(\"once memory\"),\"rejected\"],[\"notify\",\"progress\",n.Callbacks(\"memory\")]],c=\"pending\",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return n.Deferred(function(c){n.each(b,function(b,f){var g=n.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&n.isFunction(a.promise)?a.promise().progress(c.notify).done(c.resolve).fail(c.reject):c[f[0]+\"With\"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?n.extend(a,d):d}},e={};return d.pipe=d.then,n.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+\"With\"](this===e?d:this,arguments),this},e[f[0]+\"With\"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=e.call(arguments),d=c.length,f=1!==d||a&&n.isFunction(a.promise)?d:0,g=1===f?a:n.Deferred(),h=function(a,b,c){return function(d){b[a]=this,c[a]=arguments.length>1?e.call(arguments):d,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(d>1)for(i=new Array(d),j=new Array(d),k=new Array(d);d>b;b++)c[b]&&n.isFunction(c[b].promise)?c[b].promise().progress(h(b,j,i)).done(h(b,k,c)).fail(g.reject):--f;return f||g.resolveWith(k,c),g.promise()}});var I;n.fn.ready=function(a){return n.ready.promise().done(a),this},n.extend({isReady:!1,readyWait:1,holdReady:function(a){a?n.readyWait++:n.ready(!0)},ready:function(a){(a===!0?--n.readyWait:n.isReady)||(n.isReady=!0,a!==!0&&--n.readyWait>0||(I.resolveWith(d,[n]),n.fn.triggerHandler&&(n(d).triggerHandler(\"ready\"),n(d).off(\"ready\"))))}});function J(){d.removeEventListener(\"DOMContentLoaded\",J),a.removeEventListener(\"load\",J),n.ready()}n.ready.promise=function(b){return I||(I=n.Deferred(),\"complete\"===d.readyState||\"loading\"!==d.readyState&&!d.documentElement.doScroll?a.setTimeout(n.ready):(d.addEventListener(\"DOMContentLoaded\",J),a.addEventListener(\"load\",J))),I.promise(b)},n.ready.promise();var K=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if(\"object\"===n.type(c)){e=!0;for(h in c)K(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,n.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(n(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f},L=function(a){return 1===a.nodeType||9===a.nodeType||!+a.nodeType};function M(){this.expando=n.expando+M.uid++}M.uid=1,M.prototype={register:function(a,b){var c=b||{};return a.nodeType?a[this.expando]=c:Object.defineProperty(a,this.expando,{value:c,writable:!0,configurable:!0}),a[this.expando]},cache:function(a){if(!L(a))return{};var b=a[this.expando];return b||(b={},L(a)&&(a.nodeType?a[this.expando]=b:Object.defineProperty(a,this.expando,{value:b,configurable:!0}))),b},set:function(a,b,c){var d,e=this.cache(a);if(\"string\"==typeof b)e[b]=c;else for(d in b)e[d]=b[d];return e},get:function(a,b){return void 0===b?this.cache(a):a[this.expando]&&a[this.expando][b]},access:function(a,b,c){var d;return void 0===b||b&&\"string\"==typeof b&&void 0===c?(d=this.get(a,b),void 0!==d?d:this.get(a,n.camelCase(b))):(this.set(a,b,c),void 0!==c?c:b)},remove:function(a,b){var c,d,e,f=a[this.expando];if(void 0!==f){if(void 0===b)this.register(a);else{n.isArray(b)?d=b.concat(b.map(n.camelCase)):(e=n.camelCase(b),b in f?d=[b,e]:(d=e,d=d in f?[d]:d.match(G)||[])),c=d.length;while(c--)delete f[d[c]]}(void 0===b||n.isEmptyObject(f))&&(a.nodeType?a[this.expando]=void 0:delete a[this.expando])}},hasData:function(a){var b=a[this.expando];return void 0!==b&&!n.isEmptyObject(b)}};var N=new M,O=new M,P=/^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,Q=/[A-Z]/g;function R(a,b,c){var d;if(void 0===c&&1===a.nodeType)if(d=\"data-\"+b.replace(Q,\"-$&\").toLowerCase(),c=a.getAttribute(d),\"string\"==typeof c){try{c=\"true\"===c?!0:\"false\"===c?!1:\"null\"===c?null:+c+\"\"===c?+c:P.test(c)?n.parseJSON(c):c;\n    3  }catch(e){}O.set(a,b,c)}else c=void 0;return c}n.extend({hasData:function(a){return O.hasData(a)||N.hasData(a)},data:function(a,b,c){return O.access(a,b,c)},removeData:function(a,b){O.remove(a,b)},_data:function(a,b,c){return N.access(a,b,c)},_removeData:function(a,b){N.remove(a,b)}}),n.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=O.get(f),1===f.nodeType&&!N.get(f,\"hasDataAttrs\"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf(\"data-\")&&(d=n.camelCase(d.slice(5)),R(f,d,e[d])));N.set(f,\"hasDataAttrs\",!0)}return e}return\"object\"==typeof a?this.each(function(){O.set(this,a)}):K(this,function(b){var c,d;if(f&&void 0===b){if(c=O.get(f,a)||O.get(f,a.replace(Q,\"-$&\").toLowerCase()),void 0!==c)return c;if(d=n.camelCase(a),c=O.get(f,d),void 0!==c)return c;if(c=R(f,d,void 0),void 0!==c)return c}else d=n.camelCase(a),this.each(function(){var c=O.get(this,d);O.set(this,d,b),a.indexOf(\"-\")>-1&&void 0!==c&&O.set(this,a,b)})},null,b,arguments.length>1,null,!0)},removeData:function(a){return this.each(function(){O.remove(this,a)})}}),n.extend({queue:function(a,b,c){var d;return a?(b=(b||\"fx\")+\"queue\",d=N.get(a,b),c&&(!d||n.isArray(c)?d=N.access(a,b,n.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||\"fx\";var c=n.queue(a,b),d=c.length,e=c.shift(),f=n._queueHooks(a,b),g=function(){n.dequeue(a,b)};\"inprogress\"===e&&(e=c.shift(),d--),e&&(\"fx\"===b&&c.unshift(\"inprogress\"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+\"queueHooks\";return N.get(a,c)||N.access(a,c,{empty:n.Callbacks(\"once memory\").add(function(){N.remove(a,[b+\"queue\",c])})})}}),n.fn.extend({queue:function(a,b){var c=2;return\"string\"!=typeof a&&(b=a,a=\"fx\",c--),arguments.length<c?n.queue(this[0],a):void 0===b?this:this.each(function(){var c=n.queue(this,a,b);n._queueHooks(this,a),\"fx\"===a&&\"inprogress\"!==c[0]&&n.dequeue(this,a)})},dequeue:function(a){return this.each(function(){n.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||\"fx\",[])},promise:function(a,b){var c,d=1,e=n.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};\"string\"!=typeof a&&(b=a,a=void 0),a=a||\"fx\";while(g--)c=N.get(f[g],a+\"queueHooks\"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var S=/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,T=new RegExp(\"^(?:([+-])=|)(\"+S+\")([a-z%]*)$\",\"i\"),U=[\"Top\",\"Right\",\"Bottom\",\"Left\"],V=function(a,b){return a=b||a,\"none\"===n.css(a,\"display\")||!n.contains(a.ownerDocument,a)};function W(a,b,c,d){var e,f=1,g=20,h=d?function(){return d.cur()}:function(){return n.css(a,b,\"\")},i=h(),j=c&&c[3]||(n.cssNumber[b]?\"\":\"px\"),k=(n.cssNumber[b]||\"px\"!==j&&+i)&&T.exec(n.css(a,b));if(k&&k[3]!==j){j=j||k[3],c=c||[],k=+i||1;do f=f||\".5\",k/=f,n.style(a,b,k+j);while(f!==(f=h()/i)&&1!==f&&--g)}return c&&(k=+k||+i||0,e=c[1]?k+(c[1]+1)*c[2]:+c[2],d&&(d.unit=j,d.start=k,d.end=e)),e}var X=/^(?:checkbox|radio)$/i,Y=/<([\\w:-]+)/,Z=/^$|\\/(?:java|ecma)script/i,$={option:[1,\"<select multiple='multiple'>\",\"</select>\"],thead:[1,\"<table>\",\"</table>\"],col:[2,\"<table><colgroup>\",\"</colgroup></table>\"],tr:[2,\"<table><tbody>\",\"</tbody></table>\"],td:[3,\"<table><tbody><tr>\",\"</tr></tbody></table>\"],_default:[0,\"\",\"\"]};$.optgroup=$.option,$.tbody=$.tfoot=$.colgroup=$.caption=$.thead,$.th=$.td;function _(a,b){var c=\"undefined\"!=typeof a.getElementsByTagName?a.getElementsByTagName(b||\"*\"):\"undefined\"!=typeof a.querySelectorAll?a.querySelectorAll(b||\"*\"):[];return void 0===b||b&&n.nodeName(a,b)?n.merge([a],c):c}function aa(a,b){for(var c=0,d=a.length;d>c;c++)N.set(a[c],\"globalEval\",!b||N.get(b[c],\"globalEval\"))}var ba=/<|&#?\\w+;/;function ca(a,b,c,d,e){for(var f,g,h,i,j,k,l=b.createDocumentFragment(),m=[],o=0,p=a.length;p>o;o++)if(f=a[o],f||0===f)if(\"object\"===n.type(f))n.merge(m,f.nodeType?[f]:f);else if(ba.test(f)){g=g||l.appendChild(b.createElement(\"div\")),h=(Y.exec(f)||[\"\",\"\"])[1].toLowerCase(),i=$[h]||$._default,g.innerHTML=i[1]+n.htmlPrefilter(f)+i[2],k=i[0];while(k--)g=g.lastChild;n.merge(m,g.childNodes),g=l.firstChild,g.textContent=\"\"}else m.push(b.createTextNode(f));l.textContent=\"\",o=0;while(f=m[o++])if(d&&n.inArray(f,d)>-1)e&&e.push(f);else if(j=n.contains(f.ownerDocument,f),g=_(l.appendChild(f),\"script\"),j&&aa(g),c){k=0;while(f=g[k++])Z.test(f.type||\"\")&&c.push(f)}return l}!function(){var a=d.createDocumentFragment(),b=a.appendChild(d.createElement(\"div\")),c=d.createElement(\"input\");c.setAttribute(\"type\",\"radio\"),c.setAttribute(\"checked\",\"checked\"),c.setAttribute(\"name\",\"t\"),b.appendChild(c),l.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,b.innerHTML=\"<textarea>x</textarea>\",l.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue}();var da=/^key/,ea=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,fa=/^([^.]*)(?:\\.(.+)|)/;function ga(){return!0}function ha(){return!1}function ia(){try{return d.activeElement}catch(a){}}function ja(a,b,c,d,e,f){var g,h;if(\"object\"==typeof b){\"string\"!=typeof c&&(d=d||c,c=void 0);for(h in b)ja(a,h,c,d,b[h],f);return a}if(null==d&&null==e?(e=c,d=c=void 0):null==e&&(\"string\"==typeof c?(e=d,d=void 0):(e=d,d=c,c=void 0)),e===!1)e=ha;else if(!e)return a;return 1===f&&(g=e,e=function(a){return n().off(a),g.apply(this,arguments)},e.guid=g.guid||(g.guid=n.guid++)),a.each(function(){n.event.add(this,b,e,d,c)})}n.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=N.get(a);if(r){c.handler&&(f=c,c=f.handler,e=f.selector),c.guid||(c.guid=n.guid++),(i=r.events)||(i=r.events={}),(g=r.handle)||(g=r.handle=function(b){return\"undefined\"!=typeof n&&n.event.triggered!==b.type?n.event.dispatch.apply(a,arguments):void 0}),b=(b||\"\").match(G)||[\"\"],j=b.length;while(j--)h=fa.exec(b[j])||[],o=q=h[1],p=(h[2]||\"\").split(\".\").sort(),o&&(l=n.event.special[o]||{},o=(e?l.delegateType:l.bindType)||o,l=n.event.special[o]||{},k=n.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&n.expr.match.needsContext.test(e),namespace:p.join(\".\")},f),(m=i[o])||(m=i[o]=[],m.delegateCount=0,l.setup&&l.setup.call(a,d,p,g)!==!1||a.addEventListener&&a.addEventListener(o,g)),l.add&&(l.add.call(a,k),k.handler.guid||(k.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,k):m.push(k),n.event.global[o]=!0)}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=N.hasData(a)&&N.get(a);if(r&&(i=r.events)){b=(b||\"\").match(G)||[\"\"],j=b.length;while(j--)if(h=fa.exec(b[j])||[],o=q=h[1],p=(h[2]||\"\").split(\".\").sort(),o){l=n.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,m=i[o]||[],h=h[2]&&new RegExp(\"(^|\\\\.)\"+p.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"),g=f=m.length;while(f--)k=m[f],!e&&q!==k.origType||c&&c.guid!==k.guid||h&&!h.test(k.namespace)||d&&d!==k.selector&&(\"**\"!==d||!k.selector)||(m.splice(f,1),k.selector&&m.delegateCount--,l.remove&&l.remove.call(a,k));g&&!m.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||n.removeEvent(a,o,r.handle),delete i[o])}else for(o in i)n.event.remove(a,o+b[j],c,d,!0);n.isEmptyObject(i)&&N.remove(a,\"handle events\")}},dispatch:function(a){a=n.event.fix(a);var b,c,d,f,g,h=[],i=e.call(arguments),j=(N.get(this,\"events\")||{})[a.type]||[],k=n.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=n.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,c=0;while((g=f.handlers[c++])&&!a.isImmediatePropagationStopped())a.rnamespace&&!a.rnamespace.test(g.namespace)||(a.handleObj=g,a.data=g.data,d=((n.event.special[g.origType]||{}).handle||g.handler).apply(f.elem,i),void 0!==d&&(a.result=d)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&(\"click\"!==a.type||isNaN(a.button)||a.button<1))for(;i!==this;i=i.parentNode||this)if(1===i.nodeType&&(i.disabled!==!0||\"click\"!==a.type)){for(d=[],c=0;h>c;c++)f=b[c],e=f.selector+\" \",void 0===d[e]&&(d[e]=f.needsContext?n(e,this).index(i)>-1:n.find(e,this,null,[i]).length),d[e]&&d.push(f);d.length&&g.push({elem:i,handlers:d})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},props:\"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which\".split(\" \"),fixHooks:{},keyHooks:{props:\"char charCode key keyCode\".split(\" \"),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:\"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement\".split(\" \"),filter:function(a,b){var c,e,f,g=b.button;return null==a.pageX&&null!=b.clientX&&(c=a.target.ownerDocument||d,e=c.documentElement,f=c.body,a.pageX=b.clientX+(e&&e.scrollLeft||f&&f.scrollLeft||0)-(e&&e.clientLeft||f&&f.clientLeft||0),a.pageY=b.clientY+(e&&e.scrollTop||f&&f.scrollTop||0)-(e&&e.clientTop||f&&f.clientTop||0)),a.which||void 0===g||(a.which=1&g?1:2&g?3:4&g?2:0),a}},fix:function(a){if(a[n.expando])return a;var b,c,e,f=a.type,g=a,h=this.fixHooks[f];h||(this.fixHooks[f]=h=ea.test(f)?this.mouseHooks:da.test(f)?this.keyHooks:{}),e=h.props?this.props.concat(h.props):this.props,a=new n.Event(g),b=e.length;while(b--)c=e[b],a[c]=g[c];return a.target||(a.target=d),3===a.target.nodeType&&(a.target=a.target.parentNode),h.filter?h.filter(a,g):a},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==ia()&&this.focus?(this.focus(),!1):void 0},delegateType:\"focusin\"},blur:{trigger:function(){return this===ia()&&this.blur?(this.blur(),!1):void 0},delegateType:\"focusout\"},click:{trigger:function(){return\"checkbox\"===this.type&&this.click&&n.nodeName(this,\"input\")?(this.click(),!1):void 0},_default:function(a){return n.nodeName(a.target,\"a\")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}}},n.removeEvent=function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c)},n.Event=function(a,b){return this instanceof n.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?ga:ha):this.type=a,b&&n.extend(this,b),this.timeStamp=a&&a.timeStamp||n.now(),void(this[n.expando]=!0)):new n.Event(a,b)},n.Event.prototype={constructor:n.Event,isDefaultPrevented:ha,isPropagationStopped:ha,isImmediatePropagationStopped:ha,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=ga,a&&a.preventDefault()},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=ga,a&&a.stopPropagation()},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=ga,a&&a.stopImmediatePropagation(),this.stopPropagation()}},n.each({mouseenter:\"mouseover\",mouseleave:\"mouseout\",pointerenter:\"pointerover\",pointerleave:\"pointerout\"},function(a,b){n.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return e&&(e===d||n.contains(d,e))||(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),n.fn.extend({on:function(a,b,c,d){return ja(this,a,b,c,d)},one:function(a,b,c,d){return ja(this,a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,n(a.delegateTarget).off(d.namespace?d.origType+\".\"+d.namespace:d.origType,d.selector,d.handler),this;if(\"object\"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return b!==!1&&\"function\"!=typeof b||(c=b,b=void 0),c===!1&&(c=ha),this.each(function(){n.event.remove(this,a,c,b)})}});var ka=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:-]+)[^>]*)\\/>/gi,la=/<script|<style|<link/i,ma=/checked\\s*(?:[^=]|=\\s*.checked.)/i,na=/^true\\/(.*)/,oa=/^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;function pa(a,b){return n.nodeName(a,\"table\")&&n.nodeName(11!==b.nodeType?b:b.firstChild,\"tr\")?a.getElementsByTagName(\"tbody\")[0]||a.appendChild(a.ownerDocument.createElement(\"tbody\")):a}function qa(a){return a.type=(null!==a.getAttribute(\"type\"))+\"/\"+a.type,a}function ra(a){var b=na.exec(a.type);return b?a.type=b[1]:a.removeAttribute(\"type\"),a}function sa(a,b){var c,d,e,f,g,h,i,j;if(1===b.nodeType){if(N.hasData(a)&&(f=N.access(a),g=N.set(b,f),j=f.events)){delete g.handle,g.events={};for(e in j)for(c=0,d=j[e].length;d>c;c++)n.event.add(b,e,j[e][c])}O.hasData(a)&&(h=O.access(a),i=n.extend({},h),O.set(b,i))}}function ta(a,b){var c=b.nodeName.toLowerCase();\"input\"===c&&X.test(a.type)?b.checked=a.checked:\"input\"!==c&&\"textarea\"!==c||(b.defaultValue=a.defaultValue)}function ua(a,b,c,d){b=f.apply([],b);var e,g,h,i,j,k,m=0,o=a.length,p=o-1,q=b[0],r=n.isFunction(q);if(r||o>1&&\"string\"==typeof q&&!l.checkClone&&ma.test(q))return a.each(function(e){var f=a.eq(e);r&&(b[0]=q.call(this,e,f.html())),ua(f,b,c,d)});if(o&&(e=ca(b,a[0].ownerDocument,!1,a,d),g=e.firstChild,1===e.childNodes.length&&(e=g),g||d)){for(h=n.map(_(e,\"script\"),qa),i=h.length;o>m;m++)j=e,m!==p&&(j=n.clone(j,!0,!0),i&&n.merge(h,_(j,\"script\"))),c.call(a[m],j,m);if(i)for(k=h[h.length-1].ownerDocument,n.map(h,ra),m=0;i>m;m++)j=h[m],Z.test(j.type||\"\")&&!N.access(j,\"globalEval\")&&n.contains(k,j)&&(j.src?n._evalUrl&&n._evalUrl(j.src):n.globalEval(j.textContent.replace(oa,\"\")))}return a}function va(a,b,c){for(var d,e=b?n.filter(b,a):a,f=0;null!=(d=e[f]);f++)c||1!==d.nodeType||n.cleanData(_(d)),d.parentNode&&(c&&n.contains(d.ownerDocument,d)&&aa(_(d,\"script\")),d.parentNode.removeChild(d));return a}n.extend({htmlPrefilter:function(a){return a.replace(ka,\"<$1></$2>\")},clone:function(a,b,c){var d,e,f,g,h=a.cloneNode(!0),i=n.contains(a.ownerDocument,a);if(!(l.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||n.isXMLDoc(a)))for(g=_(h),f=_(a),d=0,e=f.length;e>d;d++)ta(f[d],g[d]);if(b)if(c)for(f=f||_(a),g=g||_(h),d=0,e=f.length;e>d;d++)sa(f[d],g[d]);else sa(a,h);return g=_(h,\"script\"),g.length>0&&aa(g,!i&&_(a,\"script\")),h},cleanData:function(a){for(var b,c,d,e=n.event.special,f=0;void 0!==(c=a[f]);f++)if(L(c)){if(b=c[N.expando]){if(b.events)for(d in b.events)e[d]?n.event.remove(c,d):n.removeEvent(c,d,b.handle);c[N.expando]=void 0}c[O.expando]&&(c[O.expando]=void 0)}}}),n.fn.extend({domManip:ua,detach:function(a){return va(this,a,!0)},remove:function(a){return va(this,a)},text:function(a){return K(this,function(a){return void 0===a?n.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=a)})},null,a,arguments.length)},append:function(){return ua(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=pa(this,a);b.appendChild(a)}})},prepend:function(){return ua(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=pa(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return ua(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return ua(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},empty:function(){for(var a,b=0;null!=(a=this[b]);b++)1===a.nodeType&&(n.cleanData(_(a,!1)),a.textContent=\"\");return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return n.clone(this,a,b)})},html:function(a){return K(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a&&1===b.nodeType)return b.innerHTML;if(\"string\"==typeof a&&!la.test(a)&&!$[(Y.exec(a)||[\"\",\"\"])[1].toLowerCase()]){a=n.htmlPrefilter(a);try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(n.cleanData(_(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=[];return ua(this,arguments,function(b){var c=this.parentNode;n.inArray(this,a)<0&&(n.cleanData(_(this)),c&&c.replaceChild(b,this))},a)}}),n.each({appendTo:\"append\",prependTo:\"prepend\",insertBefore:\"before\",insertAfter:\"after\",replaceAll:\"replaceWith\"},function(a,b){n.fn[a]=function(a){for(var c,d=[],e=n(a),f=e.length-1,h=0;f>=h;h++)c=h===f?this:this.clone(!0),n(e[h])[b](c),g.apply(d,c.get());return this.pushStack(d)}});var wa,xa={HTML:\"block\",BODY:\"block\"};function ya(a,b){var c=n(b.createElement(a)).appendTo(b.body),d=n.css(c[0],\"display\");return c.detach(),d}function za(a){var b=d,c=xa[a];return c||(c=ya(a,b),\"none\"!==c&&c||(wa=(wa||n(\"<iframe frameborder='0' width='0' height='0'/>\")).appendTo(b.documentElement),b=wa[0].contentDocument,b.write(),b.close(),c=ya(a,b),wa.detach()),xa[a]=c),c}var Aa=/^margin/,Ba=new RegExp(\"^(\"+S+\")(?!px)[a-z%]+$\",\"i\"),Ca=function(b){var c=b.ownerDocument.defaultView;return c&&c.opener||(c=a),c.getComputedStyle(b)},Da=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e},Ea=d.documentElement;!function(){var b,c,e,f,g=d.createElement(\"div\"),h=d.createElement(\"div\");if(h.style){h.style.backgroundClip=\"content-box\",h.cloneNode(!0).style.backgroundClip=\"\",l.clearCloneStyle=\"content-box\"===h.style.backgroundClip,g.style.cssText=\"border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute\",g.appendChild(h);function i(){h.style.cssText=\"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%\",h.innerHTML=\"\",Ea.appendChild(g);var d=a.getComputedStyle(h);b=\"1%\"!==d.top,f=\"2px\"===d.marginLeft,c=\"4px\"===d.width,h.style.marginRight=\"50%\",e=\"4px\"===d.marginRight,Ea.removeChild(g)}n.extend(l,{pixelPosition:function(){return i(),b},boxSizingReliable:function(){return null==c&&i(),c},pixelMarginRight:function(){return null==c&&i(),e},reliableMarginLeft:function(){return null==c&&i(),f},reliableMarginRight:function(){var b,c=h.appendChild(d.createElement(\"div\"));return c.style.cssText=h.style.cssText=\"-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0\",c.style.marginRight=c.style.width=\"0\",h.style.width=\"1px\",Ea.appendChild(g),b=!parseFloat(a.getComputedStyle(c).marginRight),Ea.removeChild(g),h.removeChild(c),b}})}}();function Fa(a,b,c){var d,e,f,g,h=a.style;return c=c||Ca(a),g=c?c.getPropertyValue(b)||c[b]:void 0,\"\"!==g&&void 0!==g||n.contains(a.ownerDocument,a)||(g=n.style(a,b)),c&&!l.pixelMarginRight()&&Ba.test(g)&&Aa.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f),void 0!==g?g+\"\":g}function Ga(a,b){return{get:function(){return a()?void delete this.get:(this.get=b).apply(this,arguments)}}}var Ha=/^(none|table(?!-c[ea]).+)/,Ia={position:\"absolute\",visibility:\"hidden\",display:\"block\"},Ja={letterSpacing:\"0\",fontWeight:\"400\"},Ka=[\"Webkit\",\"O\",\"Moz\",\"ms\"],La=d.createElement(\"div\").style;function Ma(a){if(a in La)return a;var b=a[0].toUpperCase()+a.slice(1),c=Ka.length;while(c--)if(a=Ka[c]+b,a in La)return a}function Na(a,b,c){var d=T.exec(b);return d?Math.max(0,d[2]-(c||0))+(d[3]||\"px\"):b}function Oa(a,b,c,d,e){for(var f=c===(d?\"border\":\"content\")?4:\"width\"===b?1:0,g=0;4>f;f+=2)\"margin\"===c&&(g+=n.css(a,c+U[f],!0,e)),d?(\"content\"===c&&(g-=n.css(a,\"padding\"+U[f],!0,e)),\"margin\"!==c&&(g-=n.css(a,\"border\"+U[f]+\"Width\",!0,e))):(g+=n.css(a,\"padding\"+U[f],!0,e),\"padding\"!==c&&(g+=n.css(a,\"border\"+U[f]+\"Width\",!0,e)));return g}function Pa(b,c,e){var f=!0,g=\"width\"===c?b.offsetWidth:b.offsetHeight,h=Ca(b),i=\"border-box\"===n.css(b,\"boxSizing\",!1,h);if(d.msFullscreenElement&&a.top!==a&&b.getClientRects().length&&(g=Math.round(100*b.getBoundingClientRect()[c])),0>=g||null==g){if(g=Fa(b,c,h),(0>g||null==g)&&(g=b.style[c]),Ba.test(g))return g;f=i&&(l.boxSizingReliable()||g===b.style[c]),g=parseFloat(g)||0}return g+Oa(b,c,e||(i?\"border\":\"content\"),f,h)+\"px\"}function Qa(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=N.get(d,\"olddisplay\"),c=d.style.display,b?(f[g]||\"none\"!==c||(d.style.display=\"\"),\"\"===d.style.display&&V(d)&&(f[g]=N.access(d,\"olddisplay\",za(d.nodeName)))):(e=V(d),\"none\"===c&&e||N.set(d,\"olddisplay\",e?c:n.css(d,\"display\"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&\"none\"!==d.style.display&&\"\"!==d.style.display||(d.style.display=b?f[g]||\"\":\"none\"));return a}n.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=Fa(a,\"opacity\");return\"\"===c?\"1\":c}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{\"float\":\"cssFloat\"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=n.camelCase(b),i=a.style;return b=n.cssProps[h]||(n.cssProps[h]=Ma(h)||h),g=n.cssHooks[b]||n.cssHooks[h],void 0===c?g&&\"get\"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b]:(f=typeof c,\"string\"===f&&(e=T.exec(c))&&e[1]&&(c=W(a,b,e),f=\"number\"),null!=c&&c===c&&(\"number\"===f&&(c+=e&&e[3]||(n.cssNumber[h]?\"\":\"px\")),l.clearCloneStyle||\"\"!==c||0!==b.indexOf(\"background\")||(i[b]=\"inherit\"),g&&\"set\"in g&&void 0===(c=g.set(a,c,d))||(i[b]=c)),void 0)}},css:function(a,b,c,d){var e,f,g,h=n.camelCase(b);return b=n.cssProps[h]||(n.cssProps[h]=Ma(h)||h),g=n.cssHooks[b]||n.cssHooks[h],g&&\"get\"in g&&(e=g.get(a,!0,c)),void 0===e&&(e=Fa(a,b,d)),\"normal\"===e&&b in Ja&&(e=Ja[b]),\"\"===c||c?(f=parseFloat(e),c===!0||isFinite(f)?f||0:e):e}}),n.each([\"height\",\"width\"],function(a,b){n.cssHooks[b]={get:function(a,c,d){return c?Ha.test(n.css(a,\"display\"))&&0===a.offsetWidth?Da(a,Ia,function(){return Pa(a,b,d)}):Pa(a,b,d):void 0},set:function(a,c,d){var e,f=d&&Ca(a),g=d&&Oa(a,b,d,\"border-box\"===n.css(a,\"boxSizing\",!1,f),f);return g&&(e=T.exec(c))&&\"px\"!==(e[3]||\"px\")&&(a.style[b]=c,c=n.css(a,b)),Na(a,c,g)}}}),n.cssHooks.marginLeft=Ga(l.reliableMarginLeft,function(a,b){return b?(parseFloat(Fa(a,\"marginLeft\"))||a.getBoundingClientRect().left-Da(a,{marginLeft:0},function(){return a.getBoundingClientRect().left}))+\"px\":void 0}),n.cssHooks.marginRight=Ga(l.reliableMarginRight,function(a,b){return b?Da(a,{display:\"inline-block\"},Fa,[a,\"marginRight\"]):void 0}),n.each({margin:\"\",padding:\"\",border:\"Width\"},function(a,b){n.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f=\"string\"==typeof c?c.split(\" \"):[c];4>d;d++)e[a+U[d]+b]=f[d]||f[d-2]||f[0];return e}},Aa.test(a)||(n.cssHooks[a+b].set=Na)}),n.fn.extend({css:function(a,b){return K(this,function(a,b,c){var d,e,f={},g=0;if(n.isArray(b)){for(d=Ca(a),e=b.length;e>g;g++)f[b[g]]=n.css(a,b[g],!1,d);return f}return void 0!==c?n.style(a,b,c):n.css(a,b)},a,b,arguments.length>1)},show:function(){return Qa(this,!0)},hide:function(){return Qa(this)},toggle:function(a){return\"boolean\"==typeof a?a?this.show():this.hide():this.each(function(){V(this)?n(this).show():n(this).hide()})}});function Ra(a,b,c,d,e){return new Ra.prototype.init(a,b,c,d,e)}n.Tween=Ra,Ra.prototype={constructor:Ra,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||n.easing._default,this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(n.cssNumber[c]?\"\":\"px\")},cur:function(){var a=Ra.propHooks[this.prop];return a&&a.get?a.get(this):Ra.propHooks._default.get(this)},run:function(a){var b,c=Ra.propHooks[this.prop];return this.options.duration?this.pos=b=n.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):Ra.propHooks._default.set(this),this}},Ra.prototype.init.prototype=Ra.prototype,Ra.propHooks={_default:{get:function(a){var b;return 1!==a.elem.nodeType||null!=a.elem[a.prop]&&null==a.elem.style[a.prop]?a.elem[a.prop]:(b=n.css(a.elem,a.prop,\"\"),b&&\"auto\"!==b?b:0)},set:function(a){n.fx.step[a.prop]?n.fx.step[a.prop](a):1!==a.elem.nodeType||null==a.elem.style[n.cssProps[a.prop]]&&!n.cssHooks[a.prop]?a.elem[a.prop]=a.now:n.style(a.elem,a.prop,a.now+a.unit)}}},Ra.propHooks.scrollTop=Ra.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},n.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2},_default:\"swing\"},n.fx=Ra.prototype.init,n.fx.step={};var Sa,Ta,Ua=/^(?:toggle|show|hide)$/,Va=/queueHooks$/;function Wa(){return a.setTimeout(function(){Sa=void 0}),Sa=n.now()}function Xa(a,b){var c,d=0,e={height:a};for(b=b?1:0;4>d;d+=2-b)c=U[d],e[\"margin\"+c]=e[\"padding\"+c]=a;return b&&(e.opacity=e.width=a),e}function Ya(a,b,c){for(var d,e=(_a.tweeners[b]||[]).concat(_a.tweeners[\"*\"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function Za(a,b,c){var d,e,f,g,h,i,j,k,l=this,m={},o=a.style,p=a.nodeType&&V(a),q=N.get(a,\"fxshow\");c.queue||(h=n._queueHooks(a,\"fx\"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,l.always(function(){l.always(function(){h.unqueued--,n.queue(a,\"fx\").length||h.empty.fire()})})),1===a.nodeType&&(\"height\"in b||\"width\"in b)&&(c.overflow=[o.overflow,o.overflowX,o.overflowY],j=n.css(a,\"display\"),k=\"none\"===j?N.get(a,\"olddisplay\")||za(a.nodeName):j,\"inline\"===k&&\"none\"===n.css(a,\"float\")&&(o.display=\"inline-block\")),c.overflow&&(o.overflow=\"hidden\",l.always(function(){o.overflow=c.overflow[0],o.overflowX=c.overflow[1],o.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],Ua.exec(e)){if(delete b[d],f=f||\"toggle\"===e,e===(p?\"hide\":\"show\")){if(\"show\"!==e||!q||void 0===q[d])continue;p=!0}m[d]=q&&q[d]||n.style(a,d)}else j=void 0;if(n.isEmptyObject(m))\"inline\"===(\"none\"===j?za(a.nodeName):j)&&(o.display=j);else{q?\"hidden\"in q&&(p=q.hidden):q=N.access(a,\"fxshow\",{}),f&&(q.hidden=!p),p?n(a).show():l.done(function(){n(a).hide()}),l.done(function(){var b;N.remove(a,\"fxshow\");for(b in m)n.style(a,b,m[b])});for(d in m)g=Ya(p?q[d]:0,d,l),d in q||(q[d]=g.start,p&&(g.end=g.start,g.start=\"width\"===d||\"height\"===d?1:0))}}function $a(a,b){var c,d,e,f,g;for(c in a)if(d=n.camelCase(c),e=b[d],f=a[c],n.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=n.cssHooks[d],g&&\"expand\"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function _a(a,b,c){var d,e,f=0,g=_a.prefilters.length,h=n.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=Sa||Wa(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:n.extend({},b),opts:n.extend(!0,{specialEasing:{},easing:n.easing._default},c),originalProperties:b,originalOptions:c,startTime:Sa||Wa(),duration:c.duration,tweens:[],createTween:function(b,c){var d=n.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?(h.notifyWith(a,[j,1,0]),h.resolveWith(a,[j,b])):h.rejectWith(a,[j,b]),this}}),k=j.props;for($a(k,j.opts.specialEasing);g>f;f++)if(d=_a.prefilters[f].call(j,a,k,j.opts))return n.isFunction(d.stop)&&(n._queueHooks(j.elem,j.opts.queue).stop=n.proxy(d.stop,d)),d;return n.map(k,Ya,j),n.isFunction(j.opts.start)&&j.opts.start.call(a,j),n.fx.timer(n.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}n.Animation=n.extend(_a,{tweeners:{\"*\":[function(a,b){var c=this.createTween(a,b);return W(c.elem,a,T.exec(b),c),c}]},tweener:function(a,b){n.isFunction(a)?(b=a,a=[\"*\"]):a=a.match(G);for(var c,d=0,e=a.length;e>d;d++)c=a[d],_a.tweeners[c]=_a.tweeners[c]||[],_a.tweeners[c].unshift(b)},prefilters:[Za],prefilter:function(a,b){b?_a.prefilters.unshift(a):_a.prefilters.push(a)}}),n.speed=function(a,b,c){var d=a&&\"object\"==typeof a?n.extend({},a):{complete:c||!c&&b||n.isFunction(a)&&a,duration:a,easing:c&&b||b&&!n.isFunction(b)&&b};return d.duration=n.fx.off?0:\"number\"==typeof d.duration?d.duration:d.duration in n.fx.speeds?n.fx.speeds[d.duration]:n.fx.speeds._default,null!=d.queue&&d.queue!==!0||(d.queue=\"fx\"),d.old=d.complete,d.complete=function(){n.isFunction(d.old)&&d.old.call(this),d.queue&&n.dequeue(this,d.queue)},d},n.fn.extend({fadeTo:function(a,b,c,d){return this.filter(V).css(\"opacity\",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=n.isEmptyObject(a),f=n.speed(b,c,d),g=function(){var b=_a(this,n.extend({},a),f);(e||N.get(this,\"finish\"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return\"string\"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||\"fx\",[]),this.each(function(){var b=!0,e=null!=a&&a+\"queueHooks\",f=n.timers,g=N.get(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&Va.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));!b&&c||n.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||\"fx\"),this.each(function(){var b,c=N.get(this),d=c[a+\"queue\"],e=c[a+\"queueHooks\"],f=n.timers,g=d?d.length:0;for(c.finish=!0,n.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),n.each([\"toggle\",\"show\",\"hide\"],function(a,b){var c=n.fn[b];n.fn[b]=function(a,d,e){return null==a||\"boolean\"==typeof a?c.apply(this,arguments):this.animate(Xa(b,!0),a,d,e)}}),n.each({slideDown:Xa(\"show\"),slideUp:Xa(\"hide\"),slideToggle:Xa(\"toggle\"),fadeIn:{opacity:\"show\"},fadeOut:{opacity:\"hide\"},fadeToggle:{opacity:\"toggle\"}},function(a,b){n.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),n.timers=[],n.fx.tick=function(){var a,b=0,c=n.timers;for(Sa=n.now();b<c.length;b++)a=c[b],a()||c[b]!==a||c.splice(b--,1);c.length||n.fx.stop(),Sa=void 0},n.fx.timer=function(a){n.timers.push(a),a()?n.fx.start():n.timers.pop()},n.fx.interval=13,n.fx.start=function(){Ta||(Ta=a.setInterval(n.fx.tick,n.fx.interval))},n.fx.stop=function(){a.clearInterval(Ta),Ta=null},n.fx.speeds={slow:600,fast:200,_default:400},n.fn.delay=function(b,c){return b=n.fx?n.fx.speeds[b]||b:b,c=c||\"fx\",this.queue(c,function(c,d){var e=a.setTimeout(c,b);d.stop=function(){a.clearTimeout(e)}})},function(){var a=d.createElement(\"input\"),b=d.createElement(\"select\"),c=b.appendChild(d.createElement(\"option\"));a.type=\"checkbox\",l.checkOn=\"\"!==a.value,l.optSelected=c.selected,b.disabled=!0,l.optDisabled=!c.disabled,a=d.createElement(\"input\"),a.value=\"t\",a.type=\"radio\",l.radioValue=\"t\"===a.value}();var ab,bb=n.expr.attrHandle;n.fn.extend({attr:function(a,b){return K(this,n.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){n.removeAttr(this,a)})}}),n.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return\"undefined\"==typeof a.getAttribute?n.prop(a,b,c):(1===f&&n.isXMLDoc(a)||(b=b.toLowerCase(),e=n.attrHooks[b]||(n.expr.match.bool.test(b)?ab:void 0)),void 0!==c?null===c?void n.removeAttr(a,b):e&&\"set\"in e&&void 0!==(d=e.set(a,c,b))?d:(a.setAttribute(b,c+\"\"),c):e&&\"get\"in e&&null!==(d=e.get(a,b))?d:(d=n.find.attr(a,b),null==d?void 0:d))},attrHooks:{type:{set:function(a,b){if(!l.radioValue&&\"radio\"===b&&n.nodeName(a,\"input\")){var c=a.value;return a.setAttribute(\"type\",b),c&&(a.value=c),b}}}},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(G);if(f&&1===a.nodeType)while(c=f[e++])d=n.propFix[c]||c,n.expr.match.bool.test(c)&&(a[d]=!1),a.removeAttribute(c)}}),ab={set:function(a,b,c){return b===!1?n.removeAttr(a,c):a.setAttribute(c,c),c}},n.each(n.expr.match.bool.source.match(/\\w+/g),function(a,b){var c=bb[b]||n.find.attr;bb[b]=function(a,b,d){var e,f;return d||(f=bb[b],bb[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,bb[b]=f),e}});var cb=/^(?:input|select|textarea|button)$/i,db=/^(?:a|area)$/i;n.fn.extend({prop:function(a,b){return K(this,n.prop,a,b,arguments.length>1)},removeProp:function(a){return this.each(function(){delete this[n.propFix[a]||a]})}}),n.extend({prop:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return 1===f&&n.isXMLDoc(a)||(b=n.propFix[b]||b,\n    4: e=n.propHooks[b]),void 0!==c?e&&\"set\"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&\"get\"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){var b=n.find.attr(a,\"tabindex\");return b?parseInt(b,10):cb.test(a.nodeName)||db.test(a.nodeName)&&a.href?0:-1}}},propFix:{\"for\":\"htmlFor\",\"class\":\"className\"}}),l.optSelected||(n.propHooks.selected={get:function(a){var b=a.parentNode;return b&&b.parentNode&&b.parentNode.selectedIndex,null},set:function(a){var b=a.parentNode;b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex)}}),n.each([\"tabIndex\",\"readOnly\",\"maxLength\",\"cellSpacing\",\"cellPadding\",\"rowSpan\",\"colSpan\",\"useMap\",\"frameBorder\",\"contentEditable\"],function(){n.propFix[this.toLowerCase()]=this});var eb=/[\\t\\r\\n\\f]/g;function fb(a){return a.getAttribute&&a.getAttribute(\"class\")||\"\"}n.fn.extend({addClass:function(a){var b,c,d,e,f,g,h,i=0;if(n.isFunction(a))return this.each(function(b){n(this).addClass(a.call(this,b,fb(this)))});if(\"string\"==typeof a&&a){b=a.match(G)||[];while(c=this[i++])if(e=fb(c),d=1===c.nodeType&&(\" \"+e+\" \").replace(eb,\" \")){g=0;while(f=b[g++])d.indexOf(\" \"+f+\" \")<0&&(d+=f+\" \");h=n.trim(d),e!==h&&c.setAttribute(\"class\",h)}}return this},removeClass:function(a){var b,c,d,e,f,g,h,i=0;if(n.isFunction(a))return this.each(function(b){n(this).removeClass(a.call(this,b,fb(this)))});if(!arguments.length)return this.attr(\"class\",\"\");if(\"string\"==typeof a&&a){b=a.match(G)||[];while(c=this[i++])if(e=fb(c),d=1===c.nodeType&&(\" \"+e+\" \").replace(eb,\" \")){g=0;while(f=b[g++])while(d.indexOf(\" \"+f+\" \")>-1)d=d.replace(\" \"+f+\" \",\" \");h=n.trim(d),e!==h&&c.setAttribute(\"class\",h)}}return this},toggleClass:function(a,b){var c=typeof a;return\"boolean\"==typeof b&&\"string\"===c?b?this.addClass(a):this.removeClass(a):n.isFunction(a)?this.each(function(c){n(this).toggleClass(a.call(this,c,fb(this),b),b)}):this.each(function(){var b,d,e,f;if(\"string\"===c){d=0,e=n(this),f=a.match(G)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else void 0!==a&&\"boolean\"!==c||(b=fb(this),b&&N.set(this,\"__className__\",b),this.setAttribute&&this.setAttribute(\"class\",b||a===!1?\"\":N.get(this,\"__className__\")||\"\"))})},hasClass:function(a){var b,c,d=0;b=\" \"+a+\" \";while(c=this[d++])if(1===c.nodeType&&(\" \"+fb(c)+\" \").replace(eb,\" \").indexOf(b)>-1)return!0;return!1}});var gb=/\\r/g,hb=/[\\x20\\t\\r\\n\\f]+/g;n.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=n.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,n(this).val()):a,null==e?e=\"\":\"number\"==typeof e?e+=\"\":n.isArray(e)&&(e=n.map(e,function(a){return null==a?\"\":a+\"\"})),b=n.valHooks[this.type]||n.valHooks[this.nodeName.toLowerCase()],b&&\"set\"in b&&void 0!==b.set(this,e,\"value\")||(this.value=e))});if(e)return b=n.valHooks[e.type]||n.valHooks[e.nodeName.toLowerCase()],b&&\"get\"in b&&void 0!==(c=b.get(e,\"value\"))?c:(c=e.value,\"string\"==typeof c?c.replace(gb,\"\"):null==c?\"\":c)}}}),n.extend({valHooks:{option:{get:function(a){var b=n.find.attr(a,\"value\");return null!=b?b:n.trim(n.text(a)).replace(hb,\" \")}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f=\"select-one\"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],(c.selected||i===e)&&(l.optDisabled?!c.disabled:null===c.getAttribute(\"disabled\"))&&(!c.parentNode.disabled||!n.nodeName(c.parentNode,\"optgroup\"))){if(b=n(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=n.makeArray(b),g=e.length;while(g--)d=e[g],(d.selected=n.inArray(n.valHooks.option.get(d),f)>-1)&&(c=!0);return c||(a.selectedIndex=-1),f}}}}),n.each([\"radio\",\"checkbox\"],function(){n.valHooks[this]={set:function(a,b){return n.isArray(b)?a.checked=n.inArray(n(a).val(),b)>-1:void 0}},l.checkOn||(n.valHooks[this].get=function(a){return null===a.getAttribute(\"value\")?\"on\":a.value})});var ib=/^(?:focusinfocus|focusoutblur)$/;n.extend(n.event,{trigger:function(b,c,e,f){var g,h,i,j,l,m,o,p=[e||d],q=k.call(b,\"type\")?b.type:b,r=k.call(b,\"namespace\")?b.namespace.split(\".\"):[];if(h=i=e=e||d,3!==e.nodeType&&8!==e.nodeType&&!ib.test(q+n.event.triggered)&&(q.indexOf(\".\")>-1&&(r=q.split(\".\"),q=r.shift(),r.sort()),l=q.indexOf(\":\")<0&&\"on\"+q,b=b[n.expando]?b:new n.Event(q,\"object\"==typeof b&&b),b.isTrigger=f?2:3,b.namespace=r.join(\".\"),b.rnamespace=b.namespace?new RegExp(\"(^|\\\\.)\"+r.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"):null,b.result=void 0,b.target||(b.target=e),c=null==c?[b]:n.makeArray(c,[b]),o=n.event.special[q]||{},f||!o.trigger||o.trigger.apply(e,c)!==!1)){if(!f&&!o.noBubble&&!n.isWindow(e)){for(j=o.delegateType||q,ib.test(j+q)||(h=h.parentNode);h;h=h.parentNode)p.push(h),i=h;i===(e.ownerDocument||d)&&p.push(i.defaultView||i.parentWindow||a)}g=0;while((h=p[g++])&&!b.isPropagationStopped())b.type=g>1?j:o.bindType||q,m=(N.get(h,\"events\")||{})[b.type]&&N.get(h,\"handle\"),m&&m.apply(h,c),m=l&&h[l],m&&m.apply&&L(h)&&(b.result=m.apply(h,c),b.result===!1&&b.preventDefault());return b.type=q,f||b.isDefaultPrevented()||o._default&&o._default.apply(p.pop(),c)!==!1||!L(e)||l&&n.isFunction(e[q])&&!n.isWindow(e)&&(i=e[l],i&&(e[l]=null),n.event.triggered=q,e[q](),n.event.triggered=void 0,i&&(e[l]=i)),b.result}},simulate:function(a,b,c){var d=n.extend(new n.Event,c,{type:a,isSimulated:!0});n.event.trigger(d,null,b),d.isDefaultPrevented()&&c.preventDefault()}}),n.fn.extend({trigger:function(a,b){return this.each(function(){n.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?n.event.trigger(a,b,c,!0):void 0}}),n.each(\"blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu\".split(\" \"),function(a,b){n.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),n.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}}),l.focusin=\"onfocusin\"in a,l.focusin||n.each({focus:\"focusin\",blur:\"focusout\"},function(a,b){var c=function(a){n.event.simulate(b,a.target,n.event.fix(a))};n.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=N.access(d,b);e||d.addEventListener(a,c,!0),N.access(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=N.access(d,b)-1;e?N.access(d,b,e):(d.removeEventListener(a,c,!0),N.remove(d,b))}}});var jb=a.location,kb=n.now(),lb=/\\?/;n.parseJSON=function(a){return JSON.parse(a+\"\")},n.parseXML=function(b){var c;if(!b||\"string\"!=typeof b)return null;try{c=(new a.DOMParser).parseFromString(b,\"text/xml\")}catch(d){c=void 0}return c&&!c.getElementsByTagName(\"parsererror\").length||n.error(\"Invalid XML: \"+b),c};var mb=/#.*$/,nb=/([?&])_=[^&]*/,ob=/^(.*?):[ \\t]*([^\\r\\n]*)$/gm,pb=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,qb=/^(?:GET|HEAD)$/,rb=/^\\/\\//,sb={},tb={},ub=\"*/\".concat(\"*\"),vb=d.createElement(\"a\");vb.href=jb.href;function wb(a){return function(b,c){\"string\"!=typeof b&&(c=b,b=\"*\");var d,e=0,f=b.toLowerCase().match(G)||[];if(n.isFunction(c))while(d=f[e++])\"+\"===d[0]?(d=d.slice(1)||\"*\",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function xb(a,b,c,d){var e={},f=a===tb;function g(h){var i;return e[h]=!0,n.each(a[h]||[],function(a,h){var j=h(b,c,d);return\"string\"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e[\"*\"]&&g(\"*\")}function yb(a,b){var c,d,e=n.ajaxSettings.flatOptions||{};for(c in b)void 0!==b[c]&&((e[c]?a:d||(d={}))[c]=b[c]);return d&&n.extend(!0,a,d),a}function zb(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while(\"*\"===i[0])i.shift(),void 0===d&&(d=a.mimeType||b.getResponseHeader(\"Content-Type\"));if(d)for(e in h)if(h[e]&&h[e].test(d)){i.unshift(e);break}if(i[0]in c)f=i[0];else{for(e in c){if(!i[0]||a.converters[e+\" \"+i[0]]){f=e;break}g||(g=e)}f=f||g}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function Ab(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if(\"*\"===f)f=i;else if(\"*\"!==i&&i!==f){if(g=j[i+\" \"+f]||j[\"* \"+f],!g)for(e in j)if(h=e.split(\" \"),h[1]===f&&(g=j[i+\" \"+h[0]]||j[\"* \"+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a[\"throws\"])b=g(b);else try{b=g(b)}catch(l){return{state:\"parsererror\",error:g?l:\"No conversion from \"+i+\" to \"+f}}}return{state:\"success\",data:b}}n.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:jb.href,type:\"GET\",isLocal:pb.test(jb.protocol),global:!0,processData:!0,async:!0,contentType:\"application/x-www-form-urlencoded; charset=UTF-8\",accepts:{\"*\":ub,text:\"text/plain\",html:\"text/html\",xml:\"application/xml, text/xml\",json:\"application/json, text/javascript\"},contents:{xml:/\\bxml\\b/,html:/\\bhtml/,json:/\\bjson\\b/},responseFields:{xml:\"responseXML\",text:\"responseText\",json:\"responseJSON\"},converters:{\"* text\":String,\"text html\":!0,\"text json\":n.parseJSON,\"text xml\":n.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?yb(yb(a,n.ajaxSettings),b):yb(n.ajaxSettings,a)},ajaxPrefilter:wb(sb),ajaxTransport:wb(tb),ajax:function(b,c){\"object\"==typeof b&&(c=b,b=void 0),c=c||{};var e,f,g,h,i,j,k,l,m=n.ajaxSetup({},c),o=m.context||m,p=m.context&&(o.nodeType||o.jquery)?n(o):n.event,q=n.Deferred(),r=n.Callbacks(\"once memory\"),s=m.statusCode||{},t={},u={},v=0,w=\"canceled\",x={readyState:0,getResponseHeader:function(a){var b;if(2===v){if(!h){h={};while(b=ob.exec(g))h[b[1].toLowerCase()]=b[2]}b=h[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===v?g:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return v||(a=u[c]=u[c]||a,t[a]=b),this},overrideMimeType:function(a){return v||(m.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>v)for(b in a)s[b]=[s[b],a[b]];else x.always(a[x.status]);return this},abort:function(a){var b=a||w;return e&&e.abort(b),z(0,b),this}};if(q.promise(x).complete=r.add,x.success=x.done,x.error=x.fail,m.url=((b||m.url||jb.href)+\"\").replace(mb,\"\").replace(rb,jb.protocol+\"//\"),m.type=c.method||c.type||m.method||m.type,m.dataTypes=n.trim(m.dataType||\"*\").toLowerCase().match(G)||[\"\"],null==m.crossDomain){j=d.createElement(\"a\");try{j.href=m.url,j.href=j.href,m.crossDomain=vb.protocol+\"//\"+vb.host!=j.protocol+\"//\"+j.host}catch(y){m.crossDomain=!0}}if(m.data&&m.processData&&\"string\"!=typeof m.data&&(m.data=n.param(m.data,m.traditional)),xb(sb,m,c,x),2===v)return x;k=n.event&&m.global,k&&0===n.active++&&n.event.trigger(\"ajaxStart\"),m.type=m.type.toUpperCase(),m.hasContent=!qb.test(m.type),f=m.url,m.hasContent||(m.data&&(f=m.url+=(lb.test(f)?\"&\":\"?\")+m.data,delete m.data),m.cache===!1&&(m.url=nb.test(f)?f.replace(nb,\"$1_=\"+kb++):f+(lb.test(f)?\"&\":\"?\")+\"_=\"+kb++)),m.ifModified&&(n.lastModified[f]&&x.setRequestHeader(\"If-Modified-Since\",n.lastModified[f]),n.etag[f]&&x.setRequestHeader(\"If-None-Match\",n.etag[f])),(m.data&&m.hasContent&&m.contentType!==!1||c.contentType)&&x.setRequestHeader(\"Content-Type\",m.contentType),x.setRequestHeader(\"Accept\",m.dataTypes[0]&&m.accepts[m.dataTypes[0]]?m.accepts[m.dataTypes[0]]+(\"*\"!==m.dataTypes[0]?\", \"+ub+\"; q=0.01\":\"\"):m.accepts[\"*\"]);for(l in m.headers)x.setRequestHeader(l,m.headers[l]);if(m.beforeSend&&(m.beforeSend.call(o,x,m)===!1||2===v))return x.abort();w=\"abort\";for(l in{success:1,error:1,complete:1})x[l](m[l]);if(e=xb(tb,m,c,x)){if(x.readyState=1,k&&p.trigger(\"ajaxSend\",[x,m]),2===v)return x;m.async&&m.timeout>0&&(i=a.setTimeout(function(){x.abort(\"timeout\")},m.timeout));try{v=1,e.send(t,z)}catch(y){if(!(2>v))throw y;z(-1,y)}}else z(-1,\"No Transport\");function z(b,c,d,h){var j,l,t,u,w,y=c;2!==v&&(v=2,i&&a.clearTimeout(i),e=void 0,g=h||\"\",x.readyState=b>0?4:0,j=b>=200&&300>b||304===b,d&&(u=zb(m,x,d)),u=Ab(m,u,x,j),j?(m.ifModified&&(w=x.getResponseHeader(\"Last-Modified\"),w&&(n.lastModified[f]=w),w=x.getResponseHeader(\"etag\"),w&&(n.etag[f]=w)),204===b||\"HEAD\"===m.type?y=\"nocontent\":304===b?y=\"notmodified\":(y=u.state,l=u.data,t=u.error,j=!t)):(t=y,!b&&y||(y=\"error\",0>b&&(b=0))),x.status=b,x.statusText=(c||y)+\"\",j?q.resolveWith(o,[l,y,x]):q.rejectWith(o,[x,y,t]),x.statusCode(s),s=void 0,k&&p.trigger(j?\"ajaxSuccess\":\"ajaxError\",[x,m,j?l:t]),r.fireWith(o,[x,y]),k&&(p.trigger(\"ajaxComplete\",[x,m]),--n.active||n.event.trigger(\"ajaxStop\")))}return x},getJSON:function(a,b,c){return n.get(a,b,c,\"json\")},getScript:function(a,b){return n.get(a,void 0,b,\"script\")}}),n.each([\"get\",\"post\"],function(a,b){n[b]=function(a,c,d,e){return n.isFunction(c)&&(e=e||d,d=c,c=void 0),n.ajax(n.extend({url:a,type:b,dataType:e,data:c,success:d},n.isPlainObject(a)&&a))}}),n._evalUrl=function(a){return n.ajax({url:a,type:\"GET\",dataType:\"script\",async:!1,global:!1,\"throws\":!0})},n.fn.extend({wrapAll:function(a){var b;return n.isFunction(a)?this.each(function(b){n(this).wrapAll(a.call(this,b))}):(this[0]&&(b=n(a,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstElementChild)a=a.firstElementChild;return a}).append(this)),this)},wrapInner:function(a){return n.isFunction(a)?this.each(function(b){n(this).wrapInner(a.call(this,b))}):this.each(function(){var b=n(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=n.isFunction(a);return this.each(function(c){n(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){n.nodeName(this,\"body\")||n(this).replaceWith(this.childNodes)}).end()}}),n.expr.filters.hidden=function(a){return!n.expr.filters.visible(a)},n.expr.filters.visible=function(a){return a.offsetWidth>0||a.offsetHeight>0||a.getClientRects().length>0};var Bb=/%20/g,Cb=/\\[\\]$/,Db=/\\r?\\n/g,Eb=/^(?:submit|button|image|reset|file)$/i,Fb=/^(?:input|select|textarea|keygen)/i;function Gb(a,b,c,d){var e;if(n.isArray(b))n.each(b,function(b,e){c||Cb.test(a)?d(a,e):Gb(a+\"[\"+(\"object\"==typeof e&&null!=e?b:\"\")+\"]\",e,c,d)});else if(c||\"object\"!==n.type(b))d(a,b);else for(e in b)Gb(a+\"[\"+e+\"]\",b[e],c,d)}n.param=function(a,b){var c,d=[],e=function(a,b){b=n.isFunction(b)?b():null==b?\"\":b,d[d.length]=encodeURIComponent(a)+\"=\"+encodeURIComponent(b)};if(void 0===b&&(b=n.ajaxSettings&&n.ajaxSettings.traditional),n.isArray(a)||a.jquery&&!n.isPlainObject(a))n.each(a,function(){e(this.name,this.value)});else for(c in a)Gb(c,a[c],b,e);return d.join(\"&\").replace(Bb,\"+\")},n.fn.extend({serialize:function(){return n.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=n.prop(this,\"elements\");return a?n.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!n(this).is(\":disabled\")&&Fb.test(this.nodeName)&&!Eb.test(a)&&(this.checked||!X.test(a))}).map(function(a,b){var c=n(this).val();return null==c?null:n.isArray(c)?n.map(c,function(a){return{name:b.name,value:a.replace(Db,\"\\r\\n\")}}):{name:b.name,value:c.replace(Db,\"\\r\\n\")}}).get()}}),n.ajaxSettings.xhr=function(){try{return new a.XMLHttpRequest}catch(b){}};var Hb={0:200,1223:204},Ib=n.ajaxSettings.xhr();l.cors=!!Ib&&\"withCredentials\"in Ib,l.ajax=Ib=!!Ib,n.ajaxTransport(function(b){var c,d;return l.cors||Ib&&!b.crossDomain?{send:function(e,f){var g,h=b.xhr();if(h.open(b.type,b.url,b.async,b.username,b.password),b.xhrFields)for(g in b.xhrFields)h[g]=b.xhrFields[g];b.mimeType&&h.overrideMimeType&&h.overrideMimeType(b.mimeType),b.crossDomain||e[\"X-Requested-With\"]||(e[\"X-Requested-With\"]=\"XMLHttpRequest\");for(g in e)h.setRequestHeader(g,e[g]);c=function(a){return function(){c&&(c=d=h.onload=h.onerror=h.onabort=h.onreadystatechange=null,\"abort\"===a?h.abort():\"error\"===a?\"number\"!=typeof h.status?f(0,\"error\"):f(h.status,h.statusText):f(Hb[h.status]||h.status,h.statusText,\"text\"!==(h.responseType||\"text\")||\"string\"!=typeof h.responseText?{binary:h.response}:{text:h.responseText},h.getAllResponseHeaders()))}},h.onload=c(),d=h.onerror=c(\"error\"),void 0!==h.onabort?h.onabort=d:h.onreadystatechange=function(){4===h.readyState&&a.setTimeout(function(){c&&d()})},c=c(\"abort\");try{h.send(b.hasContent&&b.data||null)}catch(i){if(c)throw i}},abort:function(){c&&c()}}:void 0}),n.ajaxSetup({accepts:{script:\"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\"},contents:{script:/\\b(?:java|ecma)script\\b/},converters:{\"text script\":function(a){return n.globalEval(a),a}}}),n.ajaxPrefilter(\"script\",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type=\"GET\")}),n.ajaxTransport(\"script\",function(a){if(a.crossDomain){var b,c;return{send:function(e,f){b=n(\"<script>\").prop({charset:a.scriptCharset,src:a.url}).on(\"load error\",c=function(a){b.remove(),c=null,a&&f(\"error\"===a.type?404:200,a.type)}),d.head.appendChild(b[0])},abort:function(){c&&c()}}}});var Jb=[],Kb=/(=)\\?(?=&|$)|\\?\\?/;n.ajaxSetup({jsonp:\"callback\",jsonpCallback:function(){var a=Jb.pop()||n.expando+\"_\"+kb++;return this[a]=!0,a}}),n.ajaxPrefilter(\"json jsonp\",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(Kb.test(b.url)?\"url\":\"string\"==typeof b.data&&0===(b.contentType||\"\").indexOf(\"application/x-www-form-urlencoded\")&&Kb.test(b.data)&&\"data\");return h||\"jsonp\"===b.dataTypes[0]?(e=b.jsonpCallback=n.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(Kb,\"$1\"+e):b.jsonp!==!1&&(b.url+=(lb.test(b.url)?\"&\":\"?\")+b.jsonp+\"=\"+e),b.converters[\"script json\"]=function(){return g||n.error(e+\" was not called\"),g[0]},b.dataTypes[0]=\"json\",f=a[e],a[e]=function(){g=arguments},d.always(function(){void 0===f?n(a).removeProp(e):a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,Jb.push(e)),g&&n.isFunction(f)&&f(g[0]),g=f=void 0}),\"script\"):void 0}),n.parseHTML=function(a,b,c){if(!a||\"string\"!=typeof a)return null;\"boolean\"==typeof b&&(c=b,b=!1),b=b||d;var e=x.exec(a),f=!c&&[];return e?[b.createElement(e[1])]:(e=ca([a],b,f),f&&f.length&&n(f).remove(),n.merge([],e.childNodes))};var Lb=n.fn.load;n.fn.load=function(a,b,c){if(\"string\"!=typeof a&&Lb)return Lb.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(\" \");return h>-1&&(d=n.trim(a.slice(h)),a=a.slice(0,h)),n.isFunction(b)?(c=b,b=void 0):b&&\"object\"==typeof b&&(e=\"POST\"),g.length>0&&n.ajax({url:a,type:e||\"GET\",dataType:\"html\",data:b}).done(function(a){f=arguments,g.html(d?n(\"<div>\").append(n.parseHTML(a)).find(d):a)}).always(c&&function(a,b){g.each(function(){c.apply(this,f||[a.responseText,b,a])})}),this},n.each([\"ajaxStart\",\"ajaxStop\",\"ajaxComplete\",\"ajaxError\",\"ajaxSuccess\",\"ajaxSend\"],function(a,b){n.fn[b]=function(a){return this.on(b,a)}}),n.expr.filters.animated=function(a){return n.grep(n.timers,function(b){return a===b.elem}).length};function Mb(a){return n.isWindow(a)?a:9===a.nodeType&&a.defaultView}n.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=n.css(a,\"position\"),l=n(a),m={};\"static\"===k&&(a.style.position=\"relative\"),h=l.offset(),f=n.css(a,\"top\"),i=n.css(a,\"left\"),j=(\"absolute\"===k||\"fixed\"===k)&&(f+i).indexOf(\"auto\")>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),n.isFunction(b)&&(b=b.call(a,c,n.extend({},h))),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),\"using\"in b?b.using.call(a,m):l.css(m)}},n.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){n.offset.setOffset(this,a,b)});var b,c,d=this[0],e={top:0,left:0},f=d&&d.ownerDocument;if(f)return b=f.documentElement,n.contains(b,d)?(e=d.getBoundingClientRect(),c=Mb(f),{top:e.top+c.pageYOffset-b.clientTop,left:e.left+c.pageXOffset-b.clientLeft}):e},position:function(){if(this[0]){var a,b,c=this[0],d={top:0,left:0};return\"fixed\"===n.css(c,\"position\")?b=c.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),n.nodeName(a[0],\"html\")||(d=a.offset()),d.top+=n.css(a[0],\"borderTopWidth\",!0),d.left+=n.css(a[0],\"borderLeftWidth\",!0)),{top:b.top-d.top-n.css(c,\"marginTop\",!0),left:b.left-d.left-n.css(c,\"marginLeft\",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent;while(a&&\"static\"===n.css(a,\"position\"))a=a.offsetParent;return a||Ea})}}),n.each({scrollLeft:\"pageXOffset\",scrollTop:\"pageYOffset\"},function(a,b){var c=\"pageYOffset\"===b;n.fn[a]=function(d){return K(this,function(a,d,e){var f=Mb(a);return void 0===e?f?f[b]:a[d]:void(f?f.scrollTo(c?f.pageXOffset:e,c?e:f.pageYOffset):a[d]=e)},a,d,arguments.length)}}),n.each([\"top\",\"left\"],function(a,b){n.cssHooks[b]=Ga(l.pixelPosition,function(a,c){return c?(c=Fa(a,b),Ba.test(c)?n(a).position()[b]+\"px\":c):void 0})}),n.each({Height:\"height\",Width:\"width\"},function(a,b){n.each({padding:\"inner\"+a,content:b,\"\":\"outer\"+a},function(c,d){n.fn[d]=function(d,e){var f=arguments.length&&(c||\"boolean\"!=typeof d),g=c||(d===!0||e===!0?\"margin\":\"border\");return K(this,function(b,c,d){var e;return n.isWindow(b)?b.document.documentElement[\"client\"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body[\"scroll\"+a],e[\"scroll\"+a],b.body[\"offset\"+a],e[\"offset\"+a],e[\"client\"+a])):void 0===d?n.css(b,c,g):n.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),n.fn.extend({bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,\"**\"):this.off(b,a||\"**\",c)},size:function(){return this.length}}),n.fn.andSelf=n.fn.addBack,\"function\"==typeof define&&define.amd&&define(\"jquery\",[],function(){return n});var Nb=a.jQuery,Ob=a.$;return n.noConflict=function(b){return a.$===n&&(a.$=Ob),b&&a.jQuery===n&&(a.jQuery=Nb),n},b||(a.jQuery=a.$=n),n});\n    5  \n\n1839 matches across 379 files\n",
			"settings":
			{
				"buffer_size": 504815,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "Procfile.txt",
			"settings":
			{
				"buffer_size": 47,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/accounts/templatetags/recommended.py",
			"settings":
			{
				"buffer_size": 363,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/accounts/templates/accounts/snippets/recommended.html",
			"settings":
			{
				"buffer_size": 182,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/accounts/views.py",
			"settings":
			{
				"buffer_size": 1510,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 55.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook",
		"/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/static-serve",
		"/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/static-serve/admin"
	],
	"file_history":
	[
		"/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/src/accounts/templatetags/__init__.py",
		"/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/src/tweets/models.py",
		"/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/src/tweets/api/serializers.py",
		"/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/src/templates/base.html",
		"/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/src/hashtags/templates/hashtags/tag_view.html",
		"/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/src/hashtags/api/__init__.py",
		"/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/src/hashtags/api/views.py",
		"/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/src/tweetme/urls.py",
		"/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/src/templates/search.html",
		"/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/src/tweets/api/views.py",
		"/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/src/tweetme/views.py",
		"/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/src/tweets/templates/tweets/search_form.html",
		"/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/src/tweets/api/urls.py",
		"/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/src/tweets/templates/tweets/tweet_list.html",
		"/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/src/templates/reply-modal.html",
		"/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/src/tweets/templates/tweets/tweet_detail.html",
		"/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/src/accounts/templates/accounts/user_detail.html",
		"/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/src/tweets/templates/tweets/form.html",
		"/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/src/accounts/api/urls.py",
		"/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/src/hashtags/signals.py",
		"/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/src/hashtags/models.py",
		"/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/tweetbook/src/tweets/urls.py",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/tweets/views.py",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/tweets/api/views.py",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/tweets/models.py",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/tweetme/urls.py",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/tweets/api/serializers.py",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/tweets/api/pagination.py",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/tweets/validators.py",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/accounts/views.py",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/hashtags/templates/hashtags/tag_view.html",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/hashtags/views.py",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/hashtags/admin.py",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/hashtags/models.py",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/tweets/templates/tweets/tweet_list.html",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/tweetme/settings/base.py",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/tweetme/settings/local.py",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/tweetme/settings/production.py",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/accounts/tests.py",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/tweets/urls.py",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/accounts/models.py",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/accounts/templates/accounts/user_detail.html",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/accounts/urls.py",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/tweets/admin.py",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/accounts/admin.py",
		"/Users/apple/Downloads/models.py",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/tweets/forms.py",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/accounts/api/serializers.py",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/tweets/api/urls.py",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/templates/base.html",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/tweets/templates/tweets/search_form.html",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/tweets/templates/tweets/form.html",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/accounts/__init__.py",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/accounts/api/__init__.py",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/tweets/templates/tweets/create_view.html",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/tweets/tests.py",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/tweets/api/__init__.py",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/tweets/templates/tweets/delete_confirm.html",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/templates/navbar.html",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/tweets/templates/tweets/tweet_detail.html",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/templates/home.html",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/static-storage/static/css/custom.css",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/tweets/templates/tweets/list_view.html",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/static-storage/bootstrap/css/bootstrap.min.css",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/static-storage/bootstrap/css/bootstrap.min.css.map",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/tweets/templates/tweets/update_view.html",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/tweets/mixins.py",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/tweets/templates/tweets/detail_view.html",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/tweets/templates/tweets/forms.py",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/tweets/migrations/__init__.py",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/manage.py",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/db.sqlite3",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/tweets/apps.py",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/tweetme/views.py",
		"/Users/apple/Documents/karthiyayini/django/tweetme/static-serve/static/css/custom.css",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/tweetme/settings/_init_.py",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/tweetme/__init__.py",
		"/Users/apple/Documents/karthiyayini/django/tweetme/src/tweetme/settings.py",
		"/Users/apple/Documents/Andriod_backup/GIT/karthiyayani/dhanush_android/gradlew.bat",
		"/Users/apple/Desktop/Lotus/Translate.xml",
		"/Applications/XAMPP/xamppfiles/htdocs/webservice/nexkarlite/application/libraries/firebase-php/vendor/google/apiclient-services/src/Google/Service/Script/Resource/Scripts.php",
		"/Applications/XAMPP/xamppfiles/htdocs/firstwebsite/checklogin.php",
		"/Applications/XAMPP/xamppfiles/htdocs/firstwebsite/login.php",
		"/Applications/XAMPP/xamppfiles/htdocs/firstwebsite/register.php",
		"/Applications/XAMPP/xamppfiles/htdocs/firstwebsite/index.php",
		"/Applications/XAMPP/xamppfiles/htdocs/webservice/nexkarlite/application/controllers/Driver.php",
		"/Users/apple/Desktop/Haashini/NUVO_iOS/nuvo_ios(rider)/.git/config",
		"/Users/apple/Desktop/Todo List/Todo List/AppDelegate.swift",
		"/Applications/XAMPP/xamppfiles/htdocs/webservice/beautyinfluencer/application/config/untitled",
		"/Applications/XAMPP/xamppfiles/htdocs/webservice/beautyinfluencer/application/controllers/Brand.php"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 101.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"settings.py",
			"settings",
			"setting",
			"password",
			"loadTweetCointainer",
			"loadTweetContainer",
			"attachTweet",
			"tweetList",
			"parent_obj",
			"NoneType",
			"Followers",
			"):\n",
			"is_following",
			"Cannot send",
			"django",
			"}}"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 7,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/accounts/models.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2227,
						"regions":
						{
						},
						"selection":
						[
							[
								1339,
								1350
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 489.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/accounts/templates/accounts/user_detail.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1601,
						"regions":
						{
						},
						"selection":
						[
							[
								1198,
								1198
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 238.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/tweets/templates/tweets/tweet_list.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1612,
						"regions":
						{
						},
						"selection":
						[
							[
								25,
								25
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/accounts/urls.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 805,
						"regions":
						{
						},
						"selection":
						[
							[
								261,
								261
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/tweetme/urls.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1846,
						"regions":
						{
						},
						"selection":
						[
							[
								1657,
								1657
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/accounts/templates/registration/login.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1142,
						"regions":
						{
						},
						"selection":
						[
							[
								414,
								414
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 6,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 504815,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										295,
										303
									],
									[
										660,
										668
									],
									[
										802,
										810
									],
									[
										1163,
										1171
									],
									[
										1360,
										1368
									],
									[
										1524,
										1532
									],
									[
										1679,
										1687
									],
									[
										1888,
										1896
									],
									[
										2031,
										2039
									],
									[
										2189,
										2197
									],
									[
										2354,
										2362
									],
									[
										2676,
										2684
									],
									[
										2983,
										2991
									],
									[
										3196,
										3204
									],
									[
										3221,
										3229
									],
									[
										3325,
										3333
									],
									[
										3376,
										3384
									],
									[
										3446,
										3454
									],
									[
										3681,
										3689
									],
									[
										3844,
										3852
									],
									[
										4122,
										4130
									],
									[
										4187,
										4195
									],
									[
										4253,
										4261
									],
									[
										4516,
										4524
									],
									[
										4630,
										4638
									],
									[
										4708,
										4716
									],
									[
										4733,
										4741
									],
									[
										4874,
										4882
									],
									[
										5053,
										5061
									],
									[
										5103,
										5111
									],
									[
										5189,
										5197
									],
									[
										5210,
										5218
									],
									[
										5270,
										5278
									],
									[
										5338,
										5346
									],
									[
										5375,
										5383
									],
									[
										5490,
										5498
									],
									[
										5601,
										5609
									],
									[
										5679,
										5687
									],
									[
										5732,
										5740
									],
									[
										5809,
										5817
									],
									[
										5888,
										5896
									],
									[
										5987,
										5995
									],
									[
										6127,
										6135
									],
									[
										6165,
										6173
									],
									[
										6270,
										6278
									],
									[
										6279,
										6287
									],
									[
										6400,
										6408
									],
									[
										6485,
										6493
									],
									[
										6538,
										6546
									],
									[
										6550,
										6558
									],
									[
										6595,
										6603
									],
									[
										6627,
										6635
									],
									[
										6773,
										6781
									],
									[
										6789,
										6797
									],
									[
										6878,
										6886
									],
									[
										6901,
										6909
									],
									[
										7166,
										7174
									],
									[
										7225,
										7233
									],
									[
										7248,
										7256
									],
									[
										7450,
										7458
									],
									[
										7590,
										7598
									],
									[
										7651,
										7659
									],
									[
										7797,
										7805
									],
									[
										7810,
										7818
									],
									[
										7851,
										7859
									],
									[
										7915,
										7923
									],
									[
										7947,
										7955
									],
									[
										7998,
										8006
									],
									[
										8111,
										8119
									],
									[
										8166,
										8174
									],
									[
										8230,
										8238
									],
									[
										8248,
										8256
									],
									[
										8322,
										8330
									],
									[
										8368,
										8376
									],
									[
										8536,
										8544
									],
									[
										8747,
										8755
									],
									[
										9047,
										9055
									],
									[
										9223,
										9231
									],
									[
										9306,
										9314
									],
									[
										9402,
										9410
									],
									[
										9425,
										9433
									],
									[
										9492,
										9500
									],
									[
										9511,
										9519
									],
									[
										9575,
										9583
									],
									[
										9613,
										9621
									],
									[
										9723,
										9731
									],
									[
										9792,
										9800
									],
									[
										9958,
										9966
									],
									[
										10078,
										10086
									],
									[
										10097,
										10105
									],
									[
										10278,
										10286
									],
									[
										10417,
										10425
									],
									[
										10619,
										10627
									],
									[
										10796,
										10804
									],
									[
										11035,
										11043
									],
									[
										11199,
										11207
									],
									[
										11214,
										11222
									],
									[
										11423,
										11431
									],
									[
										11453,
										11461
									],
									[
										11508,
										11516
									],
									[
										11761,
										11769
									],
									[
										11867,
										11875
									],
									[
										12120,
										12128
									],
									[
										12277,
										12285
									],
									[
										12537,
										12545
									],
									[
										12837,
										12845
									],
									[
										13337,
										13345
									],
									[
										13765,
										13773
									],
									[
										14113,
										14121
									],
									[
										14613,
										14621
									],
									[
										15038,
										15046
									],
									[
										15386,
										15394
									],
									[
										15734,
										15742
									],
									[
										16082,
										16090
									],
									[
										16582,
										16590
									],
									[
										16772,
										16780
									],
									[
										17275,
										17283
									],
									[
										17700,
										17708
									],
									[
										18200,
										18208
									],
									[
										18774,
										18782
									],
									[
										18906,
										18914
									],
									[
										19430,
										19438
									],
									[
										20005,
										20013
									],
									[
										20178,
										20186
									],
									[
										20491,
										20499
									],
									[
										20578,
										20586
									],
									[
										20662,
										20670
									],
									[
										20748,
										20756
									],
									[
										20837,
										20845
									],
									[
										20924,
										20932
									],
									[
										21012,
										21020
									],
									[
										21097,
										21105
									],
									[
										21181,
										21189
									],
									[
										21266,
										21274
									],
									[
										21351,
										21359
									],
									[
										21434,
										21442
									],
									[
										21517,
										21525
									],
									[
										21601,
										21609
									],
									[
										21685,
										21693
									],
									[
										21776,
										21784
									],
									[
										21859,
										21867
									],
									[
										21944,
										21952
									],
									[
										22040,
										22048
									],
									[
										22133,
										22141
									],
									[
										22220,
										22228
									],
									[
										22305,
										22313
									],
									[
										22402,
										22410
									],
									[
										22497,
										22505
									],
									[
										22590,
										22598
									],
									[
										22686,
										22694
									],
									[
										22782,
										22790
									],
									[
										22868,
										22876
									],
									[
										22952,
										22960
									],
									[
										23037,
										23045
									],
									[
										23122,
										23130
									],
									[
										23206,
										23214
									],
									[
										23291,
										23299
									],
									[
										23374,
										23382
									],
									[
										23467,
										23475
									],
									[
										23553,
										23561
									],
									[
										23637,
										23645
									],
									[
										23720,
										23728
									],
									[
										23806,
										23814
									],
									[
										23897,
										23905
									],
									[
										23984,
										23992
									],
									[
										24073,
										24081
									],
									[
										24161,
										24169
									],
									[
										24242,
										24250
									],
									[
										24329,
										24337
									],
									[
										24414,
										24422
									],
									[
										24500,
										24508
									],
									[
										24586,
										24594
									],
									[
										24670,
										24678
									],
									[
										24753,
										24761
									],
									[
										24838,
										24846
									],
									[
										24922,
										24930
									],
									[
										25013,
										25021
									],
									[
										25101,
										25109
									],
									[
										25187,
										25195
									],
									[
										25276,
										25284
									],
									[
										25364,
										25372
									],
									[
										25452,
										25460
									],
									[
										25538,
										25546
									],
									[
										25624,
										25632
									],
									[
										25719,
										25727
									],
									[
										25804,
										25812
									],
									[
										25888,
										25896
									],
									[
										25984,
										25992
									],
									[
										26070,
										26078
									],
									[
										26156,
										26164
									],
									[
										26241,
										26249
									],
									[
										26330,
										26338
									],
									[
										26429,
										26437
									],
									[
										26516,
										26524
									],
									[
										26602,
										26610
									],
									[
										26687,
										26695
									],
									[
										26775,
										26783
									],
									[
										26862,
										26870
									],
									[
										26948,
										26956
									],
									[
										27040,
										27048
									],
									[
										27126,
										27134
									],
									[
										27212,
										27220
									],
									[
										27296,
										27304
									],
									[
										27381,
										27389
									],
									[
										27464,
										27472
									],
									[
										27550,
										27558
									],
									[
										27634,
										27642
									],
									[
										27719,
										27727
									],
									[
										27807,
										27815
									],
									[
										27890,
										27898
									],
									[
										27979,
										27987
									],
									[
										28076,
										28084
									],
									[
										28269,
										28277
									],
									[
										28620,
										28628
									],
									[
										28971,
										28979
									],
									[
										29471,
										29479
									],
									[
										30045,
										30053
									],
									[
										30627,
										30635
									],
									[
										30810,
										30818
									],
									[
										31315,
										31323
									],
									[
										31742,
										31750
									],
									[
										32248,
										32256
									],
									[
										32824,
										32832
									],
									[
										33248,
										33256
									],
									[
										33748,
										33756
									],
									[
										34326,
										34334
									],
									[
										34902,
										34910
									],
									[
										35320,
										35328
									],
									[
										35668,
										35676
									],
									[
										36168,
										36176
									],
									[
										36590,
										36598
									],
									[
										37090,
										37098
									],
									[
										37516,
										37524
									],
									[
										37864,
										37872
									],
									[
										38366,
										38374
									],
									[
										38939,
										38947
									],
									[
										39122,
										39130
									],
									[
										39471,
										39479
									],
									[
										39971,
										39979
									],
									[
										40397,
										40405
									],
									[
										40897,
										40905
									],
									[
										41473,
										41481
									],
									[
										42048,
										42056
									],
									[
										42154,
										42162
									],
									[
										42522,
										42530
									],
									[
										42870,
										42878
									],
									[
										43218,
										43226
									],
									[
										43566,
										43574
									],
									[
										44066,
										44074
									],
									[
										44474,
										44482
									],
									[
										44974,
										44982
									],
									[
										45401,
										45409
									],
									[
										45901,
										45909
									],
									[
										46327,
										46335
									],
									[
										46827,
										46835
									],
									[
										47253,
										47261
									],
									[
										47601,
										47609
									],
									[
										48101,
										48109
									],
									[
										48526,
										48534
									],
									[
										49026,
										49034
									],
									[
										49182,
										49190
									],
									[
										49543,
										49551
									],
									[
										49891,
										49899
									],
									[
										50239,
										50247
									],
									[
										50739,
										50747
									],
									[
										51315,
										51323
									],
									[
										51492,
										51500
									],
									[
										52024,
										52032
									],
									[
										52602,
										52610
									],
									[
										53180,
										53188
									],
									[
										53601,
										53609
									],
									[
										54101,
										54109
									],
									[
										54673,
										54681
									],
									[
										55095,
										55103
									],
									[
										55448,
										55456
									],
									[
										55948,
										55956
									],
									[
										56370,
										56378
									],
									[
										56718,
										56726
									],
									[
										57066,
										57074
									],
									[
										57414,
										57422
									],
									[
										57914,
										57922
									],
									[
										58341,
										58349
									],
									[
										58690,
										58698
									],
									[
										59190,
										59198
									],
									[
										59616,
										59624
									],
									[
										59964,
										59972
									],
									[
										60474,
										60482
									],
									[
										61040,
										61048
									],
									[
										61408,
										61416
									],
									[
										61446,
										61454
									],
									[
										61727,
										61735
									],
									[
										61980,
										61988
									],
									[
										62026,
										62034
									],
									[
										62121,
										62129
									],
									[
										62205,
										62213
									],
									[
										62442,
										62450
									],
									[
										62600,
										62608
									],
									[
										62930,
										62938
									],
									[
										62968,
										62976
									],
									[
										63182,
										63190
									],
									[
										63358,
										63366
									],
									[
										63669,
										63677
									],
									[
										63914,
										63922
									],
									[
										64094,
										64102
									],
									[
										64128,
										64136
									],
									[
										64245,
										64253
									],
									[
										64547,
										64555
									],
									[
										64882,
										64890
									],
									[
										65250,
										65258
									],
									[
										65508,
										65516
									],
									[
										65805,
										65813
									],
									[
										66003,
										66011
									],
									[
										66297,
										66305
									],
									[
										66490,
										66498
									],
									[
										66653,
										66661
									],
									[
										67001,
										67009
									],
									[
										67332,
										67340
									],
									[
										67671,
										67679
									],
									[
										67834,
										67842
									],
									[
										68222,
										68230
									],
									[
										68376,
										68384
									],
									[
										68576,
										68584
									],
									[
										68960,
										68968
									],
									[
										69069,
										69077
									],
									[
										69191,
										69199
									],
									[
										69244,
										69252
									],
									[
										69257,
										69265
									],
									[
										69323,
										69331
									],
									[
										69370,
										69378
									],
									[
										69399,
										69407
									],
									[
										69442,
										69450
									],
									[
										69511,
										69519
									],
									[
										69523,
										69531
									],
									[
										69571,
										69579
									],
									[
										69613,
										69621
									],
									[
										69828,
										69836
									],
									[
										70169,
										70177
									],
									[
										70192,
										70200
									],
									[
										70272,
										70280
									],
									[
										70429,
										70437
									],
									[
										70608,
										70616
									],
									[
										70826,
										70834
									],
									[
										71041,
										71049
									],
									[
										142780,
										142788
									],
									[
										143913,
										143921
									],
									[
										144497,
										144505
									],
									[
										144519,
										144527
									],
									[
										149605,
										149613
									],
									[
										149621,
										149629
									],
									[
										150329,
										150337
									],
									[
										150430,
										150438
									],
									[
										157118,
										157126
									],
									[
										157369,
										157377
									],
									[
										157647,
										157655
									],
									[
										157804,
										157812
									],
									[
										158244,
										158252
									],
									[
										158444,
										158452
									],
									[
										158627,
										158635
									],
									[
										158829,
										158837
									],
									[
										159105,
										159113
									],
									[
										159375,
										159383
									],
									[
										159598,
										159606
									],
									[
										159799,
										159807
									],
									[
										160125,
										160133
									],
									[
										160423,
										160431
									],
									[
										160677,
										160685
									],
									[
										160930,
										160938
									],
									[
										161252,
										161260
									],
									[
										161379,
										161387
									],
									[
										161676,
										161684
									],
									[
										161928,
										161936
									],
									[
										162279,
										162287
									],
									[
										162528,
										162536
									],
									[
										162745,
										162753
									],
									[
										162827,
										162835
									],
									[
										163106,
										163114
									],
									[
										163450,
										163458
									],
									[
										163769,
										163777
									],
									[
										164134,
										164142
									],
									[
										164347,
										164355
									],
									[
										164631,
										164639
									],
									[
										164878,
										164886
									],
									[
										165182,
										165190
									],
									[
										165422,
										165430
									],
									[
										165704,
										165712
									],
									[
										165978,
										165986
									],
									[
										166163,
										166171
									],
									[
										166516,
										166524
									],
									[
										166783,
										166791
									],
									[
										167031,
										167039
									],
									[
										167274,
										167282
									],
									[
										167538,
										167546
									],
									[
										167830,
										167838
									],
									[
										168006,
										168014
									],
									[
										168075,
										168083
									],
									[
										168244,
										168252
									],
									[
										168534,
										168542
									],
									[
										168745,
										168753
									],
									[
										169037,
										169045
									],
									[
										169217,
										169225
									],
									[
										169497,
										169505
									],
									[
										169738,
										169746
									],
									[
										169790,
										169798
									],
									[
										169861,
										169869
									],
									[
										169955,
										169963
									],
									[
										170248,
										170256
									],
									[
										170451,
										170459
									],
									[
										170691,
										170699
									],
									[
										170975,
										170983
									],
									[
										171315,
										171323
									],
									[
										171576,
										171584
									],
									[
										171916,
										171924
									],
									[
										172153,
										172161
									],
									[
										172482,
										172490
									],
									[
										172607,
										172615
									],
									[
										172874,
										172882
									],
									[
										173202,
										173210
									],
									[
										173534,
										173542
									],
									[
										173798,
										173806
									],
									[
										173857,
										173865
									],
									[
										174210,
										174218
									],
									[
										174523,
										174531
									],
									[
										174856,
										174864
									],
									[
										174953,
										174961
									],
									[
										175369,
										175377
									],
									[
										175890,
										175898
									],
									[
										176294,
										176302
									],
									[
										176513,
										176521
									],
									[
										176563,
										176571
									],
									[
										176767,
										176775
									],
									[
										176792,
										176800
									],
									[
										176841,
										176849
									],
									[
										176893,
										176901
									],
									[
										176948,
										176956
									],
									[
										177005,
										177013
									],
									[
										177072,
										177080
									],
									[
										177274,
										177282
									],
									[
										177402,
										177410
									],
									[
										177481,
										177489
									],
									[
										177596,
										177604
									],
									[
										177692,
										177700
									],
									[
										177889,
										177897
									],
									[
										178087,
										178095
									],
									[
										178433,
										178441
									],
									[
										178461,
										178469
									],
									[
										178532,
										178540
									],
									[
										178686,
										178694
									],
									[
										178809,
										178817
									],
									[
										178873,
										178881
									],
									[
										179117,
										179125
									],
									[
										179145,
										179153
									],
									[
										179375,
										179383
									],
									[
										179699,
										179707
									],
									[
										179983,
										179991
									],
									[
										180430,
										180438
									],
									[
										180718,
										180726
									],
									[
										180749,
										180757
									],
									[
										181032,
										181040
									],
									[
										181412,
										181420
									],
									[
										181705,
										181713
									],
									[
										181965,
										181973
									],
									[
										182314,
										182322
									],
									[
										182376,
										182384
									],
									[
										182676,
										182684
									],
									[
										182929,
										182937
									],
									[
										183094,
										183102
									],
									[
										183253,
										183261
									],
									[
										183554,
										183562
									],
									[
										183784,
										183792
									],
									[
										184085,
										184093
									],
									[
										184470,
										184478
									],
									[
										184509,
										184517
									],
									[
										184538,
										184546
									],
									[
										184572,
										184580
									],
									[
										184597,
										184605
									],
									[
										184752,
										184760
									],
									[
										184792,
										184800
									],
									[
										185087,
										185095
									],
									[
										185483,
										185491
									],
									[
										185745,
										185753
									],
									[
										185920,
										185928
									],
									[
										185949,
										185957
									],
									[
										185983,
										185991
									],
									[
										186029,
										186037
									],
									[
										186093,
										186101
									],
									[
										186176,
										186184
									],
									[
										186372,
										186380
									],
									[
										186607,
										186615
									],
									[
										186853,
										186861
									],
									[
										187051,
										187059
									],
									[
										187349,
										187357
									],
									[
										187577,
										187585
									],
									[
										187865,
										187873
									],
									[
										188241,
										188249
									],
									[
										188351,
										188359
									],
									[
										188632,
										188640
									],
									[
										188667,
										188675
									],
									[
										188968,
										188976
									],
									[
										189345,
										189353
									],
									[
										189744,
										189752
									],
									[
										189968,
										189976
									],
									[
										190180,
										190188
									],
									[
										190428,
										190436
									],
									[
										190623,
										190631
									],
									[
										190876,
										190884
									],
									[
										191242,
										191250
									],
									[
										191402,
										191410
									],
									[
										191785,
										191793
									],
									[
										192218,
										192226
									],
									[
										192616,
										192624
									],
									[
										192835,
										192843
									],
									[
										193068,
										193076
									],
									[
										193395,
										193403
									],
									[
										193612,
										193620
									],
									[
										193921,
										193929
									],
									[
										194214,
										194222
									],
									[
										194396,
										194404
									],
									[
										194634,
										194642
									],
									[
										194853,
										194861
									],
									[
										194913,
										194921
									],
									[
										194990,
										194998
									],
									[
										195254,
										195262
									],
									[
										195517,
										195525
									],
									[
										195797,
										195805
									],
									[
										196058,
										196066
									],
									[
										196120,
										196128
									],
									[
										196192,
										196200
									],
									[
										196343,
										196351
									],
									[
										196665,
										196673
									],
									[
										197018,
										197026
									],
									[
										197373,
										197381
									],
									[
										197616,
										197624
									],
									[
										197962,
										197970
									],
									[
										198244,
										198252
									],
									[
										198428,
										198436
									],
									[
										198714,
										198722
									],
									[
										198847,
										198855
									],
									[
										198909,
										198917
									],
									[
										198973,
										198981
									],
									[
										199199,
										199207
									],
									[
										199504,
										199512
									],
									[
										199674,
										199682
									],
									[
										199746,
										199754
									],
									[
										199818,
										199826
									],
									[
										199902,
										199910
									],
									[
										200231,
										200239
									],
									[
										200501,
										200509
									],
									[
										200681,
										200689
									],
									[
										200924,
										200932
									],
									[
										201129,
										201137
									],
									[
										201401,
										201409
									],
									[
										201618,
										201626
									],
									[
										201921,
										201929
									],
									[
										202152,
										202160
									],
									[
										202451,
										202459
									],
									[
										202741,
										202749
									],
									[
										202971,
										202979
									],
									[
										203219,
										203227
									],
									[
										203574,
										203582
									],
									[
										203764,
										203772
									],
									[
										204039,
										204047
									],
									[
										204326,
										204334
									],
									[
										204693,
										204701
									],
									[
										204861,
										204869
									],
									[
										205150,
										205158
									],
									[
										205396,
										205404
									],
									[
										205657,
										205665
									],
									[
										206018,
										206026
									],
									[
										206248,
										206256
									],
									[
										206610,
										206618
									],
									[
										206999,
										207007
									],
									[
										207279,
										207287
									],
									[
										207577,
										207585
									],
									[
										207856,
										207864
									],
									[
										207891,
										207899
									],
									[
										207946,
										207954
									],
									[
										208256,
										208264
									],
									[
										208531,
										208539
									],
									[
										208791,
										208799
									],
									[
										208998,
										209006
									],
									[
										209039,
										209047
									],
									[
										209274,
										209282
									],
									[
										209522,
										209530
									],
									[
										209717,
										209725
									],
									[
										209750,
										209758
									],
									[
										209943,
										209951
									],
									[
										210307,
										210315
									],
									[
										210374,
										210382
									],
									[
										210659,
										210667
									],
									[
										210746,
										210754
									],
									[
										210787,
										210795
									],
									[
										211048,
										211056
									],
									[
										211378,
										211386
									],
									[
										211638,
										211646
									],
									[
										211709,
										211717
									],
									[
										212050,
										212058
									],
									[
										212354,
										212362
									],
									[
										212604,
										212612
									],
									[
										212796,
										212804
									],
									[
										212925,
										212933
									],
									[
										213208,
										213216
									],
									[
										213327,
										213335
									],
									[
										213404,
										213412
									],
									[
										213504,
										213512
									],
									[
										213738,
										213746
									],
									[
										213887,
										213895
									],
									[
										213941,
										213949
									],
									[
										213965,
										213973
									],
									[
										214011,
										214019
									],
									[
										214034,
										214042
									],
									[
										214177,
										214185
									],
									[
										214417,
										214425
									],
									[
										214640,
										214648
									],
									[
										215057,
										215065
									],
									[
										215329,
										215337
									],
									[
										215550,
										215558
									],
									[
										215872,
										215880
									],
									[
										216198,
										216206
									],
									[
										216496,
										216504
									],
									[
										216817,
										216825
									],
									[
										216993,
										217001
									],
									[
										217238,
										217246
									],
									[
										217486,
										217494
									],
									[
										217541,
										217549
									],
									[
										217756,
										217764
									],
									[
										218052,
										218060
									],
									[
										218359,
										218367
									],
									[
										218590,
										218598
									],
									[
										218740,
										218748
									],
									[
										218866,
										218874
									],
									[
										219124,
										219132
									],
									[
										219407,
										219415
									],
									[
										219607,
										219615
									],
									[
										219898,
										219906
									],
									[
										220118,
										220126
									],
									[
										220392,
										220400
									],
									[
										220434,
										220442
									],
									[
										220667,
										220675
									],
									[
										220846,
										220854
									],
									[
										221059,
										221067
									],
									[
										221446,
										221454
									],
									[
										221607,
										221615
									],
									[
										221821,
										221829
									],
									[
										222151,
										222159
									],
									[
										222234,
										222242
									],
									[
										222620,
										222628
									],
									[
										222630,
										222638
									],
									[
										222782,
										222790
									],
									[
										222829,
										222837
									],
									[
										222865,
										222873
									],
									[
										222903,
										222911
									],
									[
										223276,
										223284
									],
									[
										223426,
										223434
									],
									[
										223473,
										223481
									],
									[
										223690,
										223698
									],
									[
										223827,
										223835
									],
									[
										224006,
										224014
									],
									[
										224302,
										224310
									],
									[
										224538,
										224546
									],
									[
										224734,
										224742
									],
									[
										224784,
										224792
									],
									[
										224859,
										224867
									],
									[
										225008,
										225016
									],
									[
										225058,
										225066
									],
									[
										225142,
										225150
									],
									[
										225331,
										225339
									],
									[
										225515,
										225523
									],
									[
										225562,
										225570
									],
									[
										225766,
										225774
									],
									[
										225967,
										225975
									],
									[
										226166,
										226174
									],
									[
										226374,
										226382
									],
									[
										226431,
										226439
									],
									[
										226512,
										226520
									],
									[
										226748,
										226756
									],
									[
										226912,
										226920
									],
									[
										227165,
										227173
									],
									[
										227370,
										227378
									],
									[
										227544,
										227552
									],
									[
										227594,
										227602
									],
									[
										227665,
										227673
									],
									[
										227792,
										227800
									],
									[
										227998,
										228006
									],
									[
										228282,
										228290
									],
									[
										228455,
										228463
									],
									[
										228672,
										228680
									],
									[
										228904,
										228912
									],
									[
										228954,
										228962
									],
									[
										229036,
										229044
									],
									[
										229147,
										229155
									],
									[
										229379,
										229387
									],
									[
										229674,
										229682
									],
									[
										229949,
										229957
									],
									[
										230197,
										230205
									],
									[
										230371,
										230379
									],
									[
										230569,
										230577
									],
									[
										230774,
										230782
									],
									[
										231058,
										231066
									],
									[
										231303,
										231311
									],
									[
										231543,
										231551
									],
									[
										231650,
										231658
									],
									[
										231973,
										231981
									],
									[
										232277,
										232285
									],
									[
										232564,
										232572
									],
									[
										232803,
										232811
									],
									[
										232965,
										232973
									],
									[
										233079,
										233087
									],
									[
										233179,
										233187
									],
									[
										233410,
										233418
									],
									[
										233670,
										233678
									],
									[
										233996,
										234004
									],
									[
										234260,
										234268
									],
									[
										234586,
										234594
									],
									[
										234929,
										234937
									],
									[
										235221,
										235229
									],
									[
										235462,
										235470
									],
									[
										235680,
										235688
									],
									[
										235895,
										235903
									],
									[
										236002,
										236010
									],
									[
										236291,
										236299
									],
									[
										236449,
										236457
									],
									[
										236522,
										236530
									],
									[
										236847,
										236855
									],
									[
										237100,
										237108
									],
									[
										237312,
										237320
									],
									[
										237554,
										237562
									],
									[
										237660,
										237668
									],
									[
										237725,
										237733
									],
									[
										237763,
										237771
									],
									[
										237987,
										237995
									],
									[
										238095,
										238103
									],
									[
										238160,
										238168
									],
									[
										238198,
										238206
									],
									[
										238461,
										238469
									],
									[
										238730,
										238738
									],
									[
										238953,
										238961
									],
									[
										239177,
										239185
									],
									[
										239362,
										239370
									],
									[
										239647,
										239655
									],
									[
										239946,
										239954
									],
									[
										240216,
										240224
									],
									[
										240502,
										240510
									],
									[
										240760,
										240768
									],
									[
										241110,
										241118
									],
									[
										241402,
										241410
									],
									[
										241457,
										241465
									],
									[
										241508,
										241516
									],
									[
										241598,
										241606
									],
									[
										241691,
										241699
									],
									[
										241776,
										241784
									],
									[
										241861,
										241869
									],
									[
										241950,
										241958
									],
									[
										242052,
										242060
									],
									[
										242335,
										242343
									],
									[
										242579,
										242587
									],
									[
										243005,
										243013
									],
									[
										243234,
										243242
									],
									[
										243456,
										243464
									],
									[
										243652,
										243660
									],
									[
										243915,
										243923
									],
									[
										243979,
										243987
									],
									[
										244169,
										244177
									],
									[
										244254,
										244262
									],
									[
										244456,
										244464
									],
									[
										244548,
										244556
									],
									[
										244801,
										244809
									],
									[
										244901,
										244909
									],
									[
										245233,
										245241
									],
									[
										245521,
										245529
									],
									[
										245819,
										245827
									],
									[
										246047,
										246055
									],
									[
										246243,
										246251
									],
									[
										246342,
										246350
									],
									[
										246443,
										246451
									],
									[
										246491,
										246499
									],
									[
										246573,
										246581
									],
									[
										246615,
										246623
									],
									[
										246662,
										246670
									],
									[
										247041,
										247049
									],
									[
										247085,
										247093
									],
									[
										247113,
										247121
									],
									[
										247326,
										247334
									],
									[
										247442,
										247450
									],
									[
										247699,
										247707
									],
									[
										247998,
										248006
									],
									[
										248126,
										248134
									],
									[
										248374,
										248382
									],
									[
										248599,
										248607
									],
									[
										248681,
										248689
									],
									[
										248740,
										248748
									],
									[
										248818,
										248826
									],
									[
										249035,
										249043
									],
									[
										249395,
										249403
									],
									[
										249452,
										249460
									],
									[
										249658,
										249666
									],
									[
										249821,
										249829
									],
									[
										249999,
										250007
									],
									[
										250352,
										250360
									],
									[
										250633,
										250641
									],
									[
										250677,
										250685
									],
									[
										250999,
										251007
									],
									[
										251111,
										251119
									],
									[
										251298,
										251306
									],
									[
										251381,
										251389
									],
									[
										251412,
										251420
									],
									[
										251452,
										251460
									],
									[
										251834,
										251842
									],
									[
										252163,
										252171
									],
									[
										252225,
										252233
									],
									[
										252293,
										252301
									],
									[
										252613,
										252621
									],
									[
										252863,
										252871
									],
									[
										253143,
										253151
									],
									[
										253374,
										253382
									],
									[
										253754,
										253762
									],
									[
										253798,
										253806
									],
									[
										253808,
										253816
									],
									[
										254051,
										254059
									],
									[
										254286,
										254294
									],
									[
										254303,
										254311
									],
									[
										254345,
										254353
									],
									[
										254423,
										254431
									],
									[
										254469,
										254477
									],
									[
										254495,
										254503
									],
									[
										254537,
										254545
									],
									[
										254570,
										254578
									],
									[
										254653,
										254661
									],
									[
										254705,
										254713
									],
									[
										254780,
										254788
									],
									[
										254825,
										254833
									],
									[
										254850,
										254858
									],
									[
										254925,
										254933
									],
									[
										255045,
										255053
									],
									[
										255365,
										255373
									],
									[
										255675,
										255683
									],
									[
										256014,
										256022
									],
									[
										256209,
										256217
									],
									[
										256341,
										256349
									],
									[
										256683,
										256691
									],
									[
										256966,
										256974
									],
									[
										257202,
										257210
									],
									[
										257379,
										257387
									],
									[
										257419,
										257427
									],
									[
										257484,
										257492
									],
									[
										257707,
										257715
									],
									[
										257948,
										257956
									],
									[
										257969,
										257977
									],
									[
										258371,
										258379
									],
									[
										258754,
										258762
									],
									[
										258943,
										258951
									],
									[
										259417,
										259425
									],
									[
										259682,
										259690
									],
									[
										259721,
										259729
									],
									[
										259744,
										259752
									],
									[
										259820,
										259828
									],
									[
										260056,
										260064
									],
									[
										260067,
										260075
									],
									[
										260314,
										260322
									],
									[
										260325,
										260333
									],
									[
										260334,
										260342
									],
									[
										260808,
										260816
									],
									[
										261037,
										261045
									],
									[
										261259,
										261267
									],
									[
										261576,
										261584
									],
									[
										261979,
										261987
									],
									[
										262252,
										262260
									],
									[
										262445,
										262453
									],
									[
										262651,
										262659
									],
									[
										262763,
										262771
									],
									[
										263063,
										263071
									],
									[
										263265,
										263273
									],
									[
										263381,
										263389
									],
									[
										263622,
										263630
									],
									[
										263687,
										263695
									],
									[
										263766,
										263774
									],
									[
										264069,
										264077
									],
									[
										264351,
										264359
									],
									[
										264641,
										264649
									],
									[
										264947,
										264955
									],
									[
										265323,
										265331
									],
									[
										265587,
										265595
									],
									[
										265775,
										265783
									],
									[
										265814,
										265822
									],
									[
										266116,
										266124
									],
									[
										266188,
										266196
									],
									[
										266215,
										266223
									],
									[
										266534,
										266542
									],
									[
										266774,
										266782
									],
									[
										266975,
										266983
									],
									[
										267186,
										267194
									],
									[
										267253,
										267261
									],
									[
										267404,
										267412
									],
									[
										267481,
										267489
									],
									[
										267698,
										267706
									],
									[
										267831,
										267839
									],
									[
										268001,
										268009
									],
									[
										268241,
										268249
									],
									[
										268438,
										268446
									],
									[
										268722,
										268730
									],
									[
										268913,
										268921
									],
									[
										269247,
										269255
									],
									[
										269441,
										269449
									],
									[
										269690,
										269698
									],
									[
										269799,
										269807
									],
									[
										269826,
										269834
									],
									[
										269884,
										269892
									],
									[
										269922,
										269930
									],
									[
										269938,
										269946
									],
									[
										270185,
										270193
									],
									[
										270343,
										270351
									],
									[
										270537,
										270545
									],
									[
										270713,
										270721
									],
									[
										270756,
										270764
									],
									[
										270800,
										270808
									],
									[
										270920,
										270928
									],
									[
										271062,
										271070
									],
									[
										271218,
										271226
									],
									[
										271532,
										271540
									],
									[
										271823,
										271831
									],
									[
										272159,
										272167
									],
									[
										272385,
										272393
									],
									[
										272424,
										272432
									],
									[
										272490,
										272498
									],
									[
										272851,
										272859
									],
									[
										273030,
										273038
									],
									[
										273051,
										273059
									],
									[
										273087,
										273095
									],
									[
										273184,
										273192
									],
									[
										273400,
										273408
									],
									[
										273435,
										273443
									],
									[
										273670,
										273678
									],
									[
										273928,
										273936
									],
									[
										274084,
										274092
									],
									[
										274186,
										274194
									],
									[
										274424,
										274432
									],
									[
										274572,
										274580
									],
									[
										274641,
										274649
									],
									[
										274673,
										274681
									],
									[
										274932,
										274940
									],
									[
										275228,
										275236
									],
									[
										275291,
										275299
									],
									[
										275364,
										275372
									],
									[
										275455,
										275463
									],
									[
										275678,
										275686
									],
									[
										275851,
										275859
									],
									[
										275938,
										275946
									],
									[
										276138,
										276146
									],
									[
										276241,
										276249
									],
									[
										276273,
										276281
									],
									[
										276306,
										276314
									],
									[
										276327,
										276335
									],
									[
										276367,
										276375
									],
									[
										276411,
										276419
									],
									[
										276468,
										276476
									],
									[
										276695,
										276703
									],
									[
										276801,
										276809
									],
									[
										276994,
										277002
									],
									[
										277099,
										277107
									],
									[
										277348,
										277356
									],
									[
										277530,
										277538
									],
									[
										277562,
										277570
									],
									[
										277619,
										277627
									],
									[
										277661,
										277669
									],
									[
										277703,
										277711
									],
									[
										278005,
										278013
									],
									[
										278276,
										278284
									],
									[
										278620,
										278628
									],
									[
										278785,
										278793
									],
									[
										279034,
										279042
									],
									[
										279303,
										279311
									],
									[
										279557,
										279565
									],
									[
										279578,
										279586
									],
									[
										279610,
										279618
									],
									[
										279669,
										279677
									],
									[
										279709,
										279717
									],
									[
										279766,
										279774
									],
									[
										279806,
										279814
									],
									[
										279881,
										279889
									],
									[
										279926,
										279934
									],
									[
										280008,
										280016
									],
									[
										280050,
										280058
									],
									[
										280109,
										280117
									],
									[
										280149,
										280157
									],
									[
										280212,
										280220
									],
									[
										280454,
										280462
									],
									[
										280694,
										280702
									],
									[
										280720,
										280728
									],
									[
										280800,
										280808
									],
									[
										280835,
										280843
									],
									[
										280880,
										280888
									],
									[
										280917,
										280925
									],
									[
										280964,
										280972
									],
									[
										281003,
										281011
									],
									[
										281052,
										281060
									],
									[
										281089,
										281097
									],
									[
										281134,
										281142
									],
									[
										281171,
										281179
									],
									[
										281216,
										281224
									],
									[
										281297,
										281305
									],
									[
										281504,
										281512
									],
									[
										281541,
										281549
									],
									[
										281828,
										281836
									],
									[
										281855,
										281863
									],
									[
										281900,
										281908
									],
									[
										281980,
										281988
									],
									[
										282024,
										282032
									],
									[
										282100,
										282108
									],
									[
										282345,
										282353
									],
									[
										282428,
										282436
									],
									[
										282617,
										282625
									],
									[
										282654,
										282662
									],
									[
										282802,
										282810
									],
									[
										282839,
										282847
									],
									[
										283105,
										283113
									],
									[
										283332,
										283340
									],
									[
										283590,
										283598
									],
									[
										283871,
										283879
									],
									[
										284191,
										284199
									],
									[
										284412,
										284420
									],
									[
										284663,
										284671
									],
									[
										284684,
										284692
									],
									[
										284720,
										284728
									],
									[
										284770,
										284778
									],
									[
										284824,
										284832
									],
									[
										284897,
										284905
									],
									[
										284966,
										284974
									],
									[
										285032,
										285040
									],
									[
										285101,
										285109
									],
									[
										285159,
										285167
									],
									[
										285218,
										285226
									],
									[
										285336,
										285344
									],
									[
										285685,
										285693
									],
									[
										285948,
										285956
									],
									[
										286205,
										286213
									],
									[
										286586,
										286594
									],
									[
										286807,
										286815
									],
									[
										286823,
										286831
									],
									[
										286887,
										286895
									],
									[
										286922,
										286930
									],
									[
										286970,
										286978
									],
									[
										287009,
										287017
									],
									[
										287050,
										287058
									],
									[
										287066,
										287074
									],
									[
										287102,
										287110
									],
									[
										287246,
										287254
									],
									[
										287586,
										287594
									],
									[
										287884,
										287892
									],
									[
										287938,
										287946
									],
									[
										287949,
										287957
									],
									[
										288011,
										288019
									],
									[
										288052,
										288060
									],
									[
										288119,
										288127
									],
									[
										288161,
										288169
									],
									[
										288206,
										288214
									],
									[
										288277,
										288285
									],
									[
										288328,
										288336
									],
									[
										288344,
										288352
									],
									[
										288381,
										288389
									],
									[
										288408,
										288416
									],
									[
										288455,
										288463
									],
									[
										288479,
										288487
									],
									[
										288503,
										288511
									],
									[
										288559,
										288567
									],
									[
										288622,
										288630
									],
									[
										288661,
										288669
									],
									[
										288768,
										288776
									],
									[
										288916,
										288924
									],
									[
										288985,
										288993
									],
									[
										289017,
										289025
									],
									[
										289070,
										289078
									],
									[
										289106,
										289114
									],
									[
										289391,
										289399
									],
									[
										289431,
										289439
									],
									[
										289490,
										289498
									],
									[
										289534,
										289542
									],
									[
										289921,
										289929
									],
									[
										290181,
										290189
									],
									[
										290298,
										290306
									],
									[
										290397,
										290405
									],
									[
										290445,
										290453
									],
									[
										290477,
										290485
									],
									[
										290512,
										290520
									],
									[
										290644,
										290652
									],
									[
										290777,
										290785
									],
									[
										290900,
										290908
									],
									[
										291021,
										291029
									],
									[
										291146,
										291154
									],
									[
										291273,
										291281
									],
									[
										291545,
										291553
									],
									[
										291660,
										291668
									],
									[
										291692,
										291700
									],
									[
										291728,
										291736
									],
									[
										291841,
										291849
									],
									[
										292038,
										292046
									],
									[
										292253,
										292261
									],
									[
										292392,
										292400
									],
									[
										292537,
										292545
									],
									[
										292780,
										292788
									],
									[
										292865,
										292873
									],
									[
										292897,
										292905
									],
									[
										292954,
										292962
									],
									[
										292996,
										293004
									],
									[
										293038,
										293046
									],
									[
										293082,
										293090
									],
									[
										293362,
										293370
									],
									[
										293601,
										293609
									],
									[
										293909,
										293917
									],
									[
										294172,
										294180
									],
									[
										294493,
										294501
									],
									[
										294684,
										294692
									],
									[
										294705,
										294713
									],
									[
										294811,
										294819
									],
									[
										294911,
										294919
									],
									[
										295076,
										295084
									],
									[
										295164,
										295172
									],
									[
										295264,
										295272
									],
									[
										295328,
										295336
									],
									[
										295368,
										295376
									],
									[
										295450,
										295458
									],
									[
										295495,
										295503
									],
									[
										295559,
										295567
									],
									[
										295599,
										295607
									],
									[
										295663,
										295671
									],
									[
										295935,
										295943
									],
									[
										296201,
										296209
									],
									[
										296348,
										296356
									],
									[
										296369,
										296377
									],
									[
										296409,
										296417
									],
									[
										296433,
										296441
									],
									[
										296559,
										296567
									],
									[
										296886,
										296894
									],
									[
										296913,
										296921
									],
									[
										296962,
										296970
									],
									[
										297129,
										297137
									],
									[
										297204,
										297212
									],
									[
										297376,
										297384
									],
									[
										297459,
										297467
									],
									[
										297772,
										297780
									],
									[
										297961,
										297969
									],
									[
										298237,
										298245
									],
									[
										298521,
										298529
									],
									[
										298784,
										298792
									],
									[
										299016,
										299024
									],
									[
										299037,
										299045
									],
									[
										299073,
										299081
									],
									[
										299242,
										299250
									],
									[
										299402,
										299410
									],
									[
										299558,
										299566
									],
									[
										299918,
										299926
									],
									[
										300248,
										300256
									],
									[
										300550,
										300558
									],
									[
										300831,
										300839
									],
									[
										300875,
										300883
									],
									[
										300907,
										300915
									],
									[
										300964,
										300972
									],
									[
										301090,
										301098
									],
									[
										301148,
										301156
									],
									[
										301169,
										301177
									],
									[
										301243,
										301251
									],
									[
										301289,
										301297
									],
									[
										301380,
										301388
									],
									[
										301526,
										301534
									],
									[
										301609,
										301617
									],
									[
										301913,
										301921
									],
									[
										302254,
										302262
									],
									[
										302441,
										302449
									],
									[
										302713,
										302721
									],
									[
										302984,
										302992
									],
									[
										303319,
										303327
									],
									[
										303648,
										303656
									],
									[
										303982,
										303990
									],
									[
										304329,
										304337
									],
									[
										304577,
										304585
									],
									[
										304631,
										304639
									],
									[
										304923,
										304931
									],
									[
										305023,
										305031
									],
									[
										305089,
										305097
									],
									[
										305219,
										305227
									],
									[
										305460,
										305468
									],
									[
										305502,
										305510
									],
									[
										305885,
										305893
									],
									[
										306192,
										306200
									],
									[
										306499,
										306507
									],
									[
										306612,
										306620
									],
									[
										306711,
										306719
									],
									[
										306975,
										306983
									],
									[
										307067,
										307075
									],
									[
										307370,
										307378
									],
									[
										307617,
										307625
									],
									[
										307919,
										307927
									],
									[
										308276,
										308284
									],
									[
										308518,
										308526
									],
									[
										308738,
										308746
									],
									[
										309043,
										309051
									],
									[
										309260,
										309268
									],
									[
										309609,
										309617
									],
									[
										309896,
										309904
									],
									[
										310102,
										310110
									],
									[
										310332,
										310340
									],
									[
										310677,
										310685
									],
									[
										311025,
										311033
									],
									[
										311577,
										311585
									],
									[
										311864,
										311872
									],
									[
										312076,
										312084
									],
									[
										312359,
										312367
									],
									[
										312411,
										312419
									],
									[
										312661,
										312669
									],
									[
										312925,
										312933
									],
									[
										312977,
										312985
									],
									[
										313285,
										313293
									],
									[
										313528,
										313536
									],
									[
										313825,
										313833
									],
									[
										314118,
										314126
									],
									[
										314501,
										314509
									],
									[
										314877,
										314885
									],
									[
										314979,
										314987
									],
									[
										315003,
										315011
									],
									[
										315284,
										315292
									],
									[
										315523,
										315531
									],
									[
										315780,
										315788
									],
									[
										316174,
										316182
									],
									[
										316451,
										316459
									],
									[
										316676,
										316684
									],
									[
										316980,
										316988
									],
									[
										317198,
										317206
									],
									[
										317498,
										317506
									],
									[
										317588,
										317596
									],
									[
										317818,
										317826
									],
									[
										318012,
										318020
									],
									[
										318105,
										318113
									],
									[
										318428,
										318436
									],
									[
										318533,
										318541
									],
									[
										318650,
										318658
									],
									[
										318951,
										318959
									],
									[
										319160,
										319168
									],
									[
										319451,
										319459
									],
									[
										319492,
										319500
									],
									[
										319737,
										319745
									],
									[
										319965,
										319973
									],
									[
										320062,
										320070
									],
									[
										320370,
										320378
									],
									[
										320596,
										320604
									],
									[
										320823,
										320831
									],
									[
										320947,
										320955
									],
									[
										321056,
										321064
									],
									[
										321245,
										321253
									],
									[
										321476,
										321484
									],
									[
										321689,
										321697
									],
									[
										321956,
										321964
									],
									[
										322213,
										322221
									],
									[
										322528,
										322536
									],
									[
										322760,
										322768
									],
									[
										322981,
										322989
									],
									[
										323048,
										323056
									],
									[
										323119,
										323127
									],
									[
										323356,
										323364
									],
									[
										323427,
										323435
									],
									[
										323669,
										323677
									],
									[
										323886,
										323894
									],
									[
										324048,
										324056
									],
									[
										324364,
										324372
									],
									[
										324652,
										324660
									],
									[
										324863,
										324871
									],
									[
										324889,
										324897
									],
									[
										325107,
										325115
									],
									[
										325359,
										325367
									],
									[
										325614,
										325622
									],
									[
										325728,
										325736
									],
									[
										325958,
										325966
									],
									[
										325984,
										325992
									],
									[
										326174,
										326182
									],
									[
										326420,
										326428
									],
									[
										326512,
										326520
									],
									[
										326790,
										326798
									],
									[
										326954,
										326962
									],
									[
										327250,
										327258
									],
									[
										327441,
										327449
									],
									[
										327877,
										327885
									],
									[
										328141,
										328149
									],
									[
										328423,
										328431
									],
									[
										328682,
										328690
									],
									[
										328959,
										328967
									],
									[
										329173,
										329181
									],
									[
										329391,
										329399
									],
									[
										329612,
										329620
									],
									[
										329740,
										329748
									],
									[
										330030,
										330038
									],
									[
										330266,
										330274
									],
									[
										330582,
										330590
									],
									[
										330880,
										330888
									],
									[
										331146,
										331154
									],
									[
										331280,
										331288
									],
									[
										331348,
										331356
									],
									[
										331417,
										331425
									],
									[
										331486,
										331494
									],
									[
										331559,
										331567
									],
									[
										331948,
										331956
									],
									[
										332197,
										332205
									],
									[
										332648,
										332656
									],
									[
										332985,
										332993
									],
									[
										333238,
										333246
									],
									[
										333579,
										333587
									],
									[
										333849,
										333857
									],
									[
										333923,
										333931
									],
									[
										334006,
										334014
									],
									[
										334076,
										334084
									],
									[
										334142,
										334150
									],
									[
										334207,
										334215
									],
									[
										334294,
										334302
									],
									[
										334628,
										334636
									],
									[
										334956,
										334964
									],
									[
										335135,
										335143
									],
									[
										335189,
										335197
									],
									[
										335409,
										335417
									],
									[
										335673,
										335681
									],
									[
										335827,
										335835
									],
									[
										336091,
										336099
									],
									[
										336376,
										336384
									],
									[
										336630,
										336638
									],
									[
										336936,
										336944
									],
									[
										337183,
										337191
									],
									[
										337384,
										337392
									],
									[
										337647,
										337655
									],
									[
										337886,
										337894
									],
									[
										338238,
										338246
									],
									[
										338520,
										338528
									],
									[
										338798,
										338806
									],
									[
										338864,
										338872
									],
									[
										339212,
										339220
									],
									[
										339519,
										339527
									],
									[
										339832,
										339840
									],
									[
										340146,
										340154
									],
									[
										340268,
										340276
									],
									[
										340547,
										340555
									],
									[
										340857,
										340865
									],
									[
										341027,
										341035
									],
									[
										341319,
										341327
									],
									[
										341678,
										341686
									],
									[
										341911,
										341919
									],
									[
										342097,
										342105
									],
									[
										342380,
										342388
									],
									[
										342523,
										342531
									],
									[
										342680,
										342688
									],
									[
										342828,
										342836
									],
									[
										343129,
										343137
									],
									[
										343384,
										343392
									],
									[
										343403,
										343411
									],
									[
										343636,
										343644
									],
									[
										343657,
										343665
									],
									[
										343904,
										343912
									],
									[
										344192,
										344200
									],
									[
										344391,
										344399
									],
									[
										344614,
										344622
									],
									[
										344880,
										344888
									],
									[
										345130,
										345138
									],
									[
										345350,
										345358
									],
									[
										345416,
										345424
									],
									[
										345643,
										345651
									],
									[
										345889,
										345897
									],
									[
										346151,
										346159
									],
									[
										346351,
										346359
									],
									[
										346582,
										346590
									],
									[
										346643,
										346651
									],
									[
										346827,
										346835
									],
									[
										347133,
										347141
									],
									[
										347369,
										347377
									],
									[
										347423,
										347431
									],
									[
										347472,
										347480
									],
									[
										347641,
										347649
									],
									[
										347657,
										347665
									],
									[
										347799,
										347807
									],
									[
										347820,
										347828
									],
									[
										347993,
										348001
									],
									[
										348175,
										348183
									],
									[
										348197,
										348205
									],
									[
										348250,
										348258
									],
									[
										348401,
										348409
									],
									[
										348680,
										348688
									],
									[
										348822,
										348830
									],
									[
										348882,
										348890
									],
									[
										349098,
										349106
									],
									[
										349392,
										349400
									],
									[
										349665,
										349673
									],
									[
										349901,
										349909
									],
									[
										350158,
										350166
									],
									[
										350211,
										350219
									],
									[
										350254,
										350262
									],
									[
										350453,
										350461
									],
									[
										350614,
										350622
									],
									[
										350974,
										350982
									],
									[
										351285,
										351293
									],
									[
										351315,
										351323
									],
									[
										351483,
										351491
									],
									[
										351520,
										351528
									],
									[
										351739,
										351747
									],
									[
										351807,
										351815
									],
									[
										351834,
										351842
									],
									[
										351932,
										351940
									],
									[
										351996,
										352004
									],
									[
										352019,
										352027
									],
									[
										352182,
										352190
									],
									[
										352402,
										352410
									],
									[
										352451,
										352459
									],
									[
										352705,
										352713
									],
									[
										352951,
										352959
									],
									[
										353215,
										353223
									],
									[
										353330,
										353338
									],
									[
										353576,
										353584
									],
									[
										353813,
										353821
									],
									[
										353962,
										353970
									],
									[
										354181,
										354189
									],
									[
										354374,
										354382
									],
									[
										354460,
										354468
									],
									[
										354567,
										354575
									],
									[
										354652,
										354660
									],
									[
										354891,
										354899
									],
									[
										355263,
										355271
									],
									[
										355584,
										355592
									],
									[
										355600,
										355608
									],
									[
										355820,
										355828
									],
									[
										355841,
										355849
									],
									[
										356065,
										356073
									],
									[
										356234,
										356242
									],
									[
										356268,
										356276
									],
									[
										356394,
										356402
									],
									[
										356428,
										356436
									],
									[
										356561,
										356569
									],
									[
										356678,
										356686
									],
									[
										356834,
										356842
									],
									[
										356941,
										356949
									],
									[
										357066,
										357074
									],
									[
										357310,
										357318
									],
									[
										357436,
										357444
									],
									[
										357706,
										357714
									],
									[
										357721,
										357729
									],
									[
										357882,
										357890
									],
									[
										357915,
										357923
									],
									[
										358050,
										358058
									],
									[
										358289,
										358297
									],
									[
										358433,
										358441
									],
									[
										358501,
										358509
									],
									[
										358707,
										358715
									],
									[
										358766,
										358774
									],
									[
										358938,
										358946
									],
									[
										359000,
										359008
									],
									[
										359241,
										359249
									],
									[
										359352,
										359360
									],
									[
										359370,
										359378
									],
									[
										359421,
										359429
									],
									[
										359682,
										359690
									],
									[
										359801,
										359809
									],
									[
										359858,
										359866
									],
									[
										360031,
										360039
									],
									[
										360091,
										360099
									],
									[
										360292,
										360300
									],
									[
										360600,
										360608
									],
									[
										360780,
										360788
									],
									[
										361134,
										361142
									],
									[
										361443,
										361451
									],
									[
										361677,
										361685
									],
									[
										361711,
										361719
									],
									[
										361896,
										361904
									],
									[
										362015,
										362023
									],
									[
										362339,
										362347
									],
									[
										362545,
										362553
									],
									[
										362912,
										362920
									],
									[
										363240,
										363248
									],
									[
										363451,
										363459
									],
									[
										363596,
										363604
									],
									[
										363962,
										363970
									],
									[
										363983,
										363991
									],
									[
										364213,
										364221
									],
									[
										364336,
										364344
									],
									[
										364593,
										364601
									],
									[
										364760,
										364768
									],
									[
										364959,
										364967
									],
									[
										365064,
										365072
									],
									[
										365228,
										365236
									],
									[
										365350,
										365358
									],
									[
										365371,
										365379
									],
									[
										365734,
										365742
									],
									[
										365977,
										365985
									],
									[
										366159,
										366167
									],
									[
										366350,
										366358
									],
									[
										366699,
										366707
									],
									[
										366872,
										366880
									],
									[
										367052,
										367060
									],
									[
										367289,
										367297
									],
									[
										367546,
										367554
									],
									[
										367772,
										367780
									],
									[
										367902,
										367910
									],
									[
										368124,
										368132
									],
									[
										368245,
										368253
									],
									[
										368499,
										368507
									],
									[
										368785,
										368793
									],
									[
										369086,
										369094
									],
									[
										369242,
										369250
									],
									[
										369324,
										369332
									],
									[
										369551,
										369559
									],
									[
										369787,
										369795
									],
									[
										370076,
										370084
									],
									[
										370533,
										370541
									],
									[
										370795,
										370803
									],
									[
										370966,
										370974
									],
									[
										371199,
										371207
									],
									[
										371234,
										371242
									],
									[
										371291,
										371299
									],
									[
										371487,
										371495
									],
									[
										371711,
										371719
									],
									[
										371848,
										371856
									],
									[
										372077,
										372085
									],
									[
										372293,
										372301
									],
									[
										372315,
										372323
									],
									[
										372654,
										372662
									],
									[
										372829,
										372837
									],
									[
										373066,
										373074
									],
									[
										373126,
										373134
									],
									[
										373222,
										373230
									],
									[
										373321,
										373329
									],
									[
										373514,
										373522
									],
									[
										373741,
										373749
									],
									[
										373934,
										373942
									],
									[
										374193,
										374201
									],
									[
										374239,
										374247
									],
									[
										374657,
										374665
									],
									[
										374690,
										374698
									],
									[
										375023,
										375031
									],
									[
										375168,
										375176
									],
									[
										375195,
										375203
									],
									[
										375620,
										375628
									],
									[
										375732,
										375740
									],
									[
										375860,
										375868
									],
									[
										375949,
										375957
									],
									[
										375975,
										375983
									],
									[
										376112,
										376120
									],
									[
										376360,
										376368
									],
									[
										376567,
										376575
									],
									[
										376710,
										376718
									],
									[
										376964,
										376972
									],
									[
										377222,
										377230
									],
									[
										377255,
										377263
									],
									[
										377342,
										377350
									],
									[
										377625,
										377633
									],
									[
										377969,
										377977
									],
									[
										378187,
										378195
									],
									[
										378315,
										378323
									],
									[
										378595,
										378603
									],
									[
										378748,
										378756
									],
									[
										378888,
										378896
									],
									[
										379062,
										379070
									],
									[
										379323,
										379331
									],
									[
										379547,
										379555
									],
									[
										379628,
										379636
									],
									[
										379736,
										379744
									],
									[
										379843,
										379851
									],
									[
										380025,
										380033
									],
									[
										380280,
										380288
									],
									[
										380418,
										380426
									],
									[
										380495,
										380503
									],
									[
										380652,
										380660
									],
									[
										380886,
										380894
									],
									[
										381280,
										381288
									],
									[
										381524,
										381532
									],
									[
										381797,
										381805
									],
									[
										382116,
										382124
									],
									[
										382333,
										382341
									],
									[
										382586,
										382594
									],
									[
										382718,
										382726
									],
									[
										382853,
										382861
									],
									[
										382905,
										382913
									],
									[
										382937,
										382945
									],
									[
										382971,
										382979
									],
									[
										383014,
										383022
									],
									[
										383075,
										383083
									],
									[
										383121,
										383129
									],
									[
										383153,
										383161
									],
									[
										383350,
										383358
									],
									[
										383520,
										383528
									],
									[
										383780,
										383788
									],
									[
										383800,
										383808
									],
									[
										384054,
										384062
									],
									[
										384269,
										384277
									],
									[
										384489,
										384497
									],
									[
										384509,
										384517
									],
									[
										384745,
										384753
									],
									[
										384935,
										384943
									],
									[
										385011,
										385019
									],
									[
										385048,
										385056
									],
									[
										385104,
										385112
									],
									[
										385277,
										385285
									],
									[
										385292,
										385300
									],
									[
										385325,
										385333
									],
									[
										385350,
										385358
									],
									[
										385359,
										385367
									],
									[
										385510,
										385518
									],
									[
										385727,
										385735
									],
									[
										385985,
										385993
									],
									[
										386061,
										386069
									],
									[
										386098,
										386106
									],
									[
										386154,
										386162
									],
									[
										386423,
										386431
									],
									[
										386446,
										386454
									],
									[
										386465,
										386473
									],
									[
										386474,
										386482
									],
									[
										386507,
										386515
									],
									[
										386711,
										386719
									],
									[
										386991,
										386999
									],
									[
										387329,
										387337
									],
									[
										387536,
										387544
									],
									[
										387613,
										387621
									],
									[
										387675,
										387683
									],
									[
										387740,
										387748
									],
									[
										387929,
										387937
									],
									[
										388155,
										388163
									],
									[
										388423,
										388431
									],
									[
										388682,
										388690
									],
									[
										388968,
										388976
									],
									[
										389182,
										389190
									],
									[
										389608,
										389616
									],
									[
										390155,
										390163
									],
									[
										390729,
										390737
									],
									[
										391169,
										391177
									],
									[
										391548,
										391556
									],
									[
										392080,
										392088
									],
									[
										392195,
										392203
									],
									[
										392221,
										392229
									],
									[
										392655,
										392663
									],
									[
										393070,
										393078
									],
									[
										393096,
										393104
									],
									[
										393320,
										393328
									],
									[
										393699,
										393707
									],
									[
										393725,
										393733
									],
									[
										393947,
										393955
									],
									[
										394329,
										394337
									],
									[
										394507,
										394515
									],
									[
										394840,
										394848
									],
									[
										395081,
										395089
									],
									[
										395226,
										395234
									],
									[
										395260,
										395268
									],
									[
										395458,
										395466
									],
									[
										395600,
										395608
									],
									[
										395731,
										395739
									],
									[
										395982,
										395990
									],
									[
										396398,
										396406
									],
									[
										396793,
										396801
									],
									[
										397203,
										397211
									],
									[
										397578,
										397586
									],
									[
										397728,
										397736
									],
									[
										397800,
										397808
									],
									[
										398184,
										398192
									],
									[
										398712,
										398720
									],
									[
										398827,
										398835
									],
									[
										398853,
										398861
									],
									[
										399287,
										399295
									],
									[
										399702,
										399710
									],
									[
										399728,
										399736
									],
									[
										399952,
										399960
									],
									[
										400331,
										400339
									],
									[
										400357,
										400365
									],
									[
										400579,
										400587
									],
									[
										400900,
										400908
									],
									[
										400929,
										400937
									],
									[
										400947,
										400955
									],
									[
										400980,
										400988
									],
									[
										401048,
										401056
									],
									[
										401111,
										401119
									],
									[
										401140,
										401148
									],
									[
										401170,
										401178
									],
									[
										401314,
										401322
									],
									[
										401469,
										401477
									],
									[
										401503,
										401511
									],
									[
										401533,
										401541
									],
									[
										401588,
										401596
									],
									[
										401661,
										401669
									],
									[
										401695,
										401703
									],
									[
										401725,
										401733
									],
									[
										401780,
										401788
									],
									[
										401877,
										401885
									],
									[
										402071,
										402079
									],
									[
										402153,
										402161
									],
									[
										402183,
										402191
									],
									[
										402334,
										402342
									],
									[
										402496,
										402504
									],
									[
										402530,
										402538
									],
									[
										402560,
										402568
									],
									[
										402705,
										402713
									],
									[
										403062,
										403070
									],
									[
										403450,
										403458
									],
									[
										403512,
										403520
									],
									[
										403666,
										403674
									],
									[
										403930,
										403938
									],
									[
										404159,
										404167
									],
									[
										404249,
										404257
									],
									[
										404454,
										404462
									],
									[
										404532,
										404540
									],
									[
										404562,
										404570
									],
									[
										404756,
										404764
									],
									[
										405008,
										405016
									],
									[
										405305,
										405313
									],
									[
										405332,
										405340
									],
									[
										405654,
										405662
									],
									[
										405797,
										405805
									],
									[
										405890,
										405898
									],
									[
										406083,
										406091
									],
									[
										406310,
										406318
									],
									[
										406496,
										406504
									],
									[
										406834,
										406842
									],
									[
										406987,
										406995
									],
									[
										407259,
										407267
									],
									[
										407578,
										407586
									],
									[
										407840,
										407848
									],
									[
										407994,
										408002
									],
									[
										408269,
										408277
									],
									[
										408531,
										408539
									],
									[
										408763,
										408771
									],
									[
										409025,
										409033
									],
									[
										409269,
										409277
									],
									[
										409531,
										409539
									],
									[
										409763,
										409771
									],
									[
										410025,
										410033
									],
									[
										410269,
										410277
									],
									[
										410499,
										410507
									],
									[
										410646,
										410654
									],
									[
										410693,
										410701
									],
									[
										410728,
										410736
									],
									[
										410956,
										410964
									],
									[
										410983,
										410991
									],
									[
										411167,
										411175
									],
									[
										411381,
										411389
									],
									[
										411427,
										411435
									],
									[
										411508,
										411516
									],
									[
										411592,
										411600
									],
									[
										411801,
										411809
									],
									[
										411945,
										411953
									],
									[
										412146,
										412154
									],
									[
										412360,
										412368
									],
									[
										412406,
										412414
									],
									[
										412487,
										412495
									],
									[
										412571,
										412579
									],
									[
										412780,
										412788
									],
									[
										412924,
										412932
									],
									[
										413130,
										413138
									],
									[
										413344,
										413352
									],
									[
										413390,
										413398
									],
									[
										413471,
										413479
									],
									[
										413555,
										413563
									],
									[
										413764,
										413772
									],
									[
										413908,
										413916
									],
									[
										414168,
										414176
									],
									[
										414421,
										414429
									],
									[
										414574,
										414582
									],
									[
										414966,
										414974
									],
									[
										415152,
										415160
									],
									[
										415425,
										415433
									],
									[
										415685,
										415693
									],
									[
										415950,
										415958
									],
									[
										416203,
										416211
									],
									[
										416357,
										416365
									],
									[
										416608,
										416616
									],
									[
										416880,
										416888
									],
									[
										416989,
										416997
									],
									[
										417111,
										417119
									],
									[
										417164,
										417172
									],
									[
										417177,
										417185
									],
									[
										417243,
										417251
									],
									[
										417290,
										417298
									],
									[
										417319,
										417327
									],
									[
										417362,
										417370
									],
									[
										417431,
										417439
									],
									[
										417443,
										417451
									],
									[
										417491,
										417499
									],
									[
										417533,
										417541
									],
									[
										417748,
										417756
									],
									[
										418089,
										418097
									],
									[
										418112,
										418120
									],
									[
										418192,
										418200
									],
									[
										418349,
										418357
									],
									[
										418528,
										418536
									],
									[
										418746,
										418754
									],
									[
										418961,
										418969
									],
									[
										490657,
										490665
									],
									[
										491790,
										491798
									],
									[
										492374,
										492382
									],
									[
										492396,
										492404
									],
									[
										497482,
										497490
									],
									[
										497498,
										497506
									],
									[
										498206,
										498214
									],
									[
										498307,
										498315
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								11346,
								11357
							],
							[
								18906,
								18917
							],
							[
								20491,
								20502
							],
							[
								20578,
								20589
							],
							[
								20662,
								20673
							],
							[
								20748,
								20759
							],
							[
								20837,
								20848
							],
							[
								20924,
								20935
							],
							[
								21012,
								21023
							],
							[
								21097,
								21108
							],
							[
								21181,
								21192
							],
							[
								21266,
								21277
							],
							[
								21351,
								21362
							],
							[
								21434,
								21445
							],
							[
								21517,
								21528
							],
							[
								21601,
								21612
							],
							[
								21685,
								21696
							],
							[
								21776,
								21787
							],
							[
								21859,
								21870
							],
							[
								21944,
								21955
							],
							[
								22040,
								22051
							],
							[
								22133,
								22144
							],
							[
								22220,
								22231
							],
							[
								22305,
								22316
							],
							[
								22402,
								22413
							],
							[
								22497,
								22508
							],
							[
								22590,
								22601
							],
							[
								22686,
								22697
							],
							[
								22782,
								22793
							],
							[
								22868,
								22879
							],
							[
								22952,
								22963
							],
							[
								23037,
								23048
							],
							[
								23122,
								23133
							],
							[
								23206,
								23217
							],
							[
								23291,
								23302
							],
							[
								23374,
								23385
							],
							[
								23467,
								23478
							],
							[
								23553,
								23564
							],
							[
								23637,
								23648
							],
							[
								23720,
								23731
							],
							[
								23806,
								23817
							],
							[
								23897,
								23908
							],
							[
								23984,
								23995
							],
							[
								24073,
								24084
							],
							[
								24161,
								24172
							],
							[
								24242,
								24253
							],
							[
								24329,
								24340
							],
							[
								24414,
								24425
							],
							[
								24500,
								24511
							],
							[
								24586,
								24597
							],
							[
								24670,
								24681
							],
							[
								24753,
								24764
							],
							[
								24838,
								24849
							],
							[
								24922,
								24933
							],
							[
								25013,
								25024
							],
							[
								25101,
								25112
							],
							[
								25187,
								25198
							],
							[
								25276,
								25287
							],
							[
								25364,
								25375
							],
							[
								25452,
								25463
							],
							[
								25538,
								25549
							],
							[
								25624,
								25635
							],
							[
								25719,
								25730
							],
							[
								25804,
								25815
							],
							[
								25888,
								25899
							],
							[
								25984,
								25995
							],
							[
								26070,
								26081
							],
							[
								26156,
								26167
							],
							[
								26241,
								26252
							],
							[
								26330,
								26341
							],
							[
								26429,
								26440
							],
							[
								26516,
								26527
							],
							[
								26602,
								26613
							],
							[
								26687,
								26698
							],
							[
								26775,
								26786
							],
							[
								26862,
								26873
							],
							[
								26948,
								26959
							],
							[
								27040,
								27051
							],
							[
								27126,
								27137
							],
							[
								27212,
								27223
							],
							[
								27296,
								27307
							],
							[
								27381,
								27392
							],
							[
								27464,
								27475
							],
							[
								27550,
								27561
							],
							[
								27634,
								27645
							],
							[
								27719,
								27730
							],
							[
								27807,
								27818
							],
							[
								27890,
								27901
							],
							[
								27979,
								27990
							],
							[
								28076,
								28087
							],
							[
								61685,
								61696
							],
							[
								253636,
								253647
							],
							[
								253754,
								253765
							],
							[
								389608,
								389619
							],
							[
								390155,
								390166
							],
							[
								390729,
								390740
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 43456.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "Procfile.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 47,
						"regions":
						{
						},
						"selection":
						[
							[
								47,
								47
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/accounts/templatetags/recommended.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 363,
						"regions":
						{
						},
						"selection":
						[
							[
								307,
								307
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "src/accounts/templates/accounts/snippets/recommended.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 182,
						"regions":
						{
						},
						"selection":
						[
							[
								121,
								137
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "src/accounts/views.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1510,
						"regions":
						{
						},
						"selection":
						[
							[
								888,
								899
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 35.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 27.0
	},
	"pinned_build_system": "",
	"project": "tweetme.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 371.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
